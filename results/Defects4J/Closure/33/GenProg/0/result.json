{
  "repair_end": "2018-12-02 13:56:35.288118", 
  "repair_begin": "2018-12-02 13:28:42.534238", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "InsertBefore", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:38.702976965 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_442/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:27.125864766 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_915/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:00.818627731 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1169/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:53.655008781 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_831/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:43:01.038490166 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_801/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:42:40.162441195 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1415/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:34.407255359 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:45:24.806815604 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1585/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:27.651394251 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_659/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:40:59.830202976 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:01.923024239 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:20.331160992 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1899/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:02.915689599 -0500\n@@ -567,14 +567,6 @@\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_14/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:33:24.089077993 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_551/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:39:42.562034433 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1737/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:13.087551852 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:50:52.959347731 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:52.963347737 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1629/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:57.575436707 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:35.127404666 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_783/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:42:28.150412773 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1639/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:52:04.355446600 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1639/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:52:04.355446600 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1440/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:50.903273068 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_5/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:33:18.977053960 -0500\n@@ -258,7 +258,7 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n+            return true;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1269/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:00.131133503 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_944/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:19.638670323 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1300/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:19.571159940 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1471/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:50:11.103296045 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1471/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:11.107296049 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "InsertBefore", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1276/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:04.599139493 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:22.147386668 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1034/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:45:23.322812329 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_249/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:36:14.113547589 -0500\n@@ -258,7 +258,7 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n+            return true;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_249/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:14.117547600 -0500\n@@ -569,10 +569,6 @@\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:22.811567397 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1779/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:42.247594081 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_720/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:41:43.154304536 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:08.239229374 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_319/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:59.749659589 -0500\n@@ -570,10 +570,7 @@\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_2024/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:56:27.943807978 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "InsertBefore", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1140/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:36.446972083 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_810/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:42:46.106455192 -0500\n@@ -567,14 +567,6 @@\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1552/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:06.427365424 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_259/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:20.897564484 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_588/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:40:08.894092390 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1697/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:52:46.243509735 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_493/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:39:00.829941298 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_882/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:43:37.690574943 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 215, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1906/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:55:07.387695423 -0500\n@@ -212,7 +212,6 @@\n     // Top of the record types is the empty record, or OBJECT_TYPE.\n     if (registry.getNativeObjectType(\n             JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n     }\n \n     // A type is a subtype of a record type if it itself is a record\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1906/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:07.391695428 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1884/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:53.071676960 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 112, 
          "faulty": "for (String key : keySet) {\n  if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_330/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:37:06.485675809 -0500\n@@ -109,11 +109,6 @@\n     if (!otherProps.keySet().equals(keySet)) {\n       return false;\n     }\n-    for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n-    }\n     return true;\n   }\n \n@@ -258,7 +253,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_545/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:39:38.774026046 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:10.587147602 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1319/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:31.511176643 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_952/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:24.878682126 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1777/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:53:41.495593286 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1777/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:41.499593289 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_340/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:37:13.337692232 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1321/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:48:32.263177707 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1321/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:32.263177707 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_467/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:43.589902308 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1594/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:51:33.607402538 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1594/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:33.607402538 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1048/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:45:32.266832041 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1048/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:45:32.266832041 -0500\n@@ -573,7 +573,6 @@\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                 .getLeastSupertype(propType);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1703/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:52:49.955515486 -0500\n@@ -567,14 +567,6 @@\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1559/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:10.911371420 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_942/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:18.890668636 -0500\n@@ -567,14 +567,6 @@\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1808/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:00.903614422 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_904/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:43:53.342610724 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_904/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:43:53.346610732 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:47:57.903129905 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:57.907129913 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Replace", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_71/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:34:05.917207895 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_996/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:55.670751043 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1403/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:26.243246965 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_918/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:02.318631137 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_972/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:39.230714341 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:45:43.478856679 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_703/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:41:31.194275252 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1826/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:13.567628869 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1359/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:57.051213476 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:40.555189519 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1870/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:44.847666591 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Replace", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_2017/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:56:23.467801383 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_561/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:39:49.318049359 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_480/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:52.565922649 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 215, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_528/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:39:26.577998958 -0500\n@@ -212,7 +212,6 @@\n     // Top of the record types is the empty record, or OBJECT_TYPE.\n     if (registry.getNativeObjectType(\n             JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n     }\n \n     // A type is a subtype of a record type if it itself is a record\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_528/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:39:26.577998958 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1525/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:50:47.711340971 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1525/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:47.715340977 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1486/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:50:20.847307605 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1486/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:20.847307605 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1893/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:59.195684794 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1428/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:42.695264134 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1248/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:46.695108619 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:45:44.230858329 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1918/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:15.639706298 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:51:14.639376444 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:14.639376444 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_274/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:36:30.733588822 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_274/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:30.733588822 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1233/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:37.699091578 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_179/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:35:23.589418692 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:29.503076089 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 117, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1143/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:37.938975314 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_454/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:35.353883568 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_17/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:33:25.693085160 -0500\n@@ -569,10 +569,6 @@\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:48:56.275212336 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:56.275212336 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 112, 
          "faulty": "for (String key : keySet) {\n  if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_310/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:36:54.453646782 -0500\n@@ -109,11 +109,6 @@\n     if (!otherProps.keySet().equals(keySet)) {\n       return false;\n     }\n-    for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n-    }\n     return true;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_310/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:54.457646791 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1157/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:46.178993126 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1480/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:17.131303162 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "InsertBefore", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:38.447092993 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:41.751333387 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_936/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:15.158660212 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_2001/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:56:13.039786158 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_282/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:36:35.297600055 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_282/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:35.301600064 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:28.751074670 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1348/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:51.027204658 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1417/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:49:35.199256187 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1417/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:35.199256187 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_612/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:40:26.174130119 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1563/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:13.151374434 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_437/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:24.085857801 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:44.674989878 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:49:16.543237327 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:16.543237327 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_264/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:23.905571947 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_458/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:37.593888672 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_300/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:47.685630347 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 112, 
          "faulty": "for (String key : keySet) {\n  if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_279/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:36:33.773596309 -0500\n@@ -109,11 +109,6 @@\n     if (!otherProps.keySet().equals(keySet)) {\n       return false;\n     }\n-    for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n-    }\n     return true;\n   }\n \n@@ -258,7 +253,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_279/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:33.773596309 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1719/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:01.127532939 -0500\n@@ -573,7 +573,6 @@\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                 .getLeastSupertype(propType);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_9/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:33:20.933063537 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1457/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:50:02.911286561 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1457/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:02.915286566 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_636/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:40:43.378167460 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Replace", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_754/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:42:07.206362755 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_312/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:55.205648604 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_236/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:36:05.069524922 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_236/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:36:05.073524933 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1940/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:30.567726378 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_130/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:34:48.929326735 -0500\n@@ -258,7 +258,7 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n+            return true;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_130/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:34:48.933326745 -0500\n@@ -570,8 +570,6 @@\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_60/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:33:58.253186108 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:48:51.779205755 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:51.779205755 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Replace", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_364/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:37:30.657733422 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_2/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:33:16.189040306 -0500\n@@ -570,8 +570,6 @@\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1465/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:08.115292560 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "InsertBefore", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1095/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:04.374902394 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_694/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:41:25.274260672 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:19.035056358 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 572, 
          "faulty": "if (!hasProperty(prop)) {\n  typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n}", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_420/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:12.025830051 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1119/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:21.498939671 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:41.467098710 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 112, 
          "faulty": "for (String key : keySet) {\n  if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n    return false;\n  }\n}", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_162/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:35:12.273389011 -0500\n@@ -109,11 +109,6 @@\n     if (!otherProps.keySet().equals(keySet)) {\n       return false;\n     }\n-    for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n-    }\n     return true;\n   }\n \n@@ -258,7 +253,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_162/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:35:12.277389021 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_729/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:41:49.126319074 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_729/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:41:49.130319083 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Replace", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1878/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:50.075673162 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1627/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:51:56.795435575 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1627/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:51:56.795435575 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1786/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:46.751598885 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Replace", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_789/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:42:31.874421605 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:50.463602897 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1060/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:45:40.498850138 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1796/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:52.699605335 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1467/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:50:08.863293429 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1467/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:08.863293429 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:47:53.395121336 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 215, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:48:07.603143550 -0500\n@@ -212,7 +212,6 @@\n     // Top of the record types is the empty record, or OBJECT_TYPE.\n     if (registry.getNativeObjectType(\n             JSTypeNative.OBJECT_TYPE).isSubtype(that)) {\n-      return true;\n     }\n \n     // A type is a subtype of a record type if it itself is a record\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:07.603143550 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1882/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:52.331676019 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1935/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:27.599722345 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1381/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:11.251232226 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "InsertBefore", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1511/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:50:38.775329637 -0500\n@@ -110,9 +110,7 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n+      return true;\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1511/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:50:38.775329637 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_2011/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:56:19.755795939 -0500\n@@ -258,7 +258,6 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_2011/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:56:19.755795939 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_291/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:36:41.493615239 -0500\n@@ -258,7 +258,7 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n+            return true;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_482/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:38:53.309924331 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 569, 
          "faulty": "JSType propType=constraintObj.getPropertyType(prop);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:05.351140506 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_174/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:35:20.537410718 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_174/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:35:20.537410718 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1831/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:54:16.579632379 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_843/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:43:09.218509214 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:52:11.763457517 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_2029/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:56:30.919812384 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1958/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:43.295743897 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 113, 
          "faulty": "if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_328/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:37:05.749674041 -0500\n@@ -110,9 +110,6 @@\n       return false;\n     }\n     for (String key : keySet) {\n-      if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {\n-        return false;\n-      }\n     }\n     return true;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_328/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:37:05.749674041 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_127/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:34:47.413322638 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_988/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:44:50.462739438 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:46:49.891001141 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/RecordType.java", 
          "line": 261, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:28:22.308466556 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_183/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/RecordType.java\t2018-12-02 07:35:25.853424593 -0500\n@@ -258,7 +258,7 @@\n           }\n         } else {\n           if (!propA.isSubtype(propB)) {\n-            return false;\n+            return true;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_183/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:35:25.857424603 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1729/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:53:07.847543537 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_7/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:33:19.877058366 -0500\n@@ -573,7 +573,6 @@\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                 .getLeastSupertype(propType);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1966/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:48.515751182 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Replace", 
          "seed": "return TRUE;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1377/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:49:08.999230089 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 576, 
          "faulty": "defineInferredProperty(prop,typeToInfer,null);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 573, 
          "faulty": "typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1979/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:55:57.467763810 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 568, 
          "faulty": "for (String prop : constraintObj.getOwnPropertyNames()) {\n  JSType propType=constraintObj.getPropertyType(prop);\n  if (!isPropertyTypeDeclared(prop)) {\n    JSType typeToInfer=propType;\n    if (!hasProperty(prop)) {\n      typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n    }\n    defineInferredProperty(prop,typeToInfer,null);\n  }\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 571, 
          "faulty": "JSType typeToInfer=propType;", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:28:24.268466511 -0500\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_2wm1/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-02 07:48:29.271173484 -0500\n@@ -565,17 +565,6 @@\n     // taking any each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n     }\n   }\n }\n\n\n"
    }
  ]
}