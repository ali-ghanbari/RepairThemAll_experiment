{
  "repair_end": "2018-12-02 12:08:20.594343", 
  "repair_begin": "2018-12-02 11:32:20.040840", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:06.204242520 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:06.204242520 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1004/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:06.208242682 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_714/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:22.135255515 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_714/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:22.135255515 -0500\n@@ -1430,7 +1430,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      Node block = new Node(Token.BLOCK);\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_714/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:22.139255675 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_714/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:22.139255675 -0500\n@@ -225,11 +225,8 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n         // Inlining the variable may have introduced new references\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_714/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:22.143255836 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1150/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:01.560945571 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -195,10 +194,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +984,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1150/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:01.560945571 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1150/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:01.564945735 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_665/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:45.457784075 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_665/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:45.457784075 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        String name = getString();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_665/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:45.461784234 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_665/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:45.461784234 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_665/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:45.465784394 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "String name=getString();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1869/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:44.977790122 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1869/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:44.981790295 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1869/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:06:44.981790295 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1869/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:44.985790468 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 226, 
          "faulty": "Node newNode=alias.node.cloneTree();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1054/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:46.585878899 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1054/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:46.585878899 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1054/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:46.589879061 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:00.928386144 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:00.928386144 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:00:00.932386312 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            Node block = new Node(Token.SCRIPT);\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:00.932386312 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1176/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:20.677732459 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1176/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:20.677732459 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1176/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:20.681732624 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1176/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:20.681732624 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:07.497189726 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:07.497189726 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:07.501189890 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:07.501189890 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:52.988941615 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:52.992941790 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:04:52.992941790 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:52.992941790 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:03.485024688 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -195,10 +194,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1154/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:03.485024688 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1977/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:09.613434795 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1977/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:09.617434968 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1977/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:09.617434968 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_645/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:30.449185965 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            int start = 0;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_645/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:30.449185965 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_645/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:30.453186125 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -225,7 +226,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_645/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:30.453186125 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1217/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:49.386917411 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1217/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:49.390917576 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1926/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:30.407748168 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tthis.type = Type.OTHER;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1926/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:30.411748340 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1926/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:30.415748511 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1926/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:30.415748511 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "this.type=Type.OTHER;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 226, 
          "faulty": "Node newNode=alias.node.cloneTree();", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_677/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:55.810198033 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            int start = 0;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_677/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:55.814198193 -0500\n@@ -1443,7 +1443,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_677/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:55.818198353 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -225,7 +226,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_677/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:55.818198353 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_718/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:25.331384351 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            int start = 0;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_718/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:25.335384513 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_718/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:25.335384513 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_835/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:54.559011435 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_835/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:54.563011590 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_835/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:54.567011746 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_835/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:54.567011746 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_938/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:15.114191295 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_938/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:15.114191295 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_938/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:15.118191455 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_938/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:15.118191455 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_667/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:46.573828647 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_667/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:46.573828647 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_667/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:46.577828808 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_667/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:46.577828808 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_883/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:34.044560757 -0500\n@@ -988,8 +988,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_883/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:34.048560915 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            StringBuilder s = new StringBuilder();\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_883/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:34.048560915 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1916/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:23.319442933 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +206,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1916/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:23.323443104 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1916/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:23.323443104 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1916/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:23.327443278 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:16.871113588 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -195,10 +194,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +984,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:16.875113753 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:16.875113753 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:00.054635668 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:00.054635668 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1672/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:00.058635841 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1523/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:50.628987900 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1523/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:50.632988076 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1523/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:50.632988076 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1950/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:48.380521689 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            int index = -1;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1950/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:48.380521689 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1950/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:48.384521861 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1950/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:48.384521861 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:07.702739184 -0500\n@@ -988,8 +988,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:07.702739184 -0500\n@@ -235,7 +235,8 @@\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\treturn true;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1079/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:07.706739349 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:20.897220808 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:20.897220808 -0500\n@@ -178,7 +178,7 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              int index = -1;\n             }\n           }\n         }\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:00:20.901220975 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:20.901220975 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:33.953365704 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:33.957365866 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:33.957365866 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:06.819638668 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:06.823638833 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:06.823638833 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 221, 
          "faulty": "Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_960/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:32.262877187 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_960/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:32.266877348 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_960/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:32.270877509 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_960/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:32.270877509 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_338/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:22.146876637 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_338/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:22.254881446 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1241/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:08.887724313 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1241/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:08.887724313 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1241/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:08.891724478 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1969/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:04.173200913 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1969/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:04.173200913 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1969/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:08:04.177201085 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1969/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:04.177201085 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1429/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:33.965767560 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1429/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:33.969767729 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1429/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:33.969767729 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_755/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:52.300475071 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_755/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:52.304475234 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_755/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:52.304475234 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1953/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:50.456611004 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +206,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1953/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:50.456611004 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1953/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:50.460611176 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1953/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:50.460611176 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_899/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:45.969032309 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_899/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:45.973032469 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n@@ -232,7 +232,8 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_899/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:45.973032469 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_899/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:45.977032626 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_197/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:20.465413470 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_197/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:20.465413470 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:01.936428254 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:01.940428422 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:01.940428422 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1914/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:22.347401067 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1914/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:22.351401241 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1914/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:22.355401413 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:54.614205816 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:06:54.618205988 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ADD\";\n       }\n       return null;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:54.618205988 -0500\n@@ -213,30 +213,7 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n+      int start = 0;\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:06:54.618205988 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:54.622206161 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_533/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:04.997833885 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_533/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:04.997833885 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_533/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:05.001834040 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -225,7 +226,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_533/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:05.001834040 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_489/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:31.272540645 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_489/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:31.276540797 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_489/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:31.280540948 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_489/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:31.280540948 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:23.936959604 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +987,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:23.940959767 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1027/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:23.940959767 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1966/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:02.217116807 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1966/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:08:02.221116979 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1966/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:02.221116979 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1966/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:08:02.225117151 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1966/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:02.225117151 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:26.680461845 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:26.684462012 -0500\n@@ -203,7 +203,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      StringBuilder builder = new StringBuilder();\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:26.684462012 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1456/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:55.618674290 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1456/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:55.618674290 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1456/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:55.622674457 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_810/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:33.694160552 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_810/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:33.698160716 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_810/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:33.698160716 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_810/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:33.702160879 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_255/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:07.915555421 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_255/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:45:07.919555600 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_255/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:45:07.919555600 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:41.358585678 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:41.358585678 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:41.362585843 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_200/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:44:22.685514071 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_200/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:22.685514071 -0500\n@@ -1414,7 +1414,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        PropListItem x = propListHead;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_200/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:22.689514252 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_200/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:22.689514252 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_200/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:22.693514433 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "PropListItem x=propListHead;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:56.756748106 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:56.756748106 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:56:56.760748271 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:56.760748271 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 226, 
          "faulty": "Node newNode=alias.node.cloneTree();", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_426/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:37.134203178 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_426/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:37.138203355 -0500\n@@ -232,9 +232,7 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n+        int index = -1;\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_426/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:37.138203355 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:15.569690806 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,12 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            {\n+\t\t\t\tif (refs == null) {\n+\t\t\t\t\trefs = Lists.newArrayList();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t}\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:15.573690978 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:08:15.573690978 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:15.577691150 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:40.667214330 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:40.671214491 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:40.671214491 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:40.675214651 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_922/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:04.193756004 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_922/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:04.197756164 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_922/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:04.197756164 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_922/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:04.201756323 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1479/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:14.259455655 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1479/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:14.263455824 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1479/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:01:14.263455824 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1479/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:14.267455991 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1280/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:39.300985692 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,7 +984,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1280/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:39.304985858 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1280/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:39.308986025 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_912/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:57.425486832 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_912/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:53:57.429486990 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_912/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:57.433487149 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -232,7 +233,8 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_912/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:57.433487149 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1137/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:52.884589041 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,7 +987,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1137/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:52.888589204 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:28.105061765 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:28.109061939 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:06:28.109061939 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1849/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:28.113062110 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_951/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:25.962624873 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_951/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:25.966625035 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_951/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:25.966625035 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_951/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:25.970625194 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_325/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:10.250346472 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_325/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:10.254346651 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_325/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:10.254346651 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:35.901848595 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:35.905848762 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:00:35.909848929 -0500\n@@ -181,7 +181,10 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          {\n+\t\t\t\tStringBuilder s = new StringBuilder();\n+\t\t\t\treturn \"RETURN\";\n+\t\t\t}\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:35.909848929 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 184, 
          "faulty": "return \"RETURN\";", 
          "type": "InsertBefore", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_967/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:37.511087647 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_967/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:37.515087807 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +223,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_967/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:37.515087807 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:28.434480123 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -987,9 +988,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tthis.type = Type.OTHER;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:05:28.434480123 -0500\n@@ -219,14 +219,7 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n+        StringBuilder builder = new StringBuilder();\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1778/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:28.438480297 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_747/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:46.896256009 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_747/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:46.900256172 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_747/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:46.900256172 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_747/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:46.904256333 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_697/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:11.098811363 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_697/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:11.098811363 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_697/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:11.102811524 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_697/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:11.102811524 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_176/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:44:01.404548055 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_176/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:01.408548238 -0500\n@@ -232,9 +232,7 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n+        StringBuilder builder = new StringBuilder();\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_176/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:01.408548238 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_366/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:45.303906592 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_366/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:45.307906769 -0500\n@@ -235,7 +235,8 @@\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n+        int start = 0;\n+\t\treturn true;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_366/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:45.307906769 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1595/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:54.927782457 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -208,7 +204,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +986,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1595/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:02:54.927782457 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1595/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:54.931782631 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:44.943195348 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:05:44.947195523 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:05:44.947195523 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1798/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:44.951195696 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_815/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:37.714324914 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_815/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:37.718325077 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_815/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:37.718325077 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1806/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:50.815449571 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tthis.type = Type.OTHER;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1806/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:05:50.819449744 -0500\n@@ -219,14 +219,7 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n+        StringBuilder builder = new StringBuilder();\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1806/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:50.819449744 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1514/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:43.152668062 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1514/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:43.152668062 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:36.176210370 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -987,9 +987,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:04:36.180210543 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:36.180210543 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1735/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:49.148774681 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1735/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:49.152774855 -0500\n@@ -203,7 +203,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      int start = 0;\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1735/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:49.152774855 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1332/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:59:18.942634608 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1332/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:18.946634777 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1332/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:18.950634943 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_854/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:11.731682856 -0500\n@@ -988,8 +988,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_854/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:11.735683013 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_278/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:45:29.164509499 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_278/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:45:29.164509499 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1290/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:46.497284642 -0500\n@@ -987,9 +987,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1290/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:46.497284642 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:47.892384080 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            int start = 0;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:47.896384245 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_770/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:03.680937160 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_770/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:03.684937323 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_770/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:03.688937485 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -232,7 +233,8 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_770/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:03.688937485 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_933/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:12.202075101 -0500\n@@ -988,7 +988,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_933/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:12.206075261 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            StringBuilder s = new StringBuilder();\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_933/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:12.210075420 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:11.187819588 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:11.191819753 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:11.191819753 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:23.099826452 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:23.099826452 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:01:23.103826618 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:23.103826618 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1706/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:27.611837475 -0500\n@@ -987,9 +987,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1706/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:27.615837648 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1706/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:27.615837648 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_786/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:14.457375657 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_786/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:14.461375820 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_786/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:14.461375820 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_786/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:14.465375983 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_977/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:43.703336282 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_977/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:43.703336282 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_977/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:43.707336442 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_977/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:43.707336442 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1467/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:03.651010897 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1467/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:03.655011065 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1467/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:03.655011065 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:35.871891122 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,7 +986,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:35.875891287 -0500\n@@ -213,30 +213,7 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n+      int start = 0;\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:56:35.879891450 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:35.879891450 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:51.751644749 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,7 +986,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:02:51.755644921 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:51.755644921 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_956/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:29.350760517 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_956/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:29.354760677 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_956/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:29.358760839 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_956/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:29.358760839 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1842/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:19.964710124 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1842/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:06:19.968710297 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1842/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:19.968710297 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_808/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:32.702120009 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_808/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:32.702120009 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_808/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:32.706120173 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_808/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:32.706120173 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_521/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:57.917560816 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            int start = 0;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_521/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:57.921560970 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_521/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:57.921560970 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -225,7 +226,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_521/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:57.925561124 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1294/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:49.637415146 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,7 +984,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1294/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:49.641415312 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1294/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:58:49.641415312 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1294/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:49.645415479 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_595/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:55.395799213 -0500\n@@ -1430,7 +1430,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      Node block = new Node(Token.BLOCK);\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_595/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:55.395799213 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_595/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:55.399799369 -0500\n@@ -225,7 +225,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_595/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:55.399799369 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:22.745817693 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:22.749817857 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:22.749817857 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1180/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:22.753818022 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_901/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:46.945070977 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_901/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:46.949071137 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_901/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:46.953071294 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_901/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:46.953071294 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:34.511283523 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:34.511283523 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:59:34.515283688 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:34.515283688 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1861/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:38.681518404 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1861/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:38.685518576 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 226, 
          "faulty": "Node newNode=alias.node.cloneTree();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1919/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:25.251526142 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1919/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:25.255526314 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1919/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:25.259526486 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1919/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:25.259526486 -0500\n@@ -474,7 +474,7 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n+        int start = 0;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1936/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:36.560013018 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1936/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:36.560013018 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1936/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:36.564013189 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1936/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:36.564013189 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 226, 
          "faulty": "Node newNode=alias.node.cloneTree();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1301/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:55.665665773 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1301/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:55.669665939 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1301/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:55.673666106 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_867/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:20.704035152 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_867/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:20.708035308 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_867/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:20.712035466 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_867/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:20.712035466 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_880/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:32.016480716 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_880/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:32.016480716 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_880/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:32.020480875 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_880/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:32.020480875 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1847/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:27.141020130 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +990,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1847/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:27.145020302 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1847/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:27.145020302 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_566/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:32.502901996 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_566/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:32.506902152 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_566/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:32.510902308 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_566/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:32.510902308 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_826/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:46.330677558 -0500\n@@ -987,8 +987,14 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n-            totalGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\ttotalGets--;\n+\t\t\t}\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_826/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:46.334677721 -0500\n@@ -1443,7 +1443,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_826/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:46.334677721 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -203,7 +204,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      int start = 0;\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_826/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:46.338677886 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "if (!mayBeStatementNoReturn(n)) {\n  return n.isReturn();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:35.471323559 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:35.475323727 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1314/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:05.866090127 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,7 +987,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1314/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:05.870090294 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +223,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1314/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:05.870090294 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:06.481678287 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:06.485678461 -0500\n@@ -1443,7 +1443,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:02:06.485678461 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:06.489678635 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1196/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:35.402339744 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,7 +987,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1196/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:35.406339910 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1196/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:35.406339910 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_553/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:21.554475485 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_553/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:21.558475640 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_553/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:21.558475640 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_553/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:21.562475795 -0500\n@@ -473,9 +473,7 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n+      int index = -1;\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:58.410360259 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:58.410360259 -0500\n@@ -178,7 +178,9 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\tint start = 0;\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +215,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1068/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:58.414360422 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1358/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:36.451364434 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,7 +987,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1358/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:36.455364602 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1358/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:59:36.455364602 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1358/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:36.455364602 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:23.746834777 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:23.750834943 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1340/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:23.750834943 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_503/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:42.164956220 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            this.type = Type.OTHER;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_503/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:42.164956220 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:50.354957429 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:50.358957594 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:50.362957760 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:50.362957760 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1021/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:20.052802328 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1021/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:20.056802489 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1021/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:20.060802652 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1141/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:54.824668727 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1141/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:54.828668892 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1141/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:54.828668892 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_687/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:02.634471514 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_687/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:02.638471675 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_687/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:02.638471675 -0500\n@@ -228,8 +228,6 @@\n           newNodes.add(newNode);\n         }\n \n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n         // Inlining the variable may have introduced new references\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_687/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:02.642471835 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:53.856628963 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:53.860629128 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:53.860629128 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1615/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:11.760521428 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1615/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:03:11.764521604 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1615/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:11.764521604 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_298/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:45:45.389236084 -0500\n@@ -224,8 +224,8 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          int index = -1;\n+\t\taliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_298/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:45:45.393236263 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:15.023978533 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,7 +987,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:15.027978698 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:58:15.031978865 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:15.031978865 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1499/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:30.920154582 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1499/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:30.924154751 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_860/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:15.731839798 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_860/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:15.735839954 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_860/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:15.735839954 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_611/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:08.136301513 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_611/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:08.140301670 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_611/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:08.144301830 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:37.781521103 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:37.785521265 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:37.789521428 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_540/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:10.774057248 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            this.type = Type.OTHER;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_540/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:10.778057403 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_540/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:10.778057403 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_540/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:10.782057558 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1202/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:39.426505885 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,7 +984,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1202/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:39.430506050 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_639/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:26.469027771 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_639/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:26.473027931 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_639/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:26.473027931 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_639/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:26.477028090 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1485/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:19.271665866 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1485/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:19.275666035 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1485/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:19.279666201 -0500\n@@ -224,8 +224,7 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1485/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:01:19.279666201 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1485/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:19.279666201 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:39.052021460 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:39.052021460 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:39.056021625 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1984/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:14.477643873 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +206,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1984/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:14.481644044 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1984/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:14.485644216 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_209/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:29.581826319 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_209/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:29.585826500 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:31.640667663 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:31.644667830 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_683/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:59.694353632 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_683/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:59.698353792 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_683/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:59.702353953 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_891/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:38.992756239 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_891/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:38.996756396 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_891/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:38.996756396 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_891/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:39.000756555 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:52.215678621 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,7 +986,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:52.219678781 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:52.219678781 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_986/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:52.223678943 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_281/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:45:31.112596825 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_281/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:45:31.112596825 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n@@ -232,10 +231,9 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n+        StringBuilder builder = new StringBuilder();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\treturn true;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_281/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:31.116597003 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_281/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:45:31.116597003 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:37.148252676 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:37.152252849 -0500\n@@ -224,7 +224,8 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n+          int start = 0;\n+\t\taliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1720/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:37.152252849 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_734/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:37.619880561 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_734/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:37.623880723 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_734/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:37.627880884 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_734/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:37.627880884 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_384/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:47:01.380620164 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_384/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:01.384620340 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_384/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:01.384620340 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_384/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:01.384620340 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_581/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:43.679339135 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -195,10 +194,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +982,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_581/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:43.683339291 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_581/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:43.687339448 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_581/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:43.687339448 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_793/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:20.657628344 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_793/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:20.661628507 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_793/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:20.661628507 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_793/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:20.665628671 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_88/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:42:42.240916754 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_88/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:42:42.244916938 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_88/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:42.244916938 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_88/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:42:42.244916938 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1716/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:35.216168583 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1716/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:04:35.216168583 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1716/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:35.220168756 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:41.107029220 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:05:41.111029395 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1793/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:41.111029395 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 221, 
          "faulty": "Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1670/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:58.962587977 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1670/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:03:58.966588151 -0500\n@@ -216,7 +216,8 @@\n       if (aliasRefs.isWellDefined()\n           && aliasRefs.firstReferenceIsAssigningDeclaration()\n           && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n+        StringBuilder builder = new StringBuilder();\n+\t\t// The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n         for (int i = 1; i < size; i++) {\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1670/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:58.966588151 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:58.763950491 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:02:58.767950667 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:58.767950667 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_609/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:07.164263119 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_609/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:07.164263119 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_609/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:07.168263277 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:21.028841839 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -195,10 +194,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +984,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:55:21.036842163 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:21.036842163 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:21.036842163 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:54.179115558 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,7 +984,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:54.179115558 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:54.183115723 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_738/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:40.804009350 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            int start = 0;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_738/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:40.804009350 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -225,7 +226,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_738/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:40.808009513 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_671/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:48.653911758 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_671/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:48.653911758 -0500\n@@ -228,10 +228,6 @@\n           newNodes.add(newNode);\n         }\n \n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_671/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:48.657911917 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_935/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:13.178114036 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_935/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:13.182114195 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_935/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:13.182114195 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_935/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:13.186114355 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1710/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:30.439960643 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1710/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:30.439960643 -0500\n@@ -210,33 +210,7 @@\n           new ReferenceCollectingCallback(compiler,\n               ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,\n               Predicates.<Var>equalTo(aliasVar));\n-      (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n-\n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1710/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:30.443960816 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 213, 
          "faulty": "(new NodeTraversal(compiler,collector)).traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:37.380425731 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:01:37.380425731 -0500\n@@ -181,7 +181,10 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          {\n+\t\t\t\tint c = 0;\n+\t\t\t\treturn \"RETURN\";\n+\t\t\t}\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:37.384425898 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 184, 
          "faulty": "return \"RETURN\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1828/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:08.144199215 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1828/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:06:08.148199388 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ADD\";\n       }\n       return null;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1828/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:08.148199388 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1828/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:06:08.152199561 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1828/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:08.152199561 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_422/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:34.206073724 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_422/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:34.210073901 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1190/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:30.842151563 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1190/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:30.842151563 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_822/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:43.386557007 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_822/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:43.390557171 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_822/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:43.394557335 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_631/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:21.584833894 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_631/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:21.588834053 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_631/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:21.592834212 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_631/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:21.592834212 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1536/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:01.145446003 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1536/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:02:01.149446177 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1536/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:01.149446177 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1957/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:53.484741262 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tint index = -1;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1957/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:53.488741434 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1957/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:53.488741434 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_524/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:59.961639569 -0500\n@@ -225,7 +225,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_524/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:59.961639569 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_753/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:51.332435815 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_753/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:51.336435976 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_753/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:51.336435976 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_709/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:18.999129187 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_709/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:18.999129187 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_917/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:00.353603225 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_917/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:54:00.353603225 -0500\n@@ -128,7 +128,10 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          {\n+\t\t\tint count = 0;\n+\t\t\treturn \"free_call\";\n+\t\t}\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_917/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:00.357603383 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_917/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:00.357603383 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_917/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:00.361603542 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_414/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:47:27.097759326 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_414/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:27.097759326 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1750/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:00.993289403 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1750/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:05:00.997289577 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1750/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:05:00.997289577 -0500\n@@ -235,7 +235,6 @@\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1750/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:01.001289752 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:38.470466407 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,7 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n+        int start = 0;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1200/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:38.474466573 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_397/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:13.341150306 -0500\n@@ -230,8 +230,6 @@\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_397/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:13.341150306 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:06.968638512 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:06.972638680 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:06.976638847 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1395/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:06.976638847 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_117/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:43:09.598179052 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_117/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:43:09.598179052 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n@@ -232,9 +231,7 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n+        StringBuilder builder = new StringBuilder();\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_117/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:09.602179236 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_117/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:43:09.602179236 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_762/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:58.396722472 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_762/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:58.400722635 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_762/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:58.400722635 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_703/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:14.970967064 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_703/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:14.974967224 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_703/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:14.974967224 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_703/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:14.974967224 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1891/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:03.486588372 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1891/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:03.490588545 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1891/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:03.490588545 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:48.950150486 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:03:48.954150661 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1659/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:48.954150661 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1193/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:33.206249109 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1193/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:33.210249274 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1193/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:33.210249274 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1193/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:33.214249438 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1119/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:40.020061148 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1119/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:40.024061311 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1119/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:56:40.024061311 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1119/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:40.028061475 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1336/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:20.854714269 -0500\n@@ -203,7 +203,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      StringBuilder builder = new StringBuilder();\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n@@ -232,9 +233,6 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1336/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:20.858714435 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1420/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:26.909472296 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1420/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:26.913472463 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1420/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:26.913472463 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_856/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:12.699720818 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_856/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:12.699720818 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_856/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:12.703720975 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_204/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:44:25.733652129 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_204/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:25.733652129 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_204/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:25.737652311 -0500\n@@ -232,9 +232,7 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n+        StringBuilder builder = new StringBuilder();\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_204/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:25.737652311 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_406/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:47:21.085493250 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_406/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:21.089493427 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_406/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:21.093493603 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_406/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:21.093493603 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_839/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:57.587129549 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_839/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:57.591129705 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_839/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:57.591129705 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_839/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:57.591129705 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_481/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:24.488282878 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_481/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:24.488282878 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_481/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:24.492283030 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_481/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:24.492283030 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1676/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:02.946761944 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1676/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:02.946761944 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1676/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:04:02.950762117 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1676/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:02.950762117 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1285/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:42.381113625 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1285/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:58:42.385113792 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return new NodeMismatch(this, node2);\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1285/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:42.389113958 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1285/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:42.389113958 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return new NodeMismatch(this,node2);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1334/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:19.906674771 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1334/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:19.910674937 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1334/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:19.910674937 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1974/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:07.377338668 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -987,9 +987,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tthis.type = Type.OTHER;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1974/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:07.381338840 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1974/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:07.381338840 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:17.100586363 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:06:17.100586363 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:17.104586535 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1838/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:17.104586535 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1465/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:02.674969986 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1465/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:02.674969986 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1465/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:02.678970156 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_694/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:09.142732763 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_694/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:09.146732924 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_694/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:09.146732924 -0500\n@@ -224,7 +224,7 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n+          int index = -1;\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_694/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:09.150733085 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1128/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:46.916344023 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1128/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:46.920344188 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1128/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:46.924344351 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1283/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:41.257066935 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -989,7 +988,9 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            if (refs == null) {\n+\t\t\t\trefs = Lists.newArrayList();\n+\t\t\t}\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1283/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:41.257066935 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1283/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:41.261067101 -0500\n@@ -474,7 +474,7 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n+        int index = -1;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1981/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:12.525559971 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1981/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:08:12.529560143 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ADD\";\n       }\n       return null;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1981/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:12.529560143 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1981/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:08:12.533560314 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1981/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:12.533560314 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_476/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:21.548162977 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_476/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:21.552163153 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_476/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:21.556163328 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_476/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:21.556163328 -0500\n@@ -473,9 +473,7 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n+      int index = -1;\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1743/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:54.905024889 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +990,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1743/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:54.909025063 -0500\n@@ -219,14 +219,7 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n+        StringBuilder builder = new StringBuilder();\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1743/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:54.909025063 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_781/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:10.577217670 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_781/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:10.577217670 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_781/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:10.581217832 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1690/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:13.823236520 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1690/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:13.823236520 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1690/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:13.827236693 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_641/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:27.425065753 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_641/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:27.545070522 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_776/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:07.653098684 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_776/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:07.657098848 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_776/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:07.657098848 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1800/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:46.019241940 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +990,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1800/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:46.023242113 -0500\n@@ -473,9 +473,6 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_705/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:15.951006493 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_705/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:15.951006493 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_705/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:15.955006655 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_705/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:15.955006655 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_974/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:41.639253366 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_974/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:41.639253366 -0500\n@@ -216,7 +216,8 @@\n       if (aliasRefs.isWellDefined()\n           && aliasRefs.firstReferenceIsAssigningDeclaration()\n           && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n+        int index = -1;\n+\t\t// The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n         for (int i = 1; i < size; i++) {\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_974/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:41.643253527 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_499/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:39.244844605 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_499/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:39.248844758 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_499/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:39.252844911 -0500\n@@ -473,9 +473,7 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n+      int index = -1;\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:21.765777299 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:21.769777463 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:21.773777629 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:21.773777629 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_954/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:28.366721112 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +223,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_954/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:28.370721270 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:41.776048686 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:41.780048847 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:41.780048847 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_740/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:41.784049008 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1009/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:10.072398735 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1009/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:10.076398896 -0500\n@@ -232,9 +232,6 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1009/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:10.076398896 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1865/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:41.561642708 -0500\n@@ -987,9 +987,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tthis.type = Type.OTHER;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1865/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:41.561642708 -0500\n@@ -219,14 +219,7 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n+        StringBuilder builder = new StringBuilder();\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1865/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:41.565642880 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "this.type=Type.OTHER;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 226, 
          "faulty": "Node newNode=alias.node.cloneTree();", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1683/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:07.750971626 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1683/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:07.754971801 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_711/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:20.159175905 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_711/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:20.163176067 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"PARAM_LIST\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_711/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:20.163176067 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_711/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:20.167176227 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_711/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:20.167176227 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_215/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:34.950069120 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_215/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:34.950069120 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_627/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:18.648717479 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_627/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:18.652717638 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_627/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:18.652717638 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_627/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:18.656717796 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_743/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:43.980137903 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_743/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:43.980137903 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_743/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:43.984138066 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1534/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:00.169403504 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1534/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:02:00.173403678 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1534/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:00.173403678 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_564/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:31.530864059 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_564/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:31.530864059 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_564/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:31.534864215 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_564/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:31.534864215 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_647/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:31.409224149 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_647/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:31.409224149 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_647/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:31.413224309 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1321/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:09.970260960 -0500\n@@ -196,7 +196,7 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n+        int index = -1;\n       }\n \n       Node current;\n@@ -988,8 +988,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1321/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:09.974261127 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1321/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:09.974261127 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_601/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:00.255990585 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_601/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:00.259990743 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_601/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:00.259990743 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_601/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:00.263990901 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1209/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:43.294665651 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1209/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:43.298665816 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1209/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:43.298665816 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:44.149940585 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:03:44.149940585 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:44.153940760 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_963/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:34.470965704 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_963/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:34.474965865 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -232,7 +233,8 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_963/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:34.474965865 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_774/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:06.685059309 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_774/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:06.689059472 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_774/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:06.689059472 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1404/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:14.024933448 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1404/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:14.028933615 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1404/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:14.028933615 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_491/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:32.240577493 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_491/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:32.240577493 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1988/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:16.541732581 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            int index = -1;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1988/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:08:16.545732753 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1988/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:08:16.549732925 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1988/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:16.549732925 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1077/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:06.574693155 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1077/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:06.578693318 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:57.442320817 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +987,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:57.446320979 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:55.656165941 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:59:55.660166106 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            Node block = new Node(Token.SCRIPT);\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:55.664166274 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_651/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:34.453345293 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_651/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:34.457345451 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_651/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:34.457345451 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_651/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:34.461345611 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:11.333347599 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:11.337347764 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:11.337347764 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:11.341347928 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_292/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:40.645023790 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_292/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:45:40.645023790 -0500\n@@ -216,7 +216,8 @@\n       if (aliasRefs.isWellDefined()\n           && aliasRefs.firstReferenceIsAssigningDeclaration()\n           && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n+        StringBuilder builder = new StringBuilder();\n+\t\t// The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n         for (int i = 1; i < size; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_292/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:45:40.649023969 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:24.357073960 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +990,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:03:24.357073960 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:24.361074134 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_730/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:34.551756544 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_730/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:34.555756707 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_730/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:34.555756707 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_730/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:34.559756869 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:49.652945362 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:49.652945362 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:49.656945536 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_699/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:12.074850596 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_699/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:12.078850757 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_699/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:12.082850917 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_699/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:12.082850917 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_459/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:05.747466536 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_459/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:05.747466536 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            StringBuilder s = new StringBuilder();\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_459/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:05.751466711 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_459/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:05.751466711 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:04.453064500 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +987,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:04.457064665 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:04.457064665 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_619/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:12.164460745 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_619/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:12.168460905 -0500\n@@ -230,8 +230,6 @@\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_619/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:12.168460905 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_529/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:03.025757748 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_529/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:03.029757901 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,8 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_529/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:03.033758057 -0500\n@@ -474,7 +474,7 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n+        return false;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1811/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:55.107635327 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +206,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1811/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:05:55.111635499 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1811/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:55.111635499 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_970/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:39.403163582 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_970/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:39.407163743 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_970/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:39.407163743 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_654/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:36.553428928 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_654/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:36.557429086 -0500\n@@ -235,7 +235,8 @@\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n+        int start = 0;\n+\t\treturn true;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_654/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:36.557429086 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:20.523528636 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:20.523528636 -0500\n@@ -216,7 +216,8 @@\n       if (aliasRefs.isWellDefined()\n           && aliasRefs.firstReferenceIsAssigningDeclaration()\n           && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n+        int start = 0;\n+\t\t// The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n         for (int i = 1; i < size; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:20.527528809 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1554/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:17.818171405 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1554/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:17.818171405 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1554/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:02:17.822171578 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1554/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:17.822171578 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_531/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:04.009795731 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_531/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:04.013795886 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_531/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:04.017796040 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_531/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:04.017796040 -0500\n@@ -473,9 +473,7 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n+      int index = -1;\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_806/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:31.582074245 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_806/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:31.582074245 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_806/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:31.586074408 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:29.811642902 -0500\n@@ -177,7 +177,8 @@\n    * @param newNodes New nodes to check.\n    */\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n-    NodeTraversal t = new NodeTraversal(compiler,\n+    int start = 0;\n+\tNodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n     t.traverseAtScope(scope);\n   }\n@@ -196,7 +197,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:29.815643065 -0500\n@@ -232,9 +232,6 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:29.815643065 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 180, 
          "faulty": "NodeTraversal t=new NodeTraversal(compiler,new BuildGlobalNamespace(new NodeFilter(newNodes)));", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_544/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:13.814175015 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            int start = 0;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_544/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:13.818175171 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_544/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:13.822175326 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_544/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:13.822175326 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:59.931844048 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:05:59.935844220 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:59.935844220 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_240/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:57.099068600 -0500\n@@ -220,11 +220,9 @@\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n         for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n+          final String PARAM_NAME = \"jscomp_throw_param\";\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_240/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:57.099068600 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_240/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:57.103068781 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_615/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:10.220383873 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_615/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:10.224384031 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_615/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:10.224384031 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_615/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:10.228384188 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:02.560117348 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:03:02.564117524 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:02.564117524 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:26.923524680 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:26.927524846 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:08:06.401296708 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            int index = -1;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:08:06.401296708 -0500\n@@ -1443,7 +1443,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:08:06.405296880 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:08:06.405296880 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_887/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:35.992637683 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_887/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:35.992637683 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_885/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:35.016599135 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_885/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:35.020599294 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_885/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:35.020599294 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_885/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:35.024599452 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_374/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:46:52.192212475 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_374/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:52.192212475 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_374/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:52.196212651 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1424/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:29.961599996 -0500\n@@ -988,7 +988,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1424/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:29.965600163 -0500\n@@ -224,7 +224,7 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n+          int index = -1;\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1424/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:29.965600163 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1085/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:12.886950825 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1085/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:12.890950988 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1085/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:12.890950988 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1733/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:48.052727027 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1733/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:48.056727201 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1733/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:48.060727374 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 226, 
          "faulty": "Node newNode=alias.node.cloneTree();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:03.803513791 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:03.807513955 -0500\n@@ -203,7 +203,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      StringBuilder builder = new StringBuilder();\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:03.811514122 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1458/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:56.622716359 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1458/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:56.626716526 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1458/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:56.626716526 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1458/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:56.630716693 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_613/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:09.112340077 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            this.type = Type.OTHER;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_613/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:09.116340236 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_613/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:09.116340236 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_613/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:09.120340394 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "this.type=Type.OTHER;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_669/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:47.549867639 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_669/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:47.553867800 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_669/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:47.553867800 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_669/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:47.557867960 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:42.322625497 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:42.326625662 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:42.326625662 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:42.330625829 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_248/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:03.091338397 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_248/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:45:03.091338397 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1908/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:17.187178788 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,7 +986,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tthis.type = Type.OTHER;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1908/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:17.187178788 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1908/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:17.191178962 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:53.394581109 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:53.398581277 -0500\n@@ -178,7 +178,7 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              StringBuilder builder = new StringBuilder();\n             }\n           }\n         }\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:53.402581444 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1347/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:29.659081205 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1347/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:29.663081371 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1347/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:29.663081371 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1931/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:33.507881635 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +206,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1931/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:33.507881635 -0500\n@@ -219,17 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n         // Inlining the variable may have introduced new references\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1931/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:33.511881807 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1825/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:06.196114980 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -987,9 +987,12 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tthis.type = Type.OTHER;\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1825/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:06.200115153 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1825/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:06.200115153 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:31.081249183 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:31.085249346 -0500\n@@ -178,7 +178,9 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\tint start = 0;\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +226,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:31.085249346 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:13.884552800 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:13.888552963 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:13.888552963 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:56.243200933 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:56.243200933 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:57:56.247201098 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1227/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:56.247201098 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1399/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:09.848758880 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1399/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:09.852759047 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_621/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:13.404509805 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_621/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:13.404509805 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_621/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:13.408509964 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:30.700628651 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:30.700628651 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:30.704628817 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_228/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:44:47.090617413 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_228/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:47.094617593 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n@@ -232,9 +231,7 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n+        StringBuilder builder = new StringBuilder();\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_228/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:47.098617774 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_574/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:37.487096726 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_574/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:37.487096726 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_574/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:37.491096883 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:18.025100698 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +990,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:18.029100865 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1305/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:58.961802861 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1305/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:58.961802861 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1305/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:58.965803027 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_571/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:35.563021513 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_571/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:35.563021513 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_571/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:35.567021669 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_571/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:35.567021669 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_450/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:47:58.863162837 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_450/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:58.895164250 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_450/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:58.899164426 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -225,7 +226,6 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_450/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:58.899164426 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_121/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:43:12.370306498 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_121/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:43:12.374306682 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_341/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:24.158966233 -0500\n@@ -232,9 +232,7 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n+        int index = -1;\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_341/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:24.162966409 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:37.388906290 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:37.392906457 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:37.392906457 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_663/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:44.453743986 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_663/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:44.453743986 -0500\n@@ -230,8 +230,6 @@\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_663/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:44.457744146 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:21.240236214 -0500\n@@ -988,7 +988,7 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n+            ;\n             break;\n           case CALL_GET:\n             callGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:21.240236214 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:01.783291677 -0500\n@@ -1443,7 +1443,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:01.787291855 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:01.791292030 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:01.791292030 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:58:00.055358657 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -989,7 +988,9 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            if (refs == null) {\n+\t\t\t\trefs = Lists.newArrayList();\n+\t\t\t}\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:00.059358822 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +223,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:00.063358988 -0500\n@@ -474,7 +474,7 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n+        int index = -1;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_750/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:49.256351647 -0500\n@@ -1443,7 +1443,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_750/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:49.260351810 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,7 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n+      return false;\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_750/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:49.264351971 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:51.671999581 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:51.675999748 -0500\n@@ -224,7 +224,7 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n+          int index = -1;\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:51.675999748 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_944/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:19.894382206 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_944/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:19.898382366 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_944/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:19.902382525 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_944/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:19.902382525 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:16.054514309 -0500\n@@ -987,7 +987,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:16.054514309 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:59:16.058514475 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:16.058514475 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1212/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:45.530758040 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1212/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:45.538758369 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1212/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:45.538758369 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:59.816339692 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:59.820339858 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:59.820339858 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1152/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:02.528985373 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1152/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:02.528985373 -0500\n@@ -474,7 +474,7 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n+        int index = -1;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_862/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:16.719878592 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_862/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:16.723878750 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n@@ -232,7 +232,8 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_862/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:16.723878750 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_862/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:16.727878907 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_584/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:45.615415035 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_584/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:45.619415191 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1511/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:41.248588118 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1511/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:01:41.248588118 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1511/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:41.252588286 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1678/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:03.898803503 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1678/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:03.902803678 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_994/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:58.155917883 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_994/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:58.159918043 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_994/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:58.159918043 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_766/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:01.300840434 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,7 +986,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_766/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:01.304840596 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_766/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:01.304840596 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_519/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:48:56.937523081 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_519/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:56.941523235 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_633/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:22.568872933 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_633/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:22.568872933 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_633/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:22.572873092 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_633/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:22.572873092 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:42.948181223 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:42.952181388 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:56:42.952181388 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1123/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:42.956181550 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_990/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:55.115795394 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_990/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:55.119795556 -0500\n@@ -178,7 +178,6 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +212,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_990/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:55.123795716 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_990/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:55.123795716 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1900/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:10.270880783 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1900/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:10.274880957 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1900/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:10.274880957 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1900/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:10.274880957 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_133/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:43:21.942745958 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_635/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:23.568912619 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_635/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:23.568912619 -0500\n@@ -1430,7 +1430,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      Node block = new Node(Token.BLOCK);\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_635/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:23.572912778 -0500\n@@ -224,8 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_635/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:23.572912778 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_635/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:23.572912778 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1433, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_152/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:43:38.971525429 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_152/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:43:38.971525429 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n@@ -232,9 +232,6 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_152/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:38.975525611 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_152/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:43:38.975525611 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1815/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:58.003760635 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1815/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:05:58.007760810 -0500\n@@ -1414,7 +1414,9 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1815/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:05:58.007760810 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1815/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:58.011760983 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:20.544906827 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,7 +986,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:03:20.548907003 -0500\n@@ -203,7 +203,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      int start = 0;\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:20.548907003 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_363/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:43.391821645 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_363/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:43.391821645 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -235,7 +236,6 @@\n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n         namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_363/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:43.395821823 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:54.518628201 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:54.522628367 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:54.522628367 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:00:54.526628536 -0500\n@@ -181,7 +181,10 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          {\n+\t\t\t\tint c = 0;\n+\t\t\t\treturn \"RETURN\";\n+\t\t\t}\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:54.526628536 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 184, 
          "faulty": "return \"RETURN\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_129/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:43:19.090615120 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_129/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:19.094615304 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_129/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:43:19.094615304 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_929/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:09.061949903 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -195,10 +194,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +984,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_929/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:54:09.069950223 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_929/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:09.073950381 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_929/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:09.073950381 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1654/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:45.097982049 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1654/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:45.097982049 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:00:51.454499836 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,14 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n-            totalGets--;\n-            break;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n+            if (refs == null) {\n+\t\t\t\trefs = Lists.newArrayList();\n+\t\t\t}\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:00:51.454499836 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:00:51.458500003 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 223, 
          "faulty": "ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Replace", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_434/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:47:44.726538688 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_434/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:44.730538864 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,8 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_434/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:44.730538864 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_434/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:44.734539041 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_440/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:47:49.710758830 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_440/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:49.714759005 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_440/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:49.718759182 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_440/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:49.718759182 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1788/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:05:37.102855772 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1788/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:05:37.102855772 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1788/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:05:37.106855946 -0500\n@@ -219,14 +219,7 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n+        StringBuilder builder = new StringBuilder();\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1788/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:05:37.106855946 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_408/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:47:22.085537518 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_408/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:47:22.089537694 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_408/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:47:22.089537694 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1928/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:31.531796562 -0500\n@@ -179,7 +179,7 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n+    final String PARAM_NAME = \"jscomp_throw_param\";\n   }\n \n   /**\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1928/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:07:31.535796734 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ADD\";\n       }\n       return null;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1928/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:31.535796734 -0500\n@@ -213,30 +213,7 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n+      int start = 0;\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1928/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:31.539796907 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1928/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:31.539796907 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_252/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:45:05.971467983 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_252/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:45:05.975468162 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n@@ -232,9 +231,7 @@\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n \n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n+        StringBuilder builder = new StringBuilder();\n         return true;\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_252/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:05.975468162 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_252/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:45:05.979468341 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_820/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:42.394516400 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_820/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:42.398516563 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_820/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:42.402516727 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_820/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:42.402516727 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_178/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:02.364591718 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_178/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:02.368591901 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_178/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:02.368591901 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_478/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:48:22.520205568 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            this.type = Type.OTHER;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_478/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:48:22.524205742 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:42.552270914 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -987,9 +986,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:07:42.552270914 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ADD\";\n       }\n       return null;\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:42.556271086 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:42.556271086 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:42.560271258 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1895/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:06.466716832 -0500\n@@ -208,7 +208,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +990,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1895/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:06.470717003 -0500\n@@ -219,14 +219,7 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n+        StringBuilder builder = new StringBuilder();\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1895/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:06.470717003 -0500\n@@ -181,7 +181,10 @@\n   public static String name(int token) {\n         switch (token) {\n           case ERROR:           return \"ERROR\";\n-          case RETURN:          return \"RETURN\";\n+          case RETURN:          {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"RETURN\";\n+\t\t\t}\n           case BITOR:           return \"BITOR\";\n           case BITXOR:          return \"BITXOR\";\n           case BITAND:          return \"BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1895/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:06.474717177 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 184, 
          "faulty": "return \"RETURN\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_318/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:46:04.338082718 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_318/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:04.338082718 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -224,7 +225,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_318/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:04.342082896 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_318/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:04.342082896 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_876/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:28.828354992 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_876/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:28.832355150 -0500\n@@ -230,7 +230,7 @@\n \n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n \n         // Inlining the variable may have introduced new references\n         // to descendants of {@code name}. So those need to be collected now.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_876/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:28.832355150 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 233, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_797/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:23.537745818 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,7 +983,10 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_797/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:23.537745818 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1874/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:06:48.821955976 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -196,7 +195,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +206,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1874/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:06:48.821955976 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1874/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:06:48.825956148 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1874/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:06:48.825956148 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_235/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:52.834876457 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -212,7 +213,8 @@\n               Predicates.<Var>equalTo(aliasVar));\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n-      ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n+      final String PARAM_NAME = \"jscomp_throw_param\";\n+\tReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n       if (aliasRefs.isWellDefined()\n           && aliasRefs.firstReferenceIsAssigningDeclaration()\n           && aliasRefs.isAssignedOnceInLifetime()) {\n@@ -224,7 +226,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_235/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:52.838876636 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_235/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:44:52.838876636 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 215, 
          "faulty": "ReferenceCollection aliasRefs=collector.getReferences(aliasVar);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_526/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:00.937677197 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_526/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:49:00.941677351 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_526/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:00.941677351 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_526/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:00.945677505 -0500\n@@ -473,9 +473,7 @@\n \n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n-      if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n-      }\n+      int index = -1;\n       return false;\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 476, 
          "faulty": "if (size > 0 && references.get(0).isInitializingDeclaration()) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_725/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:31.627638426 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_725/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:31.627638426 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_725/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:31.631638587 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:01:58.141315187 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:01:58.145315361 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:17.835152986 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:56:17.839153150 -0500\n@@ -224,7 +224,6 @@\n               aliasRefs.references.get(i);\n \n           Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n           newNodes.add(newNode);\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:56:17.839153150 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:17.843153313 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_915/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:53:59.349563304 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_915/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:53:59.353563463 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_915/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:53:59.353563463 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_915/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:53:59.357563621 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1316/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:06.838130583 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1316/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:06.846130915 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1316/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:06.846130915 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:20.706296958 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:02:20.706296958 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:20.710297132 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "return new DefaultCodingConvention();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_924/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:54:05.173795020 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_924/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:54:05.173795020 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_924/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:54:05.177795179 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_997/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:55:00.123997218 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -988,8 +984,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_997/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:00.123997218 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_997/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:55:00.127997379 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_997/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:55:00.131997541 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_997/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:55:00.131997541 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_617/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:11.192422303 -0500\n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            this.type = Type.OTHER;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_617/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:11.196422462 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_617/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:11.196422462 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "this.type=Type.OTHER;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1365/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:42.471615580 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1365/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:42.475615748 -0500\n@@ -225,7 +225,7 @@\n \n           Node newNode = alias.node.cloneTree();\n           aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n+          return false;\n         }\n \n         // just set the original alias to null.\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1365/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:42.475615748 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1134/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:56:50.928508715 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1134/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:56:50.932508879 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1134/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:56:50.932508879 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_569/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:49:34.582983222 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_569/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:49:34.586983378 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1185/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:26.705980960 -0500\n@@ -179,7 +179,6 @@\n   void scanNewNodes(Scope scope, Set<Node> newNodes) {\n     NodeTraversal t = new NodeTraversal(compiler,\n         new BuildGlobalNamespace(new NodeFilter(newNodes)));\n-    t.traverseAtScope(scope);\n   }\n \n   /**\n@@ -195,10 +194,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +984,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:31:52.420087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1185/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:57:26.709981126 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        int lineno = getLineno();\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1185/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:57:26.713981290 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1185/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:26.713981290 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 182, 
          "faulty": "t.traverseAtScope(scope);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 232, 
          "faulty": "aliasParent.replaceChild(alias.node,IR.nullNode());", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 237, 
          "faulty": "namespace.scanNewNodes(alias.scope,newNodes);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "int lineno=getLineno();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1563/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:02:24.522462809 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +989,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1563/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:02:24.526462983 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1934/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:35.579970833 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -989,7 +988,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1934/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:35.583971005 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1934/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:35.583971005 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1309/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:01.881924340 -0500\n@@ -196,7 +196,7 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n+        int index = -1;\n       }\n \n       Node current;\n@@ -988,8 +988,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1309/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:01.881924340 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1309/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:59:01.885924506 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1309/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:01.885924506 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:58:27.624501011 -0500\n@@ -203,7 +203,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      StringBuilder builder = new StringBuilder();\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n@@ -213,30 +214,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:58:27.628501176 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 220, 
          "faulty": "int size=aliasRefs.references.size();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1726/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:04:42.188471982 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -208,7 +207,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -987,9 +987,9 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            ;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1726/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:04:42.192472156 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1726/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:04:42.192472156 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1172/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:57:17.357595667 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1172/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:57:17.361595832 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (refs == null) {\n  refs=Lists.newArrayList();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_768/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:02.700897326 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,15 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n-            totalGets--;\n-            break;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\ttotalGets--;\n+\t\t\t}\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_768/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:02.704897488 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_768/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:02.704897488 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_768/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:02.708897651 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_728/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:51:33.575717110 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_728/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:51:33.579717271 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_728/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:33.579717271 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_728/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:51:33.579717271 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "InsertBefore", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_244/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:44:59.979198306 -0500\n@@ -987,7 +987,7 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n+            StringBuilder builder = new StringBuilder();\n             totalGets--;\n             break;\n           case CALL_GET:\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_244/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:44:59.983198487 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:03:14.640647831 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -208,7 +204,8 @@\n         }\n       }\n \n-      return current.isName() && newNodes.contains(current);\n+      int start = 0;\n+\treturn current.isName() && newNodes.contains(current);\n     }\n   }\n \n@@ -989,7 +986,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:03:14.644648007 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:03:14.648648183 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 211, 
          "faulty": "return current.isName() && newNodes.contains(current);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:32.579202955 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:32.579202955 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:32.583203120 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 228, 
          "faulty": "newNodes.add(newNode);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_779/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:52:09.597177784 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -987,9 +983,15 @@\n             totalGets--;\n             break;\n           case ALIASING_GET:\n-            aliasingGets--;\n-            totalGets--;\n-            break;\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\taliasingGets--;\n+\t\t\t}\n+            {\n+\t\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\t\ttotalGets--;\n+\t\t\t}\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_779/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:09.597177784 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_779/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:52:09.601177947 -0500\n@@ -178,7 +178,8 @@\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n             // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tname.removeRef(ref);\n             }\n           }\n         }\n@@ -203,7 +204,8 @@\n     // be in a VAR assignment.\n     Node aliasParent = alias.node.getParent();\n     if (aliasParent.isName()) {\n-      // Ensure that the local variable is well defined and never reassigned.\n+      int start = 0;\n+\t// Ensure that the local variable is well defined and never reassigned.\n       Scope scope = alias.scope;\n       Var aliasVar = scope.getVar(aliasParent.getString());\n       ReferenceCollectingCallback collector =\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_779/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:52:09.601177947 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 181, 
          "faulty": "name.removeRef(ref);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 990, 
          "faulty": "aliasingGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 207, 
          "faulty": "Scope scope=alias.scope;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_361/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:46:42.439779342 -0500\n@@ -219,15 +219,6 @@\n         // The alias is well-formed, so do the inlining now.\n         int size = aliasRefs.references.size();\n         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n         // just set the original alias to null.\n         aliasParent.replaceChild(alias.node, IR.nullNode());\n         compiler.reportCodeChange();\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_361/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:46:42.439779342 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_679/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:50:56.798237599 -0500\n@@ -195,10 +195,6 @@\n \n     @Override\n     public boolean apply(Node n) {\n-      if (!n.isQualifiedName()) {\n-        return false;\n-      }\n-\n       Node current;\n       for (current = n;\n            current.isGetProp();\n@@ -989,7 +985,7 @@\n           case ALIASING_GET:\n             aliasingGets--;\n             totalGets--;\n-            break;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_679/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:56.798237599 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_679/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:50:56.802237759 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_679/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:50:56.802237759 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 198, 
          "faulty": "if (!n.isQualifiedName()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 238, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1318/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:59:08.054181198 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,8 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            ;\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1318/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:59:08.054181198 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1318/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:59:08.058181365 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 227, 
          "faulty": "aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 05:31:52.392087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1921/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/GlobalNamespace.java\t2018-12-02 06:07:26.219567830 -0500\n@@ -196,7 +196,6 @@\n     @Override\n     public boolean apply(Node n) {\n       if (!n.isQualifiedName()) {\n-        return false;\n       }\n \n       Node current;\n@@ -988,8 +987,11 @@\n             break;\n           case ALIASING_GET:\n             aliasingGets--;\n-            totalGets--;\n-            break;\n+            {\n+\t\t\t\tint start = 0;\n+\t\t\t\ttotalGets--;\n+\t\t\t}\n+            ;\n           case CALL_GET:\n             callGets--;\n             totalGets--;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 05:31:55.312087382 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1921/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2018-12-02 06:07:26.223568002 -0500\n@@ -213,30 +213,6 @@\n       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);\n \n       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);\n-      if (aliasRefs.isWellDefined()\n-          && aliasRefs.firstReferenceIsAssigningDeclaration()\n-          && aliasRefs.isAssignedOnceInLifetime()) {\n-        // The alias is well-formed, so do the inlining now.\n-        int size = aliasRefs.references.size();\n-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);\n-        for (int i = 1; i < size; i++) {\n-          ReferenceCollectingCallback.Reference aliasRef =\n-              aliasRefs.references.get(i);\n-\n-          Node newNode = alias.node.cloneTree();\n-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);\n-          newNodes.add(newNode);\n-        }\n-\n-        // just set the original alias to null.\n-        aliasParent.replaceChild(alias.node, IR.nullNode());\n-        compiler.reportCodeChange();\n-\n-        // Inlining the variable may have introduced new references\n-        // to descendants of {@code name}. So those need to be collected now.\n-        namespace.scanNewNodes(alias.scope, newNodes);\n-        return true;\n-      }\n     }\n \n     return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:31:52.424087483 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1921/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/rhino/Token.java\t2018-12-02 06:07:26.223568002 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_1921/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 06:07:26.223568002 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 216, 
          "faulty": "if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {\n  int size=aliasRefs.references.size();\n  Set<Node> newNodes=Sets.newHashSetWithExpectedSize(size - 1);\n  for (int i=1; i < size; i++) {\n    ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n    Node newNode=alias.node.cloneTree();\n    aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n    newNodes.add(newNode);\n  }\n  aliasParent.replaceChild(alias.node,IR.nullNode());\n  compiler.reportCodeChange();\n  namespace.scanNewNodes(alias.scope,newNodes);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 199, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 992, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseProperties.java", 
          "line": 222, 
          "faulty": "for (int i=1; i < size; i++) {\n  ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);\n  Node newNode=alias.node.cloneTree();\n  aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);\n  newNodes.add(newNode);\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/GlobalNamespace.java", 
          "line": 991, 
          "faulty": "totalGets--;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:31:52.404087484 -0500\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_ci9x/Patch_5/patched/tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\t2018-12-02 05:41:20.569090853 -0500\n@@ -474,7 +474,6 @@\n     boolean firstReferenceIsAssigningDeclaration() {\n       int size = references.size();\n       if (size > 0 && references.get(0).isInitializingDeclaration()) {\n-        return true;\n       }\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java", 
          "line": 477, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }
  ]
}