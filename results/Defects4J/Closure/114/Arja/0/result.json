{
  "repair_end": "2018-12-01 15:28:28.307047", 
  "repair_begin": "2018-12-01 15:01:40.171912", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1480/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:15.061415055 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1480/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:25:15.065415065 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1468/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:07.113394036 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1468/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:25:07.117394046 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1303/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:09.629113131 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1303/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:23:09.629113131 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1430, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1321/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:21.225137981 -0500\n@@ -1427,11 +1427,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ADD\";\n       }\n       return null;\n   }\n@@ -1456,7 +1452,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1570/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:18.461471573 -0500\n@@ -1443,7 +1443,10 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1456,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1430, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toString(true,true,true);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1315/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:17.569130068 -0500\n@@ -1427,11 +1427,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toString(true, true, true);\n       }\n       return null;\n   }\n@@ -1456,7 +1452,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1277/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:51.313075404 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1277/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:22:51.313075404 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1591/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:33.009473585 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1591/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:26:33.009473585 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1601/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:39.497475264 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1601/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:26:39.497475264 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1500/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:29.293453220 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1500/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:25:29.297453231 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1730/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:11.461543837 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1730/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:28:11.461543837 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "Replace", 
          "seed": "if (!isEquivalentTo(node2,false,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1532/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:51.593474622 -0500\n@@ -1443,7 +1443,9 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      if (!isEquivalentTo(node2, false, false, false)) {\n+\t\treturn new NodeMismatch(this, node2);\n+\t}\n     }\n \n     NodeMismatch res = null;\n@@ -1456,7 +1458,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1430, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1265/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:43.349059611 -0500\n@@ -1427,11 +1427,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n@@ -1456,7 +1452,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1265/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:22:43.353059619 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1723, 
          "faulty": "replacement.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NameAnalyzer.java", 
          "line": 1724, 
          "faulty": "changeProxy.replaceWith(parent,n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1051/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:09.464847542 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:01:20.341613856 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1051/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/jscomp/NameAnalyzer.java\t2018-12-01 09:20:09.468847545 -0500\n@@ -1720,8 +1720,6 @@\n       // TODO(user) make the pass smarter about these cases and/or run\n       // this pass and RemoveConstantExpressions together in a loop.\n       Node replacement = n.getLastChild();\n-      replacement.detachFromParent();\n-      changeProxy.replaceWith(parent, n, replacement);\n     } else {\n       replaceTopLevelExpressionWithRhs(parent, n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_913/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:18:30.404843896 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1430, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:17.385598541 -0500\n+++ /tmp/Arja_Defects4J_Closure_114/patches_p59p/Patch_1071/patched/tmp/Arja_Defects4J_Closure_114/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:23.008857602 -0500\n@@ -1427,11 +1427,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n@@ -1456,7 +1452,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }
  ]
}