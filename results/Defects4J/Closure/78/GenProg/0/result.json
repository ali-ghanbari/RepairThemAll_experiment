{
  "repair_end": "2018-12-02 13:05:43.837074", 
  "repair_begin": "2018-12-02 12:43:55.592668", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_207/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:06.530979308 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_207/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:51:06.534979322 -0500\n@@ -264,9 +264,7 @@\n         if (name.equals(\"undefined\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"NaN\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 267, 
          "faulty": "if (name.equals(\"NaN\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:18.257153970 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:18.257153970 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1127/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:18.261153924 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1447/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:20.223866905 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1447/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:20.223866905 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1447/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:20.227866891 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1447/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:20.227866891 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1355/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:25.824097772 -0500\n@@ -254,7 +254,8 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      StringBuilder builder = new StringBuilder();\n+\tadd(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1355/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:25.828097750 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1355/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:25.828097750 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1355/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:25.832097729 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1426/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:06.543915145 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1426/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:06.543915145 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1426/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:06.543915145 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +761,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1426/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:06.547915130 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1208,7 +1211,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_187/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:53.218932802 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_187/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:53.218932802 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_359/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:52:36.890555888 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_359/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:36.894556261 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_359/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:36.894556261 -0500\n@@ -757,10 +757,6 @@\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n     Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n-\n-    Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n@@ -807,10 +803,11 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        return null;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1403/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:53.599966643 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1403/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:53.603966625 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1403/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:53.603966625 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1403/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:53.603966625 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:00:51.964790233 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:51.968790194 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:51.968790194 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +716,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:51.968790194 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1562/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:29.221949372 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1562/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:29.221949372 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1562/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:29.221949372 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1562/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:29.225949211 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +766,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1266/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:36.584408118 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1266/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:36.584408118 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1266/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:36.584408118 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -766,31 +768,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +786,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1266/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:36.588408088 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1208,7 +1211,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1208/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:04.988667706 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1208/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:04.992667669 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1208/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:04.992667669 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +716,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1208/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:04.992667669 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_707/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:12.590870009 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_707/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:12.594869854 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_707/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:12.594869854 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:59.295943260 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:59.299943243 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:59.299943243 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +716,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -766,31 +767,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:59.299943243 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:29.197819706 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:29.197819706 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:29.201819645 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_787/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:59.885208041 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_787/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:59.889207913 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_787/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:59.889207913 -0500\n@@ -267,10 +267,11 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n-        return null;\n+        ;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 270, 
          "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:28.043840304 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:28.043840304 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:28.047840176 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1674/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:28.047840176 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:59:17.438006437 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:17.442006370 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:17.442006370 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_85/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:49:48.590543141 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_85/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:49:48.594543189 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -715,7 +714,9 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\terror(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:45.188346045 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:45.188346045 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1282/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:45.188346045 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1173/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:44.480865036 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1173/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:44.484864995 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1173/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:44.484864995 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_288/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:56.178601903 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_288/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:56.182602320 -0500\n@@ -807,7 +807,8 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n         return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_322/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:15.476542866 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_322/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:15.476542866 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,7 +147,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +240,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -719,7 +721,10 @@\n           return null;\n         }\n         result = lval / rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n     }\n@@ -756,9 +761,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    int start = 0;\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n@@ -810,7 +813,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1554/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:25.794087689 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1554/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:25.798087525 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1554/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:25.798087525 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:05.560590457 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:05.564590317 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,8 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n+\t\terror(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +764,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +812,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:05.564590317 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_203/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:04.326971589 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_203/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:04.330971603 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -756,9 +760,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    int start = 0;\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n@@ -810,7 +812,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:43.396011445 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:43.396011445 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +720,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:43.400011427 -0500\n@@ -261,16 +261,22 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (name.equals(\"undefined\")) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n+\t\t}\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1352,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:26.097867836 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:26.097867836 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:26.101867774 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_768/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:48.225585715 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_768/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:48.225585715 -0500\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -715,7 +713,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:02.672688807 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:02.672688807 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:02.672688807 -0500\n@@ -1208,7 +1208,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_799/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:06.133013710 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_799/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:06.133013710 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_799/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:06.137013587 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1304,7 +1307,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1481/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:41.011805039 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1481/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:41.011805039 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1481/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:41.011805039 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,37 +762,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1481/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:41.015805028 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1599/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:47.813230315 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1599/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:47.817230165 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1599/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:47.817230165 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1599/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:47.817230165 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,37 +763,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +786,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_276/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:49.717920547 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_276/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:49.721920976 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        ;\n \n       case Token.LT:\n       case Token.GT:\n@@ -237,7 +236,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -714,10 +712,14 @@\n         result = lval % rval;\n         break;\n       case Token.DIV:\n-        if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n-          return null;\n-        }\n+        {\n+\t\t\tint start = 0;\n+\t\t\tif (rval == 0) {\n+\t\t\t\terror(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\n+\t\t\t\t\t\t\"Divide by 0\"), right);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n         result = lval / rval;\n         break;\n       default:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 717, 
          "faulty": "if (rval == 0) {\n  error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:14.606552097 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:14.606552097 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -715,7 +714,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +808,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:14.606552097 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_222/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:15.007009069 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_222/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:15.007009069 -0500\n@@ -143,7 +143,9 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n+          Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\treturn result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -810,7 +812,6 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1016/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:18.265992915 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1016/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:18.265992915 -0500\n@@ -766,31 +766,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +784,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1016/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:18.269992850 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:27.996473638 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:27.996473638 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +720,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:28.000473607 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1208,7 +1211,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_776/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:52.869432907 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_776/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:52.869432907 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_776/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:52.869432907 -0500\n@@ -267,10 +267,11 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n-        return null;\n+        ;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1304,7 +1305,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 270, 
          "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1625/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:03.316668956 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1625/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:03.316668956 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tJSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1625/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:03.320668816 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1625/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:03.320668816 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,9 +763,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1299/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:53.212291280 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1299/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:53.212291280 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1299/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:53.212291280 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1299/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:53.216291253 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:18.288552159 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:18.288552159 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:18.288552159 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +700,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +719,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1232/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:18.292552127 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1633/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:06.352562912 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1633/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:06.352562912 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1633/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:06.356562772 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1633/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:06.356562772 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_584/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:57.912902892 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_584/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:57.916903119 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_584/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:57.916903119 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:03.408682071 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:03.412682035 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:03.412682035 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1146/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:28.457036469 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1146/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:28.457036469 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1146/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:28.457036469 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1664/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:22.816008976 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1664/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:22.820008845 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1664/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:22.820008845 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        int index = -1;\n         break;\n     }\n \n@@ -650,7 +648,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -760,8 +757,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +805,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:09.765257000 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:09.765257000 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        ;\n \n       case Token.LT:\n       case Token.GT:\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_720/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:21.330535962 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_720/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:21.330535962 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_720/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:21.334535812 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:04.863921499 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:04.867921484 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:04.867921484 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:04.867921484 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_651/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:40.383149219 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_651/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:40.383149219 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -810,7 +809,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_651/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:40.387149415 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_294/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:59.558951942 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_294/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:59.562952353 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -756,9 +760,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    int start = 0;\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n@@ -810,7 +812,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_294/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:51:59.562952353 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_976/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:54.034412864 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_976/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:54.034412864 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_291/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:58.122803781 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_291/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:58.122803781 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -704,7 +708,10 @@\n         result = lval - rval;\n         break;\n       case Token.MUL:\n-        result = lval * rval;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tresult = lval * rval;\n+\t\t}\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n@@ -810,7 +817,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 707, 
          "faulty": "result=lval * rval;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_582/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:56.960848741 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_582/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:56.968849197 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_647/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:55:38.151038989 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_647/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:38.155039188 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_647/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:38.155039188 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_647/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:38.155039188 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_414/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:11.365580669 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_414/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:11.365580669 -0500\n@@ -237,7 +237,7 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n+          break;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1284/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:45.924340896 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1284/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:45.924340896 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -766,31 +767,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1284/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:45.928340867 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:40.679446417 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:40.683446295 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:40.683446295 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_730/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:26.046360996 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_730/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:26.050360849 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_730/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:26.050360849 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -810,7 +812,6 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_393/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:59.276562328 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_393/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:59.276562328 -0500\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -757,10 +755,6 @@\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n     Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n-\n-    Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:22.408115958 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:22.408115958 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -809,9 +806,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1350/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:22.408115958 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:22.772515296 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:22.772515296 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:22.772515296 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:22.776515263 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:42.888362294 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:42.888362294 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:42.892362265 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:42.892362265 -0500\n@@ -270,7 +270,7 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        ;\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_670/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:50.787652386 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_670/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:50.791652575 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -809,9 +808,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_670/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:50.791652575 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:26.840092452 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:26.840092452 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:26.844092431 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1357/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:26.844092431 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,10 +717,13 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n-        result = lval / rval;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tresult = lval / rval;\n+\t\t}\n         break;\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n@@ -766,31 +771,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +789,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 721, 
          "faulty": "result=lval / rval;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_262/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:41.036979049 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_262/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:41.040979490 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -810,7 +814,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_713/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:56:17.434683278 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      StringBuilder builder = new StringBuilder();\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_713/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:17.438683125 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1095/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:01.425362951 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1095/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:01.425362951 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +720,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1095/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:01.425362951 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_825/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:57:23.012515513 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_825/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:23.016515400 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_825/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:23.016515400 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_825/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:23.020515287 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_683/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:56.831505830 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_683/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:56.835505664 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -719,7 +722,11 @@\n           return null;\n         }\n         result = lval / rval;\n-        break;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tbreak;\n+\t\t}\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_683/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:56.835505664 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1304,7 +1307,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_419/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:13.553760336 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_419/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:13.553760336 -0500\n@@ -143,7 +143,7 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1451/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:21.691862093 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1451/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:21.695862079 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1451/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:21.695862079 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1451/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:21.699862067 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_929/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:26.870947683 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_929/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:26.874947599 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_929/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:26.874947599 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_728/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:25.098395874 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_728/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:25.098395874 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -699,7 +698,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_728/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:25.102395728 -0500\n@@ -1304,7 +1304,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1518/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:03.035054051 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1518/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:03.035054051 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1518/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:03.039053873 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1518/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:03.039053873 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_839/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:30.876296265 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_839/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:30.876296265 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_839/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:30.876296265 -0500\n@@ -267,9 +267,7 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n+        ;\n         return null;\n \n       case Token.NEG:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 270, 
          "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:31.779830866 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:31.783830854 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:31.783830854 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:27.252479491 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:27.256479459 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:27.256479459 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:27.256479459 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_868/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:50.163791125 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_868/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:50.163791125 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_868/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:50.167791026 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_214/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:51:10.826994379 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_214/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:10.830994392 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_615/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:16.981951453 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_615/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:16.985951666 -0500\n@@ -810,7 +810,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1501/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:52.607526090 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1501/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:52.611525904 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1501/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:52.611525904 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1501/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:52.611525904 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_715/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:18.174655093 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_715/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:18.174655093 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_715/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:18.178654940 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1304,7 +1305,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:15.669932768 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:15.669932768 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -757,10 +755,6 @@\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n     Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n-\n-    Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_893/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:03.339471344 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int start = 0;\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_893/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:03.343471251 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1629/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:04.828615984 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1629/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:04.828615984 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1629/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:04.832615843 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint type = n.getType();\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1629/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:04.832615843 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int start = 0;\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_162/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:36.182873730 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_162/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:36.182873730 -0500\n@@ -810,7 +810,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:23.379856643 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:23.383856631 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int start = 0;\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:23.383856631 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:23.383856631 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1495/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:49.251682093 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1495/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:49.255681906 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint start = 0;\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1495/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:49.255681906 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -650,7 +647,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -760,9 +756,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +802,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1495/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:49.259681719 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1107/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:07.605283983 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1107/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:07.605283983 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1107/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:07.605283983 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:49.200318291 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:49.200318291 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:49.204318265 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1291/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:49.204318265 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1275/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:42.140367632 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1275/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:42.144367604 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -766,31 +767,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1275/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:42.144367604 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1114/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:10.505247832 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1114/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:10.505247832 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1114/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:10.505247832 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_563/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:44.400117447 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_563/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:44.404117685 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -760,37 +759,9 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1504/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:54.191453148 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1504/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:54.191453148 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1504/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:54.195452964 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -699,7 +696,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,9 +760,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +806,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1504/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:54.195452964 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_143/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:25.250836099 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_143/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:25.250836099 -0500\n@@ -760,7 +760,8 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n+    StringBuilder builder = new StringBuilder();\n+\tPreconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:47.408330598 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:47.408330598 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:47.412330570 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1287/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:47.412330570 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_741/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:31.214173446 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_741/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:31.218173304 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_741/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:31.218173304 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1304,7 +1307,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:20.939864547 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:20.939864547 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1449/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:20.943864533 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_324/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:16.288621563 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_324/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:52:16.292621950 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_660/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:46.363440553 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_660/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:46.363440553 -0500\n@@ -264,13 +264,14 @@\n         if (name.equals(\"undefined\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"NaN\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_660/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:46.367440745 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 267, 
          "faulty": "if (name.equals(\"NaN\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:31.212448678 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:31.236448495 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -705,7 +707,10 @@\n         break;\n       case Token.MUL:\n         result = lval * rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.MOD:\n         if (rval == 0) {\n           error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1256/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:31.236448495 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 708, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1343/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:18.464137540 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1343/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:18.464137540 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1343/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:18.468137518 -0500\n@@ -1208,7 +1208,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_779/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:54.537378810 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_779/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:54.541378682 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_779/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:54.541378682 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:00:42.128889217 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:42.132889176 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:42.132889176 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:42.136889135 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_672/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:51.531687698 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_672/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:51.535687888 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -810,7 +813,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_672/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:51.535687888 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_944/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:36.058758782 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_944/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:36.058758782 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_944/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:36.062758701 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:39.849532009 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:39.853531856 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:39.853531856 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +761,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:39.853531856 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:22.861100100 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:22.865100054 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,37 +762,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:22.865100054 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_643/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:35.978930932 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_643/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:35.978930932 -0500\n@@ -1304,7 +1304,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_643/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:35.982931133 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_732/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:26.762334765 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_732/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:26.762334765 -0500\n@@ -715,7 +715,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1271/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:39.828384299 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1271/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:39.832384270 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1271/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:39.832384270 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_493/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:59.737244420 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_493/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:59.737244420 -0500\n@@ -1208,7 +1208,10 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1050/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:36.693706463 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1050/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:36.697706404 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +721,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:58.784829584 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:58.796829154 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:58.796829154 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:58.800829011 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1319/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:04.692217974 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1319/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:04.696217950 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        int index = -1;\n         break;\n     }\n \n@@ -650,7 +648,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +696,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -766,31 +766,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +784,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1319/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:04.696217950 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_102/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:00.226668835 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_102/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:00.226668835 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_863/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:47.155866947 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_863/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:47.155866947 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_863/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:47.159866846 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1304,7 +1307,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1093/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:00.565374153 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1093/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:00.569374101 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1093/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:00.569374101 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1026/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:22.889918462 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1026/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:22.893918397 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1026/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:22.893918397 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_604/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:10.977628586 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_604/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:10.977628586 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_604/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:10.977628586 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:33.431670008 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:33.431670008 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:33.435669883 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:33.435669883 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -714,10 +717,14 @@\n         result = lval % rval;\n         break;\n       case Token.DIV:\n-        if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n-          return null;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (rval == 0) {\n+\t\t\t\terror(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\n+\t\t\t\t\t\t\"Divide by 0\"), right);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n         result = lval / rval;\n         break;\n       default:\n@@ -760,8 +767,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +815,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 717, 
          "faulty": "if (rval == 0) {\n  error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:44.144008030 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:44.144008030 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:44.148008012 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1387/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:44.148008012 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1208,7 +1211,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_138/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:22.406826348 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_138/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:22.406826348 -0500\n@@ -650,7 +650,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_400/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:03.476921151 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_400/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:03.480921489 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -807,7 +805,8 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n         return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1377/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:38.340035071 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1377/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:38.340035071 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1377/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:38.344035054 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1377/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:38.344035054 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1140/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:25.089074525 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1140/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:25.093074479 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1140/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:25.093074479 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_231/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:20.171027258 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_231/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:20.171027258 -0500\n@@ -810,7 +810,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_231/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:51:20.171027258 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1602/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:49.465168893 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1602/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:49.469168745 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1602/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:49.469168745 -0500\n@@ -237,7 +237,7 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n+          break;\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1602/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:49.469168745 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_982/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:58:57.918342075 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_982/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:57.918342075 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_982/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:57.922342001 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_982/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:57.922342001 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1460/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:27.339844218 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1460/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:27.339844218 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1460/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:27.343844205 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1280/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:44.468351108 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1280/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:44.472351079 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1280/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:44.472351079 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1280/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:44.472351079 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:59:35.217728412 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:35.217728412 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:35.221728354 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:35.221728354 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_882/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:57:57.527609962 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int start = 0;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_882/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:57.527609962 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_882/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:57.527609962 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_882/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:57.531609865 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_723/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:22.782481701 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_723/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:22.786481553 -0500\n@@ -267,10 +267,11 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n-        return null;\n+        ;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_723/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:22.786481553 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 270, 
          "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_119/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:10.950762151 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_119/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:10.950762151 -0500\n@@ -715,7 +715,9 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\terror(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:34.180426093 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:34.180426093 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:34.184426064 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:34.184426064 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:11.900606479 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:11.900606479 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:11.904606444 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1221/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:11.904606444 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1076/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:50.985502469 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1076/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:50.985502469 -0500\n@@ -760,37 +760,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +783,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1195/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:00:57.200739832 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1195/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:57.204739794 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1195/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:57.204739794 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1195/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:57.204739794 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:21.336057347 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:21.336057347 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -766,31 +765,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +783,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1661/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:21.340057217 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1332/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:12.260172784 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1332/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:12.260172784 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1332/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:12.264172761 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1332/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:12.264172761 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:54.812280711 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:54.812280711 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +716,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:54.816280684 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1208,7 +1211,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_474/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:47.164351530 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_474/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:47.168351819 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_474/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:47.168351819 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1021/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:59:20.529956245 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1021/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:20.529956245 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1021/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:20.529956245 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +716,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1021/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:20.533956182 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_678/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:55:54.555601350 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_678/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:54.555601350 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_678/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:54.559601182 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:26.718050228 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:26.718050228 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:26.722050067 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1556/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:26.722050067 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_887/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:00.515538223 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_887/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:00.515538223 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1088/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:57.621412889 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1088/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:57.625412835 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -756,12 +758,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n-\n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +806,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1088/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:57.625412835 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1700/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:41.415424060 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1700/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:41.419423939 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1700/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:41.419423939 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int start = 0;\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1700/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:41.423423818 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1510/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:58.275267161 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1510/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:58.279266980 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1510/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:58.279266980 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1510/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:58.279266980 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1175/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:45.224857450 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1175/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:45.224857450 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_984/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:58.638329107 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_984/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:58.638329107 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_898/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:06.319401734 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_898/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:06.319401734 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_898/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:06.323401642 -0500\n@@ -766,31 +766,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_70/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:49:38.682408508 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_70/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:49:38.686408568 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -715,7 +714,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_889/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:58:01.223521368 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_889/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:01.223521368 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_889/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:01.227521272 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_73/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:49:40.266431972 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_73/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:49:40.270432026 -0500\n@@ -810,7 +810,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        int start = 0;\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1251/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:28.732467885 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1251/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:28.736467853 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1251/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:28.736467853 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +700,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,10 +719,13 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n-        result = lval / rval;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tresult = lval / rval;\n+\t\t}\n         break;\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n@@ -766,31 +773,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +791,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1251/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:28.736467853 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 721, 
          "faulty": "result=lval / rval;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:43.909377043 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:43.909377043 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:43.909377043 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:43.913376892 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_608/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:13.181747861 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_608/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:13.185748077 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_608/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:13.185748077 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_312/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:09.507957239 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_312/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:09.507957239 -0500\n@@ -715,7 +715,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_833/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:27.208397547 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_833/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:27.208397547 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,8 +718,9 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n-          return null;\n+          int start = 0;\n+          StringBuilder builder = new StringBuilder();\n+\t\treturn null;\n         }\n         result = lval / rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 719, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1325/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:07.852198805 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1325/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:07.856198781 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        ;\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -766,31 +767,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1325/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:07.856198781 -0500\n@@ -261,12 +261,13 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n-        if (name.equals(\"NaN\")) {\n-          return Double.NaN;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (name.equals(\"undefined\")) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n+\t\t}\n+        StringBuilder builder = new StringBuilder();\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 267, 
          "faulty": "if (name.equals(\"NaN\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1109/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:08.321275002 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1109/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:08.321275002 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -810,7 +815,6 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_317/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:12.584260688 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_317/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:12.584260688 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -807,10 +811,12 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_675/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:53.003666837 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_675/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:53.007666669 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_675/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:53.007666669 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:42.571800931 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:42.571800931 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:42.575800920 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1484/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:42.575800920 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_308/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:08.087816020 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_308/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:08.087816020 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -716,7 +714,8 @@\n       case Token.DIV:\n         if (rval == 0) {\n           error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n-          return null;\n+          int index = -1;\n+\t\treturn null;\n         }\n         result = lval / rval;\n         break;\n@@ -756,9 +755,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    int start = 0;\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 719, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1679/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:30.495762373 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1679/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:30.499762247 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -809,9 +811,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1679/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:30.499762247 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1396/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:49.723983213 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1396/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:49.727983196 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1396/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:49.727983196 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_664/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:47.827511003 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_664/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:47.831511195 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_664/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:47.835511387 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1007/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:12.886081772 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1007/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:12.890081704 -0500\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -699,7 +697,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:04.115924360 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:04.119924344 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1421/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:04.119924344 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:28.473979403 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:28.473979403 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:28.473979403 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_666/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:48.571546663 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_666/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:48.571546663 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_666/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:48.575546854 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_830/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:25.744438453 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_830/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:25.744438453 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_830/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:25.748438341 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -699,7 +698,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_662/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:47.091475636 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_662/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:47.091475636 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -719,7 +718,11 @@\n           return null;\n         }\n         result = lval / rval;\n-        break;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tbreak;\n+\t\t}\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_662/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:47.091475636 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1371/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:35.396049275 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1371/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:35.400049254 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1371/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:35.400049254 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +720,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1371/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:35.400049254 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1317/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:03.956222496 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1317/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:03.956222496 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -756,7 +757,8 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tPreconditions.checkState(\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n@@ -766,31 +768,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +786,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1317/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:03.960222471 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_338/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:25.301479304 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_338/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:25.305479678 -0500\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:48.153541681 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:48.157541624 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -766,31 +768,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +786,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:48.157541624 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:37.720935445 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:37.720935445 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1161/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:37.720935445 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:37.600038611 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:37.604038591 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1375/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:37.604038591 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:48.460323357 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:48.460323357 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -699,7 +698,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1289/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:48.464323330 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1225/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:14.176586880 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1225/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:14.180586845 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1225/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:14.180586845 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1225/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:14.180586845 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_966/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:48.826509957 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_966/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:48.826509957 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_966/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:48.830509882 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_709/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:14.938778983 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_709/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:14.938778983 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_709/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:14.942778828 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1683/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:32.691693188 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1683/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:32.691693188 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1683/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:32.695693063 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -704,7 +707,11 @@\n         result = lval - rval;\n         break;\n       case Token.MUL:\n-        result = lval * rval;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tresult = lval * rval;\n+\t\t}\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n@@ -760,37 +767,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +790,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1683/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:32.695693063 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 707, 
          "faulty": "result=lval * rval;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_301/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:03.843389411 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_301/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:03.843389411 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -650,7 +649,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_249/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:32.259995748 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_249/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:32.263996203 -0500\n@@ -143,7 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n+          Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +238,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:53.945462117 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:53.949462062 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:53.949462062 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:13.828163724 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:13.828163724 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:13.832163701 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1335/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:13.832163701 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_264/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:41.781060915 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_264/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:41.781060915 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -756,9 +754,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    int start = 0;\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_416/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:12.097640955 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_416/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:12.101641283 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_416/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:12.101641283 -0500\n@@ -270,7 +270,7 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        ;\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:00:50.392805679 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:50.396805640 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:50.396805640 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:50.396805640 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_636/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:31.666714032 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_636/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:31.670714235 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_636/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:31.670714235 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_789/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:00.633184494 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_789/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:00.633184494 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1304,7 +1305,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_789/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:00.633184494 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1400/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:52.031973277 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1400/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:52.035973260 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1400/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:52.035973260 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +766,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1400/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:52.035973260 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_346/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:29.617880135 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_346/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:29.617880135 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,7 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n+          break;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_971/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:51.870452905 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_971/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:51.874452831 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -179,7 +179,6 @@\n         Node left = n.getFirstChild();\n         Node right = n.getLastChild();\n         if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n-          tryConvertOperandsToNumber(n);\n         }\n         break;\n       case Token.ASSIGN_BITOR:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -809,9 +806,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_971/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:51.874452831 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 182, 
          "faulty": "tryConvertOperandsToNumber(n);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_522/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:18.554509418 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_522/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:18.554509418 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -760,9 +759,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:25.703915387 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:25.707915257 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:25.707915257 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -699,7 +696,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,9 +760,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +806,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1669/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:25.707915257 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:51.729492272 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:51.733492217 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:51.733492217 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_924/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:24.602995626 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_924/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:24.602995626 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -766,31 +765,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +783,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_924/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:24.606995541 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_681/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:56.083537107 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_681/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:56.083537107 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -699,7 +698,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1053/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:38.125685324 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1053/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:38.125685324 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:08.720481055 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:08.724480918 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:08.724480918 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:08.728480779 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_406/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:06.417169141 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_406/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:06.421169477 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,7 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n+          break;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1442/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:17.159877171 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1442/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:17.163877158 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1442/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:17.163877158 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1442/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:17.163877158 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1499/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:51.839561602 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1499/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:51.839561602 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1499/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:51.839561602 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1499/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:51.843561418 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_974/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:53.330425851 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_974/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:53.334425776 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_974/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:53.334425776 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_842/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:32.448253390 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_842/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:32.452253281 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_842/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:32.452253281 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n@@ -1304,7 +1302,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1572/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:33.781768199 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1572/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:33.781768199 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1572/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:33.785768041 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_366/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:41.254959848 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_366/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:41.258960215 -0500\n@@ -143,7 +143,7 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:04.446991608 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      StringBuilder builder = new StringBuilder();\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:04.450991432 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:04.450991432 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:04.450991432 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_283/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:54.042378437 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_283/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:54.046378856 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_283/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:51:54.046378856 -0500\n@@ -264,9 +264,12 @@\n         if (name.equals(\"undefined\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"NaN\")) {\n-          return Double.NaN;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (name.equals(\"NaN\")) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n+\t\t}\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 267, 
          "faulty": "if (name.equals(\"NaN\")) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:01.104746998 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:01.104746998 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:01.104746998 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:01.108746856 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1062/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:43.321609952 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1062/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:43.321609952 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1062/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:43.325609897 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1405/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:54.347963505 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1405/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:54.351963489 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1405/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:54.351963489 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,10 +716,13 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n-        result = lval / rval;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tresult = lval / rval;\n+\t\t}\n         break;\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n@@ -766,31 +770,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +788,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1405/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:54.351963489 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 721, 
          "faulty": "result=lval / rval;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:16.697172538 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:16.697172538 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -760,8 +759,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +807,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:16.697172538 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1470/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:34.107824110 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1470/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:34.111824098 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1470/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:34.111824098 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1568/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:31.477859347 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1568/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:31.481859187 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1568/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:31.481859187 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1568/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:31.481859187 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_931/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:27.614932078 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_931/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:27.614932078 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_931/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:27.614932078 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:46.953262442 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:46.953262442 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:46.957262290 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:46.957262290 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int start = 0;\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_823/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:22.264536796 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_823/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:22.264536796 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_823/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:22.268536682 -0500\n@@ -715,7 +715,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1143/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:26.889054093 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1143/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:26.889054093 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -677,7 +679,8 @@\n \n     Double lValObj = NodeUtil.getNumberValue(left);\n     if (lValObj == null) {\n-      return null;\n+      int index = -1;\n+\treturn null;\n     }\n     Double rValObj = NodeUtil.getNumberValue(right);\n     if (rValObj == null) {\n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1143/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:26.893054048 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 680, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:00:14.441199676 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:14.441199676 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:14.445199627 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +716,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:14.445199627 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1208,7 +1211,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_164/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:36.974876465 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_164/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:36.978876478 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -809,9 +808,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1211/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:06.656652698 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1211/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:06.660652663 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1211/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:06.660652663 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +716,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1211/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:06.664652626 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1431/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:09.699903463 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1431/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:09.703903449 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1431/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:09.703903449 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_963/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:58:47.174541282 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_963/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:47.174541282 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_963/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:47.178541205 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_963/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:47.178541205 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:27.450020647 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:27.454020486 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:27.454020486 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1558/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:27.454020486 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_591/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:02.841180431 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_591/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:02.841180431 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_591/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:02.845180653 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1362/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:30.044075945 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1362/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:30.044075945 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1362/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:30.048075924 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1362/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:30.048075924 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_735/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:28.294278893 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_735/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:28.294278893 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_735/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:28.294278893 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,9 +763,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:05.197314435 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:05.201314384 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:05.201314384 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_402/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:04.188981464 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_402/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:04.188981464 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -237,7 +241,7 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n+          break;\n         }\n         break;\n     }\n@@ -810,7 +814,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_519/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:17.114415531 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_519/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:17.114415531 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_519/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:17.118415793 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:17.456559114 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:17.460559080 -0500\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:17.460559080 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1694/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:38.387516449 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1694/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:38.387516449 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +758,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +804,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1694/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:38.391516326 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n@@ -1346,7 +1344,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_445/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:30.207082817 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_445/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:30.211083125 -0500\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_445/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:30.211083125 -0500\n@@ -267,9 +267,7 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n+        int start = 0;\n         return null;\n \n       case Token.NEG:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 270, 
          "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:07.104203303 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:07.108203279 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1323/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:07.108203279 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:50.868306971 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:50.872306944 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:50.872306944 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:50.872306944 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_762/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:45.285684116 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_762/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:45.289683982 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,8 +718,9 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n-          return null;\n+          int start = 0;\n+          int index = -1;\n+\t\treturn null;\n         }\n         result = lval / rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_762/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:45.289683982 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 719, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_123/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:13.198780081 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_123/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:13.202780114 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1615/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:58.048855928 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tint type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1615/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:58.052855785 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1615/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:58.052855785 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_343/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:28.097739720 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_343/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:28.097739720 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +236,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_310/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:08.799886920 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_310/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:08.803887318 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,7 +147,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +240,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -756,9 +758,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    int start = 0;\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n@@ -810,7 +810,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_357/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:36.158487498 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_357/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:36.162487871 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -810,7 +814,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_357/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:52:36.162487871 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_285/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:54.718449324 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_539/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:29.227190915 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_539/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:29.231191165 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:05.937305030 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:05.941304979 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -760,8 +759,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +807,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:05.941304979 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:23.605907095 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:23.609907032 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:03.212227098 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:03.212227098 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -699,7 +698,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -766,31 +768,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +786,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:03.212227098 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_696/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:06.115125952 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_696/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:06.119125792 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_696/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:06.119125792 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1151/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:31.657000970 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1151/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:31.661000926 -0500\n@@ -760,8 +760,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1293/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:49.936313279 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1293/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:49.940313251 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1293/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:49.940313251 -0500\n@@ -756,7 +756,8 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n+    StringBuilder builder = new StringBuilder();\n+\tPreconditions.checkState(\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:12.310649910 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:12.314649739 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:12.314649739 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:12.314649739 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_602/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:10.233588105 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_602/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:10.233588105 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_448/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:31.715198753 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_448/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:31.715198753 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_448/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:53:31.715198753 -0500\n@@ -267,9 +267,7 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n+        int index = -1;\n         return null;\n \n       case Token.NEG:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 270, 
          "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_726/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:24.350423508 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_726/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:24.350423508 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_726/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:24.354423360 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:29.969919424 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:29.973919264 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:29.973919264 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +761,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:29.973919264 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:33.120060481 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:33.124060460 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        ;\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -766,31 +767,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:33.124060460 -0500\n@@ -261,12 +261,13 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n-        if (name.equals(\"NaN\")) {\n-          return Double.NaN;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (name.equals(\"undefined\")) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n+\t\t}\n+        StringBuilder builder = new StringBuilder();\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 267, 
          "faulty": "if (name.equals(\"NaN\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_737/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:29.022252461 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_737/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:29.022252461 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_737/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:29.026252318 -0500\n@@ -655,7 +655,8 @@\n       reportCodeChange();\n       return result;\n     }\n-    return n;\n+    int index = -1;\n+\treturn n;\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 658, 
          "faulty": "return n;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:13.711889096 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:13.711889096 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1437/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:13.711889096 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_941/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:34.458791084 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_941/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:34.458791084 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_813/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:15.100744251 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_813/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:15.104744133 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -715,7 +714,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1215/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:08.228638687 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1215/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:08.228638687 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -766,31 +767,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +785,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1215/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:08.232638652 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_749/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:36.070001091 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_749/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:36.070001091 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_749/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:36.074000950 -0500\n@@ -267,10 +267,11 @@\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n-        if (name.equals(\"Infinity\")) {\n-          return Double.POSITIVE_INFINITY;\n-        }\n-        return null;\n+        ;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 270, 
          "faulty": "if (name.equals(\"Infinity\")) {\n  return Double.POSITIVE_INFINITY;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_220/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:14.287006537 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_220/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:14.287006537 -0500\n@@ -760,9 +760,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_611/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:55:14.765833038 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_611/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:55:14.765833038 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_611/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:55:14.769833252 -0500\n@@ -1304,7 +1304,8 @@\n     if (recurse) {\n       return valueCheck(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      int index = -1;\n+\treturn mayBeStringHelper(n);\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1307, 
          "faulty": "return mayBeStringHelper(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_770/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:49.097556773 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_770/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:49.097556773 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_770/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:49.101556642 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1627/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:04.088641864 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1627/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:04.088641864 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1627/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:04.092641724 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -766,31 +763,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +781,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1627/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:04.092641724 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:19.004134108 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:19.004134108 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +758,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +804,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:19.008133977 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n@@ -1346,7 +1344,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_702/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:56:09.634985936 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      StringBuilder builder = new StringBuilder();\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_702/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:09.634985936 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_702/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:09.634985936 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_702/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:09.638985777 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_544/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:32.091369564 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_544/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:32.091369564 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:36.089677703 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:36.089677703 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:36.089677703 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:10.288427265 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:10.292427127 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:10.292427127 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1003/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:10.794116987 -0500\n@@ -51,7 +51,8 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int start = 0;\n+\tint type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1003/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:10.798116919 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:19.692540506 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:19.696540472 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1411/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:57.639949940 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1411/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:57.639949940 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1411/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:57.643949924 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1411/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:57.643949924 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1055/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:38.853674639 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1055/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:38.857674582 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1055/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:38.857674582 -0500\n@@ -270,7 +270,7 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        ;\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_512/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:12.714125653 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_512/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:12.718125919 -0500\n@@ -237,7 +237,7 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n+          break;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_879/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:57:56.075645179 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_879/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:56.079645082 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_879/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:56.079645082 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_879/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:56.079645082 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:17.950411164 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:17.950411164 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:17.954410995 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1542/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:17.954410995 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:18.997981004 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:19.001980939 -0500\n@@ -766,31 +766,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +784,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:19.001980939 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1595/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:46.217290034 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1595/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:46.217290034 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1595/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:46.221289884 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_947/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:58:37.758724754 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_947/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:37.758724754 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_947/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:37.762724674 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_947/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:37.762724674 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:46.519790846 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:46.523790835 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:46.523790835 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1490/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:46.523790835 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1001/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:10.082129053 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1001/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:10.082129053 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +812,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1689/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:35.771597135 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tJSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1689/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:35.775597011 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1689/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:35.775597011 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1254/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:30.268455953 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1254/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:30.272455922 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1254/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:30.272455922 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1254/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:30.276455892 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,10 +717,12 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n-        result = lval / rval;\n+        {\n+\t\t\tint start = 0;\n+\t\t\tresult = lval / rval;\n+\t\t}\n         break;\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 721, 
          "faulty": "result=lval / rval;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1635/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:07.160534892 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1635/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:07.160534892 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1635/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:07.164534753 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -651,7 +653,8 @@\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n       result.copyInformationFromForTree(n);\n-      n.getParent().replaceChild(n, result);\n+      StringBuilder builder = new StringBuilder();\n+\tn.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n     }\n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1635/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:07.164534753 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 654, 
          "faulty": "n.getParent().replaceChild(n,result);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1337/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:14.560159532 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1337/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:14.564159510 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -809,9 +808,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1337/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:14.564159510 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:19.857135092 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:19.857135092 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -756,9 +759,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    StringBuilder builder = new StringBuilder();\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n@@ -809,9 +810,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1346/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:20.184128048 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1346/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:20.188128026 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1346/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:20.188128026 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +766,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:00.072246770 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:00.076246745 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:00.076246745 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:00.080246719 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1692/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:37.463544857 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1692/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:37.463544857 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n+\tJSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1692/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:37.463544857 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1692/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:37.467544734 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_228/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:51:18.715022125 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_228/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:51:18.715022125 -0500\n@@ -143,7 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n+          int start = 0;\n+\t\treturn result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_532/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:25.054927516 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_532/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:25.054927516 -0500\n@@ -650,7 +650,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -807,7 +806,8 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n         return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_452/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:33.823359802 -0500\n@@ -50,8 +50,8 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int index = -1;\n+    int type = n.getType();\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_466/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:42.159984989 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_466/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:42.159984989 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -807,7 +806,8 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n         return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:37.875813524 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:37.879813512 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:37.879813512 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:37.879813512 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_926/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:25.334980096 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_926/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:25.338980012 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_926/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:25.338980012 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -718,7 +721,10 @@\n           error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n-        result = lval / rval;\n+        {\n+\t\t\tint start = 0;\n+\t\t\tresult = lval / rval;\n+\t\t}\n         break;\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 721, 
          "faulty": "result=lval / rval;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:34.529738791 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:34.529738791 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:34.529738791 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1574/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:34.533738634 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_348/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:30.325945288 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_348/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:30.325945288 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -237,7 +241,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -704,7 +707,10 @@\n         result = lval - rval;\n         break;\n       case Token.MUL:\n-        result = lval * rval;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tresult = lval * rval;\n+\t\t}\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n@@ -810,7 +816,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 707, 
          "faulty": "result=lval * rval;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_464/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:41.447932292 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_464/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:41.451932589 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,7 +147,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +240,7 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n+          break;\n         }\n         break;\n     }\n@@ -810,7 +813,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:21.341943194 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:21.341943194 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_132/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:18.826814093 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_132/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:18.826814093 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -715,7 +714,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_132/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:50:18.830814106 -0500\n@@ -261,9 +261,13 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tif (name.equals(\"undefined\")) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n+\t\t}\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_955/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:41.562649614 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_955/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:41.562649614 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:30.737888787 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:30.737888787 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:30.741888627 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:30.741888627 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1190/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:54.280767750 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1190/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:54.284767711 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1512/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:03:59.139228183 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1512/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:03:59.139228183 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1512/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:03:59.139228183 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1512/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:03:59.143228002 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -699,7 +697,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,9 +761,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +807,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:02:56.895952969 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:56.899952953 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:56.899952953 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -179,7 +179,6 @@\n         Node left = n.getFirstChild();\n         Node right = n.getLastChild();\n         if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n-          tryConvertOperandsToNumber(n);\n         }\n         break;\n       case Token.ASSIGN_BITOR:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:56.899952953 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 182, 
          "faulty": "tryConvertOperandsToNumber(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_764/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:46.073657606 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_764/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:46.077657470 -0500\n@@ -699,7 +699,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_148/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:27.998845537 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_148/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:27.998845537 -0500\n@@ -143,7 +143,9 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n+          Node parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\treturn result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:19.776108626 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:19.776108626 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:19.776108626 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:19.780108495 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -704,7 +707,11 @@\n         result = lval - rval;\n         break;\n       case Token.MUL:\n-        result = lval * rval;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tresult = lval * rval;\n+\t\t}\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n@@ -760,37 +767,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +790,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 707, 
          "faulty": "result=lval * rval;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1524/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:05.946925610 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1524/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:05.950925435 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +814,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1524/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:05.950925435 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_331/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:20.641039321 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_331/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:20.645039701 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -237,7 +241,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -810,7 +813,8 @@\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_918/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:20.619081111 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_918/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:20.619081111 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -809,9 +807,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_918/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:20.623081024 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_804/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:08.984926814 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_804/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:08.988926693 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +815,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_804/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:08.988926693 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:34.947545951 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:54:34.947545951 -0500\n@@ -1208,7 +1208,10 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:34.947545951 -0500\n@@ -705,7 +705,10 @@\n         break;\n       case Token.MUL:\n         result = lval * rval;\n-        break;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tbreak;\n+\t\t}\n       case Token.MOD:\n         if (rval == 0) {\n           error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 708, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1589/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:43.169405111 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1589/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:43.169405111 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1589/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:43.169405111 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1589/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:43.173404959 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_116/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:50:09.538750888 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_116/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:09.538750888 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_116/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:50:09.542750920 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_828/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:24.620470047 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_828/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:24.620470047 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_828/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:24.624469934 -0500\n@@ -766,31 +766,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +784,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1153/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:32.520991496 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1153/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:32.524991452 -0500\n@@ -756,9 +756,7 @@\n    */\n   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n     int opType = n.getType();\n-    Preconditions.checkState(\n-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n-        || n.getType() == Token.ADD);\n+    StringBuilder builder = new StringBuilder();\n \n     Preconditions.checkState(\n         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n@@ -809,9 +807,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 759, 
          "faulty": "Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:11.024402116 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:11.028401981 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:11.028401981 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +702,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -809,9 +815,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:11.028401981 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_433/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:22.206457246 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_433/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:22.210457562 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,7 +147,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -237,7 +240,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -807,10 +809,12 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1651/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:15.652245695 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1651/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:15.652245695 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1651/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:15.656245560 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +700,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +764,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int start = 0;\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1651/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:15.656245560 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_996/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:07.062180731 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_996/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:07.066180662 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_996/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:07.066180662 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_952/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:39.966680961 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_952/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:39.966680961 -0500\n@@ -766,31 +766,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +784,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_952/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:39.970680882 -0500\n@@ -1346,7 +1346,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:42.880881448 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:42.880881448 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1208,7 +1211,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:42.880881448 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +653,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:59:45.989572036 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:45.989572036 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:45.989572036 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -699,7 +700,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -715,7 +719,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:45.993571978 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_477/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:53:48.612456380 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_477/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:53:48.616456669 -0500\n@@ -135,7 +135,11 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn tryFoldArithmeticOp(subtree, left, right);\n+\t\t}\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -143,7 +147,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -807,10 +810,12 @@\n         return tryFoldChildAddString(node, left, right);\n       }\n     } else {\n-      // Try arithmetic add\n+      int start = 0;\n+\t// Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n       if (result != node) {\n-        return result;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn result;\n       }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "Node result=tryFoldArithmeticOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1099/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:03.721333303 -0500\n@@ -51,7 +51,8 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int start = 0;\n+\tint type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1099/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:00:03.721333303 -0500\n@@ -270,7 +270,7 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1099/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:03.721333303 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:45.005585954 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:45.009585898 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:45.009585898 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +763,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +811,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:00:20.561126843 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:00:20.565126796 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:00:20.565126796 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_793/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:02.937112424 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_793/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:02.941112300 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_793/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:02.941112300 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_874/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:53.899698426 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_874/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:53.899698426 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n@@ -699,7 +698,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -718,7 +720,10 @@\n           error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n-        result = lval / rval;\n+        {\n+\t\t\tint start = 0;\n+\t\t\tresult = lval / rval;\n+\t\t}\n         break;\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 721, 
          "faulty": "result=lval / rval;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_744/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:56:33.090106415 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_744/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:56:33.090106415 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_744/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:56:33.094106272 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -766,31 +768,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1048/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:59:35.961717323 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1048/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:59:35.961717323 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1048/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:59:35.965717262 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,37 +763,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +786,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_153/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:50:30.786855127 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_153/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:50:30.786855127 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_58/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:49:29.034244131 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_566/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:46.124219711 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_566/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:46.128219947 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -719,7 +722,10 @@\n           return null;\n         }\n         result = lval / rval;\n-        break;\n+        {\n+\t\t\tint start = 0;\n+\t\t\tbreak;\n+\t\t}\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n     }\n@@ -760,9 +766,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:01:34.924420498 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:34.928420469 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:34.928420469 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -650,7 +652,6 @@\n   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n     Node result = performArithmeticOp(n.getType(), left, right);\n     if (result != null) {\n-      result.copyInformationFromForTree(n);\n       n.getParent().replaceChild(n, result);\n       reportCodeChange();\n       return result;\n@@ -715,10 +716,13 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n-        result = lval / rval;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\tresult = lval / rval;\n+\t\t}\n         break;\n       default:\n         throw new Error(\"Unexpected arithmetic operator\");\n@@ -766,31 +770,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +788,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:34.932420438 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 653, 
          "faulty": "result.copyInformationFromForTree(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 721, 
          "faulty": "result=lval / rval;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1608/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:53.429023086 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1608/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:53.433022940 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1608/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:53.433022940 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +761,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +809,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1608/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:53.433022940 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1213/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:01:07.396646087 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1213/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:01:07.396646087 -0500\n@@ -715,7 +715,6 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1213/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:01:07.400646051 -0500\n@@ -1208,7 +1208,11 @@\n       case Token.POS:\n       case Token.NEG:\n       case Token.NUMBER:\n-        return true;\n+        {\n+\t\t\tNode parameterName = Node.newString(Token.NAME,\n+\t\t\t\t\t\"jscomp_throw_param\");\n+\t\t\treturn true;\n+\t\t}\n       case Token.NAME:\n         String name = n.getString();\n         if (name.equals(\"NaN\")) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1211, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_877/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:55.335663235 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_877/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:55.335663235 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -809,9 +812,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_877/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:55.339663136 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_855/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:41.772005352 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_855/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:41.776005248 -0500\n@@ -143,7 +143,6 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n         return tryFoldLeftChildOp(subtree, left, right);\n \n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +717,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_855/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:57:41.776005248 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_950/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:58:39.230695510 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_950/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:58:39.230695510 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -766,31 +769,6 @@\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +787,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_950/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:58:39.230695510 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1349,10 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn true;\n+\t\t}\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_574/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:54:51.728547925 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_574/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:54:51.728547925 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:26.551888105 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:26.555887976 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:26.555887976 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:26.555887976 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        ;\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return Token.name(type);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:04:22.542220616 -0500\n@@ -254,7 +254,7 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      int index = -1;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:22.546220452 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:22.546220452 -0500\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,37 +763,11 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n-    if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n-      Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n-    }\n-\n     return n;\n   }\n \n@@ -809,9 +786,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:22.546220452 -0500\n@@ -261,9 +261,7 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 769, 
          "faulty": "if (rightValObj != null && left.getType() == opType) {\n  Preconditions.checkState(left.getChildCount() == 2);\n  Node ll=left.getFirstChild();\n  Node lr=ll.getNext();\n  Node valueToCombine=ll;\n  Node replacement=performArithmeticOp(opType,valueToCombine,right);\n  if (replacement == null) {\n    valueToCombine=lr;\n    replacement=performArithmeticOp(opType,valueToCombine,right);\n  }\n  if (replacement != null) {\n    left.removeChild(valueToCombine);\n    n.replaceChild(left,left.removeFirstChild());\n    replacement.copyInformationFromForTree(right);\n    n.replaceChild(right,replacement);\n    reportCodeChange();\n  }\n}", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:04:38.389588340 -0500\n@@ -50,8 +50,7 @@\n    * @param n The node for which the error should be reported\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:04:38.389588340 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        ;\n         break;\n     }\n \n@@ -760,9 +757,6 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n-\n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n@@ -809,9 +803,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:04:38.393588186 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n@@ -1346,7 +1347,7 @@\n       case Token.BITOR:\n       case Token.BITXOR:\n       case Token.BITAND:\n-        return true;\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 53, 
          "faulty": "JSError error=currentTraversal.makeError(n,diagnostic,n.toString());", 
          "type": "InsertBefore", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1349, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_796/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:57:04.493064197 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_796/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:57:04.493064197 -0500\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,7 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:09.460455633 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:09.464455496 -0500\n@@ -51,7 +51,6 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:09.464455496 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -699,7 +701,10 @@\n         break;\n       case Token.ADD:\n         result = lval + rval;\n-        break;\n+        {\n+\t\t\tint index = -1;\n+\t\t\tbreak;\n+\t\t}\n       case Token.SUB:\n         result = lval - rval;\n         break;\n@@ -760,8 +765,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int start = 0;\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +813,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:09.464455496 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 702, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_384/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:52:53.504060286 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_384/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:52:53.508060636 -0500\n@@ -237,7 +237,6 @@\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n-          return;\n         }\n         break;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_384/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:52:53.508060636 -0500\n@@ -270,7 +270,10 @@\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1391/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:02:46.451997629 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1391/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:02:46.455997611 -0500\n@@ -143,9 +143,8 @@\n       case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n-          return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +235,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -760,8 +762,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +810,7 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n+      int start = 0;\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1391/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:02:46.455997611 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 146, 
          "faulty": "return result;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 06:43:40.513189070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1677/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/CodeConsumer.java\t2018-12-02 07:05:29.759785687 -0500\n@@ -254,7 +254,6 @@\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 06:43:40.509187070 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1677/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-02 07:05:29.759785687 -0500\n@@ -51,7 +51,7 @@\n    */\n   protected void error(DiagnosticType diagnostic, Node n) {\n     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());\n-    currentTraversal.getCompiler().report(error);\n+    int type = n.getType();\n   }\n \n   /**\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 06:43:40.533199067 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1677/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 07:05:29.763785560 -0500\n@@ -261,16 +261,17 @@\n       case Token.NAME:\n         // Check for known constants\n         String name = n.getString();\n-        if (name.equals(\"undefined\")) {\n-          return Double.NaN;\n-        }\n+        ;\n         if (name.equals(\"NaN\")) {\n           return Double.NaN;\n         }\n         if (name.equals(\"Infinity\")) {\n           return Double.POSITIVE_INFINITY;\n         }\n-        return null;\n+        {\n+\t\t\tint start = 0;\n+\t\t\treturn null;\n+\t\t}\n \n       case Token.NEG:\n         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n\n\n--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 06:43:42.494179024 -0500\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1677/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 07:05:29.763785560 -0500\n@@ -135,7 +135,7 @@\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        return tryFoldArithmeticOp(subtree, left, right);\n+        StringBuilder builder = new StringBuilder();\n \n       case Token.MUL:\n       case Token.BITAND:\n@@ -145,7 +145,7 @@\n         if (result != subtree) {\n           return result;\n         }\n-        return tryFoldLeftChildOp(subtree, left, right);\n+        Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n \n       case Token.LT:\n       case Token.GT:\n@@ -236,9 +236,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n-        if (!NodeUtil.isUndefined(n)) {\n-          return;\n-        }\n+        {\n+\t\t\tint index = -1;\n+\t\t\tif (!NodeUtil.isUndefined(n)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n         break;\n     }\n \n@@ -715,7 +718,8 @@\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n+\t\terror(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n@@ -760,8 +764,7 @@\n         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n         || n.getType() == Token.ADD);\n \n-    Preconditions.checkState(\n-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));\n+    int type = n.getType();\n \n     // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n     // other values are converted to numbers elsewhere.\n@@ -809,9 +812,6 @@\n     } else {\n       // Try arithmetic add\n       Node result = tryFoldArithmeticOp(node, left, right);\n-      if (result != node) {\n-        return result;\n-      }\n       return tryFoldLeftChildOp(node, left, right);\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 54, 
          "faulty": "currentTraversal.getCompiler().report(error);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 273, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeConsumer.java", 
          "line": 257, 
          "faulty": "add(String.valueOf(x));", 
          "type": "Delete", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 239, 
          "faulty": "if (!NodeUtil.isUndefined(n)) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 148, 
          "faulty": "return tryFoldLeftChildOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "Node parameterName=Node.newString(Token.NAME,\"jscomp_throw_param\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 763, 
          "faulty": "Preconditions.checkState(n.getType() != Token.ADD || !NodeUtil.mayBeString(n));", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 722, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 264, 
          "faulty": "if (name.equals(\"undefined\")) {\n  return Double.NaN;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 138, 
          "faulty": "return tryFoldArithmeticOp(subtree,left,right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 812, 
          "faulty": "if (result != node) {\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 718, 
          "faulty": "error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\",\"Divide by 0\"),right);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 240, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }
      ]
    }
  ]
}