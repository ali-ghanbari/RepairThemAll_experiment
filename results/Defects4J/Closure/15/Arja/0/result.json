{
  "repair_end": "2018-12-01 16:21:43.091618", 
  "repair_begin": "2018-12-01 15:57:54.563683", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_988/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:52.145002466 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_988/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:52.149002455 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_873/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:44.761174967 -0500\n@@ -222,7 +222,6 @@\n \n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_873/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:44.761174967 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 225, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_967/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:40.121036651 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_967/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:40.121036651 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_967/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:40.121036651 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_898/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:14:59.257141992 -0500\n@@ -203,7 +203,7 @@\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n-          case DELPROP:         return \"DELPROP\";\n+          case DELPROP:         return \"SUB\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n           case GETELEM:         return \"GETELEM\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_898/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:59.261141983 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 206, 
          "faulty": "return \"DELPROP\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_862/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:38.825187751 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_862/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:38.829187742 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1086/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:54.716804422 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1086/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:54.716804422 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_860/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:38.045189400 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_860/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:38.045189400 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_990/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:52.941000155 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_990/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:52.941000155 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_695/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:49.529334282 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_695/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:49.533334280 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1277/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:53.304356375 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1277/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:53.304356375 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_566/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:20.221289442 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_566/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:20.225289448 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 225, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_982/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:48.593012705 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_982/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:48.597012693 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1472/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:53.216254191 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n@@ -222,7 +218,6 @@\n \n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1472/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:53.216254191 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 225, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1331/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:28.180210973 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1331/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:28.184210956 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1257/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:41.208405555 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1257/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:41.212405539 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_813/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:14:11.509240852 -0500\n@@ -203,7 +203,7 @@\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n-          case DELPROP:         return \"DELPROP\";\n+          case DELPROP:         return \"SUB\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n           case GETELEM:         return \"GETELEM\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_813/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:11.513240845 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_813/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:11.513240845 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 206, 
          "faulty": "return \"DELPROP\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_545/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:05.877294248 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_545/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:05.877294248 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1492/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:05.512308815 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1492/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:05.516308832 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1144/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:28.472685382 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1144/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:28.476685367 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_405/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:11.569897804 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_405/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:09:11.701897127 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_957/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:34.081053300 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_957/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:34.081053300 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_783/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:52.121272423 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_783/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:52.121272423 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1396/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:20:07.644040671 -0500\n@@ -203,7 +203,7 @@\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n-          case DELPROP:         return \"DELPROP\";\n+          case DELPROP:         return \"SUB\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n           case GETELEM:         return \"GETELEM\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1396/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:07.644040671 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1396/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:07.644040671 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 206, 
          "faulty": "return \"DELPROP\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1007/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:04.148967011 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1007/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:04.152966998 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1244/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:18:34.040434373 -0500\n@@ -203,7 +203,204 @@\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n-          case DELPROP:         return \"DELPROP\";\n+          case DELPROP:         switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\t}\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n           case GETELEM:         return \"GETELEM\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1244/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:34.040434373 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 206, 
          "faulty": "return \"DELPROP\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase COLON:\nreturn \"COLON\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1299/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:08.056295503 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1299/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:08.056295503 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1203/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:07.064540516 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1203/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:07.068540501 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1140/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:26.316693210 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1140/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:26.316693210 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_938/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:23.633081245 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_938/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:23.633081245 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_826/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:17.369230282 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_826/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:17.369230282 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_974/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:43.661026728 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_974/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:43.661026728 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1322/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:22.256236028 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1322/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:22.260236011 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1250/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:37.540420332 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1250/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:37.540420332 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_951/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:30.625062665 -0500\n@@ -119,9 +119,7 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -200,7 +198,6 @@\n       DiGraphNode<N, E> b) {\n     if (nodePredicate.apply(a.getValue()) &&\n         (inclusive || (a != start && a != end))) {\n-      return true;\n     }\n     if (a == b) {\n       return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_951/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:30.625062665 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 203, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1406/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:13.852043715 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1406/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:13.852043715 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_755/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:13:32.585298631 -0500\n@@ -203,7 +203,7 @@\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n-          case DELPROP:         return \"DELPROP\";\n+          case DELPROP:         return \"SUB\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n           case GETELEM:         return \"GETELEM\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_755/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:32.589298626 -0500\n@@ -200,7 +200,6 @@\n       DiGraphNode<N, E> b) {\n     if (nodePredicate.apply(a.getValue()) &&\n         (inclusive || (a != start && a != end))) {\n-      return true;\n     }\n     if (a == b) {\n       return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_755/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:32.589298626 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 203, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 206, 
          "faulty": "return \"DELPROP\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1213/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:13.280516392 -0500\n@@ -221,9 +221,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1213/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:13.280516392 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1393/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:20:06.100047438 -0500\n@@ -203,7 +203,7 @@\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n-          case DELPROP:         return \"DELPROP\";\n+          case DELPROP:         return \"SUB\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n           case GETELEM:         return \"GETELEM\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1393/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:06.104047421 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n@@ -216,10 +213,6 @@\n       if (ignoreEdge(e)) {\n         continue;\n       }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n         return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1393/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:06.104047421 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 206, 
          "faulty": "return \"DELPROP\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1018/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:10.932946410 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1018/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:10.932946410 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_848/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:30.889204167 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_848/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:30.893204159 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1269/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:49.008373919 -0500\n@@ -200,17 +200,8 @@\n       DiGraphNode<N, E> b) {\n     if (nodePredicate.apply(a.getValue()) &&\n         (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n-    if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1269/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:49.008373919 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 203, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_948/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:29.237066393 -0500\n@@ -122,7 +122,7 @@\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_948/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:29.237066393 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1271/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:49.728370985 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1271/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:49.728370985 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1116/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:11.464746321 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1116/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:11.468746307 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1512/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:17.676358064 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1512/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:17.676358064 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_817/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:12.961238278 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_817/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:12.961238278 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_857/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:36.637192354 -0500\n@@ -202,29 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_857/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:36.641192346 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_815/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:12.245239551 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_815/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:12.245239551 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1078/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:50.280819478 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1078/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:50.284819464 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1536/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:32.208444852 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1536/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:32.212444876 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_807/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:08.669245807 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_807/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:08.673245800 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1521/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:23.188387893 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1521/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:23.188387893 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_726/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:12.837318957 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_726/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:12.841318953 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1175/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:17:49.196608670 -0500\n@@ -203,7 +203,7 @@\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n-          case DELPROP:         return \"DELPROP\";\n+          case DELPROP:         return \"ADD\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n           case GETELEM:         return \"GETELEM\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1175/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:49.200608655 -0500\n@@ -211,8 +211,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1175/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:49.200608655 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 206, 
          "faulty": "return \"DELPROP\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1420/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:21.972091834 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1420/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:21.972091834 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_943/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:26.441073843 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_943/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:26.445073832 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 203, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_866/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:41.093182917 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_866/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:41.097182908 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_634/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:12:07.849335563 -0500\n@@ -221,7 +221,7 @@\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n-          case IN:              return \"IN\";\n+          case IN:              ;\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_634/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:07.849335563 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"IN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1060/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:38.316859357 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -211,8 +210,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1060/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:38.320859343 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_624/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:01.257332396 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_624/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:01.261332398 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_960/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:35.709048847 -0500\n@@ -211,8 +211,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_960/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:35.709048847 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_892/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:55.885149880 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_892/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:55.885149880 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_892/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:55.885149880 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1501/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:11.096332004 -0500\n@@ -367,9 +367,6 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1501/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:11.096332004 -0500\n@@ -222,7 +222,6 @@\n \n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1501/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:11.100332020 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 370, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 225, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_523/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:50.125379345 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -205,26 +204,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_523/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:50.129379324 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1199/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:04.864549004 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1199/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:04.868548988 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_618/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:11:57.317330034 -0500\n@@ -221,7 +221,7 @@\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n-          case IN:              return \"IN\";\n+          case IN:              ;\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_618/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:57.317330034 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_618/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:57.317330034 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"IN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1082/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:52.500811961 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1082/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:52.500811961 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1108/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:06.332764331 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1108/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:06.336764318 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1153/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:34.032665059 -0500\n@@ -368,7 +368,6 @@\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n         if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n         }\n       }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1153/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:34.036665045 -0500\n@@ -211,8 +211,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1153/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:34.036665045 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 371, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_885/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:52.333158047 -0500\n@@ -200,7 +200,6 @@\n       DiGraphNode<N, E> b) {\n     if (nodePredicate.apply(a.getValue()) &&\n         (inclusive || (a != start && a != end))) {\n-      return true;\n     }\n     if (a == b) {\n       return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_885/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:52.337158038 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 203, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1370/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:52.112108374 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1370/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:52.112108374 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1110/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:07.580759968 -0500\n@@ -216,10 +216,6 @@\n       if (ignoreEdge(e)) {\n         continue;\n       }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n         return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1110/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:07.588759940 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1430/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:28.492128640 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1430/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:28.496128662 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1105/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:17:04.764769798 -0500\n@@ -206,7 +206,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         return \"BLOCK\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1105/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:04.768769784 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 209, 
          "faulty": "return \"GETELEM\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1197/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:04.076552037 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1197/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:04.080552022 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1362/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:47.156129797 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1362/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:47.160129779 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1096/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:59.156789210 -0500\n@@ -198,33 +198,9 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1096/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:59.156789210 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1232/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:26.288465255 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1232/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:26.292465239 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1226/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:22.580479921 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1226/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:22.584479905 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1058/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:37.604861696 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1058/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:37.604861696 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1315/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:17.912254311 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1315/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:17.912254311 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_780/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:50.673274563 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_780/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:50.677274557 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1354/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:19:42.248150923 -0500\n@@ -221,7 +221,7 @@\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n-          case IN:              return \"IN\";\n+          case IN:              ;\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1354/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:42.252150906 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1354/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:42.252150906 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"IN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1345/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:36.524175447 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1345/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:36.528175431 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_728/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:13:13.589318301 -0500\n@@ -221,7 +221,7 @@\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n-          case IN:              return \"IN\";\n+          case IN:              ;\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_728/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:13.589318301 -0500\n@@ -122,7 +122,7 @@\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_728/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:13.589318301 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"IN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_878/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:47.661168567 -0500\n@@ -367,9 +367,6 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_878/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:47.665168558 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 370, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1523/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:23.948392819 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1523/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:23.952392845 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1476/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:55.396264241 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1476/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:55.396264241 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_823/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:15.869233033 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_823/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:15.873233025 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1504/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:12.564337932 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1504/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:12.568337949 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1504/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:12.568337949 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1308/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:13.572272500 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1308/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:13.576272483 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_820/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:14.373235744 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_820/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:14.373235744 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_674/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:34.773338760 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_923/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:14.517104710 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_923/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:14.521104700 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_870/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:43.301178151 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_870/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:43.305178142 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1120/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:17:13.556738928 -0500\n@@ -221,7 +221,7 @@\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n-          case IN:              return \"IN\";\n+          case IN:              ;\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1120/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:13.556738928 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1120/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:13.556738928 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"IN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1463/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:48.844233552 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1463/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:48.848233571 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1542/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:35.644465709 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n@@ -211,8 +207,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1542/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:35.644465709 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1414/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:18.904073953 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1414/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:18.904073953 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1092/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:57.580794626 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1092/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:57.580794626 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1127/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:17.712724155 -0500\n@@ -367,9 +367,6 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1127/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:17.716724141 -0500\n@@ -221,9 +221,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1127/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:17:17.716724141 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 370, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_717/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:05.929324511 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_717/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:05.933324508 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1089/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:56.156799504 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1089/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:56.156799504 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_844/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:28.721208513 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_844/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:28.721208513 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1094/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:58.312792113 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1094/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:58.316792099 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_931/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:19.489092019 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_931/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:19.493092009 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_455/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:00.361644404 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -202,29 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_455/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:00.365644383 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_652/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:20.365338945 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_652/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:20.365338945 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1047/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:29.868886857 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1047/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:29.868886857 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1439/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:33.424155433 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1439/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:33.424155433 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_654/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:21.089339040 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_654/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:21.093339040 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1254/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:39.768411364 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1254/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:39.772411348 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1465/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:49.648237395 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1465/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:49.648237395 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_901/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:00.645138707 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_901/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:00.645138707 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_888/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:53.793154708 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_888/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:53.793154708 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_888/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:53.797154699 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1486/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:01.956293532 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1486/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:01.956293532 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_810/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:10.085243351 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_810/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:10.089243345 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1388/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:03.360059428 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1388/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:03.360059428 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1416/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:19.772079047 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1416/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:19.772079047 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1434/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:30.604140224 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1434/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:30.608140245 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1034/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:21.564913336 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1034/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:21.568913322 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1333/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:29.024207392 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1333/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:29.028207375 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1333/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:29.028207375 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_842/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:27.953210039 -0500\n@@ -198,33 +198,9 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_842/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:27.953210039 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_971/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:42.261030667 -0500\n@@ -367,9 +367,6 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_971/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:42.261030667 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_971/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:42.265030655 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 370, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_796/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:01.029258581 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_796/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:01.029258581 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_920/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:13.137108187 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -205,26 +204,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_920/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:13.137108187 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1467/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:50.368240819 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1467/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:50.368240819 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_579/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:28.825301940 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_579/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:28.825301940 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:57:35.447088269 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1459/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:46.760223482 -0500\n@@ -394,7 +394,6 @@\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n         def.removeChild(rhs);\n-        useParent.replaceChild(use, rhs);\n       } else {\n         Preconditions.checkState(false, \"No other definitions can be inlined.\");\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1459/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:46.764223502 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 397, 
          "faulty": "useParent.replaceChild(use,rhs);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1374/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:19:54.240099149 -0500\n@@ -221,7 +221,7 @@\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n-          case IN:              return \"IN\";\n+          case IN:              ;\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:57:33.379088222 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1374/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:54.244099131 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:57:33.791088231 -0500\n+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_1374/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:54.244099131 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"IN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }
  ]
}