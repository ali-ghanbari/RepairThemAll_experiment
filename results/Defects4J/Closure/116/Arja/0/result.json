{
  "repair_end": "2018-12-01 15:29:51.986226", 
  "repair_begin": "2018-12-01 14:51:23.523634", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 196, 
          "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:47.174566503 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:26:47.178566521 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1742/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:47.178566521 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1249/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:19:00.512584536 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -738,9 +737,6 @@\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1249/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:19:00.516584546 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 704, 
          "faulty": "if (!callNode.getFirstChild().isName()) {\n  if (NodeUtil.isFunctionObjectCall(callNode)) {\n    if (cArg == null || !cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n else {\n    Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1224/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:18:37.664532597 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -698,22 +697,6 @@\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1224/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:18:37.668532605 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_713/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:10:28.197749165 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_713/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:28.197749165 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1871/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:28:49.547146153 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1871/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:28:49.551146173 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1871/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:49.551146173 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 704, 
          "faulty": "if (!callNode.getFirstChild().isName()) {\n  if (NodeUtil.isFunctionObjectCall(callNode)) {\n    if (cArg == null || !cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n else {\n    Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1028/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:15:30.679347503 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -698,22 +697,6 @@\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1028/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:15:30.679347503 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 796, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 504, 
          "faulty": "continue;", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1791/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:27:37.082795319 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -793,7 +792,6 @@\n     // so use the cost estimating.\n     if (referenceCount == 1 && isRemovable &&\n         referencesUsingDirectInlining == 1) {\n-      return true;\n     }\n \n     int callCost = estimateCallCost(fnNode, referencesThis);\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1791/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:27:37.086795337 -0500\n@@ -501,7 +501,6 @@\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n           sideEffectInfo.setTaintsArguments();\n-          continue;\n         }\n \n         boolean localVar = false;\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1791/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:27:37.086795337 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 721, 
          "faulty": "if (fnParam != null) {\n  if (cArg != null) {\n    if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n  fnParam=fnParam.getNext();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1605/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:24:39.193952014 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -717,24 +716,6 @@\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1605/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:24:39.193952014 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1274/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:19:28.340660270 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1274/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:19:28.340660270 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1274/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:19:28.344660282 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1354/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:20:40.972913033 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -719,18 +718,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1354/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:40.972913033 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 281, 
          "faulty": "Preconditions.checkArgument(safeReturnNode == inlineResult);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_751/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:11:01.845878500 -0500\n@@ -278,7 +278,6 @@\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n           null, safeReturnNode, null, argMap);\n-      Preconditions.checkArgument(safeReturnNode == inlineResult);\n       newExpression = safeReturnNode.removeFirstChild();\n     }\n \n@@ -552,7 +551,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_751/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:01.845878500 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1448/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:18.545322247 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1448/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:22:18.549322263 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1448/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:18.549322263 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1679/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:25:52.106312842 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1679/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:25:52.106312842 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1679/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:52.106312842 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 232, 
          "faulty": "int type=parent.getType();", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_541/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:07:42.212873443 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_541/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:07:42.212873443 -0500\n@@ -229,7 +229,7 @@\n    * @param parent The parent of the node.\n    */\n   private static boolean canNameValueChange(Node n, Node parent) {\n-    int type = parent.getType();\n+    int type = n.getType();\n     return (type == Token.VAR || type == Token.INC || type == Token.DEC ||\n         (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) ||\n         (NodeUtil.isForIn(parent)));\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_541/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:07:42.216873470 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 721, 
          "faulty": "if (fnParam != null) {\n  if (cArg != null) {\n    if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n  fnParam=fnParam.getNext();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1674/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:25:48.190292944 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -717,24 +716,6 @@\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1674/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:25:48.190292944 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1674/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:48.194292965 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1328/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:20:18.184825993 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1328/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:18.188826008 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1284/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:19:37.352687513 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1284/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:19:37.352687513 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1284/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:19:37.352687513 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1690/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:00.002353132 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1690/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:26:00.002353132 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1690/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:00.006353153 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1451/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:20.589330683 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1451/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:22:20.593330699 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1451/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:22:20.593330699 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1451/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:20.593330699 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1878/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:28:55.575176250 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1878/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:55.579176270 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 275, 
          "faulty": "Preconditions.checkArgument(returnNode.isReturn());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1565/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:24:01.701774988 -0500\n@@ -272,8 +272,6 @@\n       newExpression = NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n       Node returnNode = block.getFirstChild();\n-      Preconditions.checkArgument(returnNode.isReturn());\n-\n       // Clone the return node first.\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n@@ -552,7 +550,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1565/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:24:01.701774988 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 503, 
          "faulty": "sideEffectInfo.setTaintsArguments();", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1414/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:21:45.757190149 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1414/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:21:45.757190149 -0500\n@@ -500,7 +500,6 @@\n         if (param &&\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n-          sideEffectInfo.setTaintsArguments();\n           continue;\n         }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1414/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:21:45.761190165 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1667/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:25:42.278263012 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -719,18 +719,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1667/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:42.282263031 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 196, 
          "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1251/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:19:01.524587058 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1251/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:19:01.524587058 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1251/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:19:01.524587058 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 200, 
          "faulty": "if (inInnerFunction || canNameValueChange(n,parent)) {\n  unsafe.add(n.getString());\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1820/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:28:03.714921823 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1820/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:28:03.714921823 -0500\n@@ -197,9 +197,7 @@\n     Preconditions.checkArgument(unsafe != null);\n     if (n.isName()) {\n       if (names.contains(n.getString())) {\n-        if (inInnerFunction || canNameValueChange(n, parent)) {\n-          unsafe.add(n.getString());\n-        }\n+        return null;\n       }\n     } else if (n.isFunction()) {\n       // A function parameter can not be replaced with a direct inlined value\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1820/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:03.718921842 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 281, 
          "faulty": "Preconditions.checkArgument(safeReturnNode == inlineResult);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1457/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:24.597347291 -0500\n@@ -278,7 +278,6 @@\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n           null, safeReturnNode, null, argMap);\n-      Preconditions.checkArgument(safeReturnNode == inlineResult);\n       newExpression = safeReturnNode.removeFirstChild();\n     }\n \n@@ -552,7 +551,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +714,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1457/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:24.597347291 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 233, 
          "faulty": "return (type == Token.VAR || type == Token.INC || type == Token.DEC || (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || (NodeUtil.isForIn(parent)));", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1393/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:21:21.733083933 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1393/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:21:21.737083951 -0500\n@@ -230,9 +230,7 @@\n    */\n   private static boolean canNameValueChange(Node n, Node parent) {\n     int type = parent.getType();\n-    return (type == Token.VAR || type == Token.INC || type == Token.DEC ||\n-        (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) ||\n-        (NodeUtil.isForIn(parent)));\n+    return false;\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1393/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:21:21.737083951 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1767/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:27:09.294666543 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -738,9 +737,6 @@\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1767/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:27:09.294666543 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 282, 
          "faulty": "newExpression=safeReturnNode.removeFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1702/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:10.786406976 -0500\n@@ -279,7 +279,7 @@\n       Node inlineResult = FunctionArgumentInjector.inject(\n           null, safeReturnNode, null, argMap);\n       Preconditions.checkArgument(safeReturnNode == inlineResult);\n-      newExpression = safeReturnNode.removeFirstChild();\n+      return null;\n     }\n \n     callParentNode.replaceChild(callNode, newExpression);\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1702/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:10.786406976 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_707/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:10:23.257731654 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_707/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:10:23.261731667 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_707/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:23.261731667 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 281, 
          "faulty": "Preconditions.checkArgument(safeReturnNode == inlineResult);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1407/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:21:39.805165317 -0500\n@@ -278,7 +278,6 @@\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n           null, safeReturnNode, null, argMap);\n-      Preconditions.checkArgument(safeReturnNode == inlineResult);\n       newExpression = safeReturnNode.removeFirstChild();\n     }\n \n@@ -552,7 +551,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1407/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:21:39.805165317 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1526/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:23:26.121612869 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1526/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:26.125612887 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 200, 
          "faulty": "if (inInnerFunction || canNameValueChange(n,parent)) {\n  unsafe.add(n.getString());\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1100/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:16:41.935817358 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1100/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:16:41.935817358 -0500\n@@ -197,9 +197,6 @@\n     Preconditions.checkArgument(unsafe != null);\n     if (n.isName()) {\n       if (names.contains(n.getString())) {\n-        if (inInnerFunction || canNameValueChange(n, parent)) {\n-          unsafe.add(n.getString());\n-        }\n       }\n     } else if (n.isFunction()) {\n       // A function parameter can not be replaced with a direct inlined value\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1100/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:16:41.935817358 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_783/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:11:31.282004813 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_783/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:11:31.286004831 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_783/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:31.286004831 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 503, 
          "faulty": "sideEffectInfo.setTaintsArguments();", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_723/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:10:37.049781520 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_723/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:10:37.049781520 -0500\n@@ -500,7 +500,6 @@\n         if (param &&\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n-          sideEffectInfo.setTaintsArguments();\n           continue;\n         }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_723/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:37.053781535 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 704, 
          "faulty": "if (!callNode.getFirstChild().isName()) {\n  if (NodeUtil.isFunctionObjectCall(callNode)) {\n    if (cArg == null || !cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n else {\n    Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 744, 
          "faulty": "cArg=cArg.getNext();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_900/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:13:26.434593076 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -698,22 +697,6 @@\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n@@ -741,7 +724,7 @@\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        return null;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_900/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:13:26.434593076 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 796, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 503, 
          "faulty": "sideEffectInfo.setTaintsArguments();", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1363/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:20:48.968945082 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -793,7 +793,7 @@\n     // so use the cost estimating.\n     if (referenceCount == 1 && isRemovable &&\n         referencesUsingDirectInlining == 1) {\n-      return true;\n+      return false;\n     }\n \n     int callCost = estimateCallCost(fnNode, referencesThis);\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1363/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:20:48.972945099 -0500\n@@ -500,7 +500,6 @@\n         if (param &&\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n-          sideEffectInfo.setTaintsArguments();\n           continue;\n         }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1363/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:48.972945099 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 727, 
          "faulty": "if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 200, 
          "faulty": "if (inInnerFunction || canNameValueChange(n,parent)) {\n  unsafe.add(n.getString());\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1744/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:48.178570995 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -720,15 +719,6 @@\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n         }\n \n         // Move to the next name.\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1744/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:26:48.182571012 -0500\n@@ -197,9 +197,7 @@\n     Preconditions.checkArgument(unsafe != null);\n     if (n.isName()) {\n       if (names.contains(n.getString())) {\n-        if (inInnerFunction || canNameValueChange(n, parent)) {\n-          unsafe.add(n.getString());\n-        }\n+        return null;\n       }\n     } else if (n.isFunction()) {\n       // A function parameter can not be replaced with a direct inlined value\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1744/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:48.182571012 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1121/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:17:01.923952797 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -719,18 +719,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1121/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:17:01.927952824 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1121/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:17:01.927952824 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 503, 
          "faulty": "sideEffectInfo.setTaintsArguments();", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1646/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:25:22.190162283 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -719,18 +719,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n@@ -738,9 +726,6 @@\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1646/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:25:22.190162283 -0500\n@@ -500,7 +500,6 @@\n         if (param &&\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n-          sideEffectInfo.setTaintsArguments();\n           continue;\n         }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1646/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:22.194162303 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1830/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:28:11.662960138 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1830/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:28:11.666960158 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1830/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:11.666960158 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_317/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:03:58.731550821 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_317/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:03:58.731550821 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_317/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:58.735550840 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_979/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:14:41.771039111 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_979/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:14:41.771039111 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 503, 
          "faulty": "sideEffectInfo.setTaintsArguments();", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 200, 
          "faulty": "if (inInnerFunction || canNameValueChange(n,parent)) {\n  unsafe.add(n.getString());\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1832/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:28:12.686965093 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1832/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:28:12.686965093 -0500\n@@ -500,7 +500,6 @@\n         if (param &&\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n-          sideEffectInfo.setTaintsArguments();\n           continue;\n         }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1832/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:28:12.686965093 -0500\n@@ -197,9 +197,7 @@\n     Preconditions.checkArgument(unsafe != null);\n     if (n.isName()) {\n       if (names.contains(n.getString())) {\n-        if (inInnerFunction || canNameValueChange(n, parent)) {\n-          unsafe.add(n.getString());\n-        }\n+        return null;\n       }\n     } else if (n.isFunction()) {\n       // A function parameter can not be replaced with a direct inlined value\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1832/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:12.690965112 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1489/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:51.613461502 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1489/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:22:51.613461502 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1489/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:51.613461502 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 275, 
          "faulty": "Preconditions.checkArgument(returnNode.isReturn());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1198/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:18:12.884444043 -0500\n@@ -272,8 +272,6 @@\n       newExpression = NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n       Node returnNode = block.getFirstChild();\n-      Preconditions.checkArgument(returnNode.isReturn());\n-\n       // Clone the return node first.\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n@@ -552,7 +550,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1198/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:18:12.888444071 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_301/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:03:38.383456754 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_301/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:38.387456771 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 200, 
          "faulty": "if (inInnerFunction || canNameValueChange(n,parent)) {\n  unsafe.add(n.getString());\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_753/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:11:02.853882631 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_753/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:11:02.853882631 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n@@ -197,9 +196,7 @@\n     Preconditions.checkArgument(unsafe != null);\n     if (n.isName()) {\n       if (names.contains(n.getString())) {\n-        if (inInnerFunction || canNameValueChange(n, parent)) {\n-          unsafe.add(n.getString());\n-        }\n+        return null;\n       }\n     } else if (n.isFunction()) {\n       // A function parameter can not be replaced with a direct inlined value\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_753/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:02.853882631 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 721, 
          "faulty": "if (fnParam != null) {\n  if (cArg != null) {\n    if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n  fnParam=fnParam.getNext();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_995/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:14:58.255141589 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -717,24 +717,6 @@\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_995/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:14:58.259141614 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 727, 
          "faulty": "if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1474/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:38.541405753 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -720,15 +719,6 @@\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n         }\n \n         // Move to the next name.\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1474/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:22:38.545405770 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1474/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:38.545405770 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_168/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:01:27.602795037 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_168/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:01:27.630795201 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_168/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:27.630795201 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 721, 
          "faulty": "if (fnParam != null) {\n  if (cArg != null) {\n    if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n  fnParam=fnParam.getNext();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1228/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:18:40.632538788 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -717,24 +716,6 @@\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1228/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:18:40.636538797 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 796, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 580, 
          "faulty": "sideEffectInfo.addTaintedLocalObject(var);", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1421/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:21:52.193215590 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -793,7 +792,6 @@\n     // so use the cost estimating.\n     if (referenceCount == 1 && isRemovable &&\n         referencesUsingDirectInlining == 1) {\n-      return true;\n     }\n \n     int callCost = estimateCallCost(fnNode, referencesThis);\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1421/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:21:52.193215590 -0500\n@@ -574,10 +574,6 @@\n           if (var == null || var.scope != scope) {\n             sideEffectInfo.setTaintsUnknown();\n           } else {\n-            // Maybe a local object modification.  We won't know for sure until\n-            // we exit the scope and can validate the value of the local.\n-            //\n-            sideEffectInfo.addTaintedLocalObject(var);\n           }\n         }\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1421/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:21:52.193215590 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1594/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:24:29.405905210 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1594/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:24:29.405905210 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1594/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:24:29.409905229 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_951/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:14:15.026876340 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -738,9 +738,6 @@\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_951/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:14:15.026876340 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 196, 
          "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_732/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:10:45.137812149 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_732/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:10:45.137812149 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_732/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:45.137812149 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 796, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 744, 
          "faulty": "cArg=cArg.getNext();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1134/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:17:13.856034311 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -741,7 +740,7 @@\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        return null;\n       }\n     }\n \n@@ -793,7 +792,6 @@\n     // so use the cost estimating.\n     if (referenceCount == 1 && isRemovable &&\n         referencesUsingDirectInlining == 1) {\n-      return true;\n     }\n \n     int callCost = estimateCallCost(fnNode, referencesThis);\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1134/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:17:13.856034311 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1323/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:20:14.164811328 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -719,18 +719,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1323/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:14.164811328 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1822/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:28:04.710926611 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1822/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:04.714926629 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_829/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:12:15.686215572 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -738,9 +738,6 @@\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_829/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:15.686215572 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1484/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:47.541444040 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -719,18 +718,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1484/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:47.541444040 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 744, 
          "faulty": "cArg=cArg.getNext();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_470/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:06:33.072419354 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -741,7 +741,7 @@\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        return null;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_470/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:33.072419354 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 281, 
          "faulty": "Preconditions.checkArgument(safeReturnNode == inlineResult);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1609/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:24:42.237966652 -0500\n@@ -278,7 +278,6 @@\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n           null, safeReturnNode, null, argMap);\n-      Preconditions.checkArgument(safeReturnNode == inlineResult);\n       newExpression = safeReturnNode.removeFirstChild();\n     }\n \n@@ -552,7 +551,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1609/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:24:42.241966671 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1348/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:20:36.004893506 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1348/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:20:36.004893506 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1348/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:36.004893506 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1836/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:28:15.774980061 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -719,18 +719,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1836/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:28:15.774980061 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1836/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:28:15.774980061 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1148/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:17:26.832123487 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -738,9 +738,6 @@\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1148/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:17:26.836123514 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 281, 
          "faulty": "Preconditions.checkArgument(safeReturnNode == inlineResult);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_607/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:08:46.233318277 -0500\n@@ -278,7 +278,6 @@\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n           null, safeReturnNode, null, argMap);\n-      Preconditions.checkArgument(safeReturnNode == inlineResult);\n       newExpression = safeReturnNode.removeFirstChild();\n     }\n \n@@ -552,7 +551,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_607/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:46.237318305 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1931/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:29:47.311439854 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1931/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:29:47.315439875 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1931/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:29:47.315439875 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1552/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:23:49.989720970 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1552/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:23:49.989720970 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1552/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:49.989720970 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 721, 
          "faulty": "if (fnParam != null) {\n  if (cArg != null) {\n    if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n  fnParam=fnParam.getNext();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1762/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:27:05.198647850 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -717,24 +717,6 @@\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1762/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:27:05.202647868 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_932/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:13:57.158770197 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_932/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:13:57.162770221 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_932/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:13:57.162770221 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_386/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:05:05.471896497 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_386/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:05:05.471896497 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 281, 
          "faulty": "Preconditions.checkArgument(safeReturnNode == inlineResult);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1453/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:21.597334851 -0500\n@@ -278,7 +278,6 @@\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n           null, safeReturnNode, null, argMap);\n-      Preconditions.checkArgument(safeReturnNode == inlineResult);\n       newExpression = safeReturnNode.removeFirstChild();\n     }\n \n@@ -552,7 +551,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1453/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:22:21.601334868 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1453/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:21.601334868 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 704, 
          "faulty": "if (!callNode.getFirstChild().isName()) {\n  if (NodeUtil.isFunctionObjectCall(callNode)) {\n    if (cArg == null || !cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n else {\n    Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_781/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:11:30.274000300 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -698,22 +698,6 @@\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_781/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:30.278000319 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 275, 
          "faulty": "Preconditions.checkArgument(returnNode.isReturn());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1150/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:17:27.836130409 -0500\n@@ -272,8 +272,6 @@\n       newExpression = NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n       Node returnNode = block.getFirstChild();\n-      Preconditions.checkArgument(returnNode.isReturn());\n-\n       // Clone the return node first.\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n@@ -552,7 +550,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1150/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:17:27.840130436 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 67, 
          "faulty": "Preconditions.checkState(!parent.isFunction() || !parent.isVar() || !parent.isCatch());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1726/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:32.454501197 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1726/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:26:32.458501214 -0500\n@@ -63,10 +63,6 @@\n     if (node.isName()) {\n       Node replacementTemplate = replacements.get(node.getString());\n       if (replacementTemplate != null) {\n-        // This should not be replacing declared names.\n-        Preconditions.checkState(!parent.isFunction()\n-            || !parent.isVar()\n-            || !parent.isCatch());\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1726/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:32.458501214 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 721, 
          "faulty": "if (fnParam != null) {\n  if (cArg != null) {\n    if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n  fnParam=fnParam.getNext();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_848/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:12:35.030314117 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -717,24 +717,6 @@\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_848/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:35.030314117 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 704, 
          "faulty": "if (!callNode.getFirstChild().isName()) {\n  if (NodeUtil.isFunctionObjectCall(callNode)) {\n    if (cArg == null || !cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n else {\n    Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1378/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:21:07.905023905 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -698,22 +698,6 @@\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1378/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:21:07.909023924 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 196, 
          "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1173/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:17:49.672281714 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1173/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:17:49.672281714 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1173/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:17:49.672281714 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 504, 
          "faulty": "continue;", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1196/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:18:11.876436964 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1196/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:18:11.876436964 -0500\n@@ -501,7 +501,6 @@\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n           sideEffectInfo.setTaintsArguments();\n-          continue;\n         }\n \n         boolean localVar = false;\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1196/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:18:11.876436964 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 275, 
          "faulty": "Preconditions.checkArgument(returnNode.isReturn());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1717/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:26:24.566466629 -0500\n@@ -272,8 +272,6 @@\n       newExpression = NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n       Node returnNode = block.getFirstChild();\n-      Preconditions.checkArgument(returnNode.isReturn());\n-\n       // Clone the return node first.\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n@@ -552,7 +550,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1717/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:26:24.574466664 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 504, 
          "faulty": "continue;", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1335/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:20:24.184848273 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1335/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:20:24.184848273 -0500\n@@ -501,7 +501,6 @@\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n           sideEffectInfo.setTaintsArguments();\n-          continue;\n         }\n \n         boolean localVar = false;\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1335/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:20:24.184848273 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_818/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:12:05.850166959 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -719,18 +718,6 @@\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_818/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:05.850166959 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_749/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:11:00.841874399 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_749/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:11:00.841874399 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_749/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:00.845874415 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 704, 
          "faulty": "if (!callNode.getFirstChild().isName()) {\n  if (NodeUtil.isFunctionObjectCall(callNode)) {\n    if (cArg == null || !cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n else {\n    Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_858/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:12:45.462368800 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -698,22 +697,6 @@\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_858/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:45.466368821 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 741, 
          "faulty": "if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1466/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:32.445380065 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -738,9 +737,6 @@\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1466/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:32.449380082 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_766/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:11:15.233934518 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_766/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:11:15.237934536 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_766/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:15.237934536 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 727, 
          "faulty": "if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 704, 
          "faulty": "if (!callNode.getFirstChild().isName()) {\n  if (NodeUtil.isFunctionObjectCall(callNode)) {\n    if (cArg == null || !cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n else {\n    Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 196, 
          "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1801/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:27:45.934837040 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -698,53 +697,8 @@\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1801/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:27:45.934837040 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1801/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:27:45.934837040 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 275, 
          "faulty": "Preconditions.checkArgument(returnNode.isReturn());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1512/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:23:13.121555145 -0500\n@@ -272,8 +272,6 @@\n       newExpression = NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n       Node returnNode = block.getFirstChild();\n-      Preconditions.checkArgument(returnNode.isReturn());\n-\n       // Clone the return node first.\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n@@ -552,7 +550,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1512/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:13.125555163 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 196, 
          "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1294/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:19:46.408716148 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1294/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:19:46.408716148 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1294/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:19:46.412716161 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java", 
          "line": 504, 
          "faulty": "continue;", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1537/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:23:36.017657361 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1537/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:23:36.017657361 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 08:50:58.477149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1537/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\t2018-12-01 09:23:36.017657361 -0500\n@@ -501,7 +501,6 @@\n             !sideEffectInfo.blacklisted.contains(v) &&\n             sideEffectInfo.taintedLocals.contains(v)) {\n           sideEffectInfo.setTaintsArguments();\n-          continue;\n         }\n \n         boolean localVar = false;\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1537/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:36.017657361 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 275, 
          "faulty": "Preconditions.checkArgument(returnNode.isReturn());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 73, 
          "faulty": "parent.replaceChild(node,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1681/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:25:53.110317953 -0500\n@@ -272,8 +272,6 @@\n       newExpression = NodeUtil.newUndefinedNode(srcLocation);\n     } else {\n       Node returnNode = block.getFirstChild();\n-      Preconditions.checkArgument(returnNode.isReturn());\n-\n       // Clone the return node first.\n       Node safeReturnNode = returnNode.cloneTree();\n       Node inlineResult = FunctionArgumentInjector.inject(\n@@ -552,7 +550,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1681/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:25:53.110317953 -0500\n@@ -70,7 +70,6 @@\n         // The name may need to be replaced more than once,\n         // so we need to clone the node.\n         Node replacement = replacementTemplate.cloneTree();\n-        parent.replaceChild(node, replacement);\n         return replacement;\n       }\n     } else if (replaceThis && node.isThis()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1681/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:53.110317953 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 196, 
          "faulty": "decomposeSubExpressions(functionExpression.getNext(),child,state);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_615/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:08:53.261368294 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_615/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:08:53.261368294 -0500\n@@ -193,7 +193,6 @@\n       } else if (parentType == Token.CALL\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n-        decomposeSubExpressions(functionExpression.getNext(), child, state);\n         // Now handle the call expression\n         if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n             && functionExpression.getFirstChild() != grandchild) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_615/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:53.261368294 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 719, 
          "faulty": "while (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    if (cArg != null) {\n      if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n    fnParam=fnParam.getNext();\n  }\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg,compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg=cArg.getNext();\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 722, 
          "faulty": "if (cArg != null) {\n  if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n    return CanInlineResult.NO;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java", 
          "line": 200, 
          "faulty": "if (inInnerFunction || canNameValueChange(n,parent)) {\n  unsafe.add(n.getString());\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1623/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:24:55.042028647 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -716,35 +715,6 @@\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n     return CanInlineResult.YES;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1623/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\t2018-12-01 09:24:55.050028686 -0500\n@@ -197,9 +197,7 @@\n     Preconditions.checkArgument(unsafe != null);\n     if (n.isName()) {\n       if (names.contains(n.getString())) {\n-        if (inInnerFunction || canNameValueChange(n, parent)) {\n-          unsafe.add(n.getString());\n-        }\n+        return null;\n       }\n     } else if (n.isFunction()) {\n       // A function parameter can not be replaced with a direct inlined value\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1623/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:24:55.050028686 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 727, 
          "faulty": "if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1688/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:25:58.998347997 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -720,15 +719,6 @@\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n         }\n \n         // Move to the next name.\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1688/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:25:58.998347997 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_343/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:04:23.811674435 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_343/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:04:23.815674455 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_343/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:23.815674455 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 727, 
          "faulty": "if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n  return CanInlineResult.NO;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1469/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:22:34.549388909 -0500\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n@@ -720,15 +720,6 @@\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n         }\n \n         // Move to the next name.\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1469/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:22:34.549388909 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 721, 
          "faulty": "if (fnParam != null) {\n  if (cArg != null) {\n    if (NodeUtil.mayEffectMutableState(cArg,compiler) && NodeUtil.getNameReferenceCount(block,fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n  fnParam=fnParam.getNext();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_914/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:13:39.330666552 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n@@ -717,24 +716,6 @@\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_914/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:13:39.330666552 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 08:51:01.869149850 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_273/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2018-12-01 09:03:11.355341284 -0500\n@@ -552,7 +552,6 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 08:50:58.457149772 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_273/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2018-12-01 09:03:11.355341284 -0500\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:50:58.717149778 -0500\n+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_273/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:11.355341284 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n"
    }
  ]
}