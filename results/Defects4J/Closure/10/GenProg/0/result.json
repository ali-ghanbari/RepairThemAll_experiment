{
  "repair_end": "2018-12-02 14:42:02.502069", 
  "repair_begin": "2018-12-02 14:07:22.312877", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:25.973632105 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:25.977632308 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:25.981632511 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_895/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:30:25.981632511 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1314/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:26.815672846 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1314/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:26.815672846 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:15.175100341 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +354,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:15.175100341 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:15.179100541 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:32:15.183100739 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:47.452314202 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,12 +335,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +355,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1256,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:47.456314396 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1642/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:47.456314396 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1588/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:06.406336826 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1588/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:06.410337019 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1588/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:06.414337212 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1588/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:06.414337212 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1157/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:12.769043308 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1157/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:12.773043508 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1157/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:34:12.777043708 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node paramList=paramList();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 409, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1017/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:13.979041053 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -406,8 +390,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1017/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:13.983041251 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1017/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:13.983041251 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_222/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:20:20.815992965 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 805, 
          "faulty": "Node valueToCombine=ll;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_619/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:25.393640988 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_619/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:25.397641184 -0500\n@@ -802,15 +802,15 @@\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n-      Node valueToCombine = ll;\n+      int index = -1;\n+\tNode valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_619/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:25.397641184 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:20.954440546 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:20.958440749 -0500\n@@ -804,14 +804,10 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1092/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:20.962440951 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1557/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:42.569186738 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1557/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:42.569186738 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:58.448843373 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:58.452843565 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n@@ -806,7 +806,8 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n+        StringBuilder builder = new StringBuilder();\n+\t\treplacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:34.699700230 -0500\n@@ -335,12 +335,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +355,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1256,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1626/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:34.703700421 -0500\n@@ -797,27 +797,20 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n+        return null;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1503/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:00.143136136 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,16 +340,7 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n+    int start = 0;\n \n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n@@ -1268,8 +1259,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1503/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:00.147136331 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1503/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:00.151136523 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "for (n=first, n2=node2.first; res == null && n != null; n=n.next, n2=n2.next) {\n  if (node2 == null) {\n    throw new IllegalStateException();\n  }\n  res=n.checkTreeEqualsImpl(n2);\n  if (res != null) {\n    return res;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_163/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:19:23.149295877 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_163/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:19:23.153296064 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        int start = 0;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -816,7 +815,7 @@\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         reportCodeChange();\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_163/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:19:23.157296251 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_216/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:20:15.251732766 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_216/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:20:15.255732954 -0500\n@@ -809,10 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n+        int type = n.getType();\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:08.634444259 -0500\n@@ -351,14 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:08.638444451 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1591/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:08.638444451 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1125/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:45.503677117 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1125/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:45.503677117 -0500\n@@ -804,14 +804,11 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1125/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:45.507677318 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_739/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:07.962688670 -0500\n@@ -340,17 +340,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -359,14 +348,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1249,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_739/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:07.966688874 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_605/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:16.005180599 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_605/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:16.009180795 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_605/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:16.013180991 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:29.166854936 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:29.170855138 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:29.174855340 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:33:29.174855340 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_527/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:06.641756789 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_527/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:06.645756988 -0500\n@@ -809,15 +809,13 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:19.384353860 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:19.388354057 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:35:19.388354057 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1383/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:24.286481718 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1383/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:24.290481914 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1142, 
          "faulty": "return n;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_75/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:17:56.737252121 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_75/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:17:56.741252308 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n@@ -1138,8 +1137,10 @@\n         return n;\n \n       default:\n-        // assert, this should cover all consts\n-        return n;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn n;\n+\t\t}\n     }\n \n     Node newNode = NodeUtil.booleanNode(result);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_644/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:44.622581956 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,17 +340,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -359,14 +348,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1249,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_644/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:44.626582153 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_644/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:44.626582153 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_727/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:57.054132363 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_727/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:57.054132363 -0500\n@@ -249,7 +249,10 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getLastChild());\n+\t\t}\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -805,15 +808,14 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n+        int index = -1;\n+\t\t// New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_727/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:57.058132567 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_400/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:11.211957745 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_400/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:11.211957745 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_400/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:23:11.215957931 -0500\n@@ -1459,7 +1459,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_436/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:45.585694019 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_436/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:45.589694222 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_436/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:23:45.593694424 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:01.257443514 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:01.261443717 -0500\n@@ -803,14 +803,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:01.265443921 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_814/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:18.586253448 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,17 +340,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -359,14 +348,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1249,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_814/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:18.590253649 -0500\n@@ -248,9 +248,12 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn;\n+\t\t}\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +808,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_814/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:18.590253649 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_534/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:11.818013789 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_534/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:11.822013987 -0500\n@@ -797,8 +797,6 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_722/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:50.681806604 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_722/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:50.685806808 -0500\n@@ -804,7 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n+      int type = n.getType();\n+\tif (replacement == null) {\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_722/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:50.685806808 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_882/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:15.725112245 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_882/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:15.729112449 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        ;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +803,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.PARAM_LIST);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_455/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:02.442545433 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_455/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:02.446545635 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_455/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:24:02.446545635 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_737/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:06.750626939 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_737/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:06.750626939 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_737/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:06.754627143 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 127, 
          "faulty": "return \"parenthesized\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:55.200163810 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:55.204164011 -0500\n@@ -806,11 +806,9 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:55.208164212 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:33:55.208164212 -0500\n@@ -124,7 +124,7 @@\n         case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n \n         case INCRDECR_PROP:      return \"incrdecr\";\n-        case PARENTHESIZED_PROP: return \"parenthesized\";\n+        case PARENTHESIZED_PROP: return null;\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:02.744353112 -0500\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:02.744353112 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1432/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:02.748353306 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node paramList=paramList();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_985/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:45.889645198 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_985/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:45.893645397 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_985/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:45.897645597 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1511/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:07.027469223 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1511/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:07.027469223 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_848/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:47.167680398 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_848/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:47.171680597 -0500\n@@ -811,7 +811,8 @@\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_848/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:47.171680597 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_548/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:22.230529984 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_548/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:22.234530183 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:27.112735735 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:35:27.116735933 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:35:27.120736130 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1411/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:46.103544084 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1411/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:46.103544084 -0500\n@@ -803,14 +803,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1411/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:46.107544280 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_566/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:39.635390582 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_566/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:39.639390779 -0500\n@@ -809,13 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_711/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:42.117381260 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_711/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:42.121381455 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,14 +806,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_711/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:42.121381455 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1193/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:43.258562992 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1193/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:43.262563191 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1193/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:43.262563191 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_624/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:28.845810113 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_624/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:28.849810308 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_820/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:23.782513484 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_820/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:23.786513684 -0500\n@@ -809,9 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_820/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:23.790513884 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_291/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:29.835219824 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,7 +338,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n+    int index = -1;\n+\t// return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n     }\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_500/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:44.320645442 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_500/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:44.324645642 -0500\n@@ -805,8 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_500/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:24:44.328645843 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_659/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:56.423158169 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_659/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:56.427158364 -0500\n@@ -250,7 +250,10 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn;\n+\t\t}\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,19 +808,17 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_659/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:56.427158364 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:12.774643856 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:12.774643856 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n@@ -842,7 +838,7 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      return null;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:12.778644049 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1597/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:12.778644049 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_150/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:19:11.304741770 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_150/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:19:11.308741956 -0500\n@@ -797,7 +797,8 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n+\tPreconditions.checkState(left.getChildCount() == 2);\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:16.955189220 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:16.959189416 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:16.959189416 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1302/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:36:16.959189416 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_875/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:09.504796063 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_875/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:09.508796267 -0500\n@@ -805,13 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_875/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:09.508796267 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_330/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:08.181012158 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,7 +338,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n+    int index = -1;\n+\t// return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n     }\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_330/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:22:08.185012344 -0500\n@@ -250,7 +250,7 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        int start = 0;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:31.579549959 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:31.579549959 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:31.583550153 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1621/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:31.583550153 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 378, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:48.492364262 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -375,7 +365,8 @@\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    StringBuilder builder = new StringBuilder();\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n@@ -1268,8 +1259,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:48.496364455 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:48.500364647 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1644/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:48.500364647 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node paramList=paramList();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_990/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:50.097854752 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_990/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:50.101854951 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,17 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n+        int start = 0;\n+\t\treplacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_990/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:50.101854951 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_629/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:32.878007545 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_629/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:32.882007741 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_629/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:32.882007741 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:36.760906289 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:36.768906676 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n@@ -842,7 +838,7 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      return null;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1549/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:36.768906676 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1152/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:08.076808701 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1152/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:08.080808900 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1152/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:08.084809102 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1456/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:23.893379831 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1456/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:23.897380025 -0500\n@@ -805,20 +805,8 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_416/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:27.876795398 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_416/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:27.880795602 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_416/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:23:27.884795805 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1236/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:18.340302240 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1236/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:18.344302436 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1236/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:35:18.348302634 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:30.734795921 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:30.738796117 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:30.738796117 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1392/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:30.742796313 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "return toString(true,true,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_768/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:33.255972356 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_768/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:33.255972356 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_768/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:33.259972557 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1378/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:21.194330986 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1378/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:21.198331181 -0500\n@@ -803,14 +803,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1378/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:21.202331376 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1378/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:21.202331376 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_267/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:07.258164403 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_267/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:21:07.258164403 -0500\n@@ -813,9 +813,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_267/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:21:07.262164591 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_523/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:03.481599758 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_523/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:03.485599957 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_523/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:25:03.489600156 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_396/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:07.971806339 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_396/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:07.975806527 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:30.182906154 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1106/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:30.186906356 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:34.122584976 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:34.126585176 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:06.020705833 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,10 +338,7 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    int start = 0;\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:06.024706034 -0500\n@@ -809,13 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:06.024706034 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:38.807898055 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1631/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:38.811898247 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_854/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:51.255883858 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_854/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:51.259884057 -0500\n@@ -249,7 +249,7 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        int type = n.getType();\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_854/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:51.259884057 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:30.523499094 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:30.527499288 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:30.531499480 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:30.531499480 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1535/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:25.816377603 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,21 +354,7 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n+    int index = -1;\n \n     try {\n       return Double.parseDouble(s);\n@@ -1268,8 +1257,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1535/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:25.820377797 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1372/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:17.922171432 -0500\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1372/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:17.926171627 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_879/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:12.848966112 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_879/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:12.848966112 -0500\n@@ -800,18 +800,15 @@\n       Preconditions.checkState(left.getChildCount() == 2);\n \n       Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_879/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:12.852966314 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:43.325535524 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:43.325535524 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1319/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:30.895872811 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1319/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:30.899873007 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1319/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:30.899873007 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_786/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:51.260881223 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_786/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:51.264881423 -0500\n@@ -188,12 +188,15 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             {\n+\t\t\t\tint c = 0;\n+\t\t\t\treturn \"ADD\";\n+\t\t\t}\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1397/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:34.214965424 -0500\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1397/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:34.214965424 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1397/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:34.218965620 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_180/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:19:38.962035547 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_636/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:39.150314433 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_636/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:39.150314433 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:43.474329051 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1482/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:43.478329246 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_906/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:36.294154310 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_906/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:36.298154511 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_906/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:36.298154511 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_906/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:30:36.298154511 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.NAME;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1649/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:52.804571791 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1649/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:52.804571791 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1649/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:52.808571983 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1559/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:43.617237334 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1559/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:43.621237527 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1559/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:43.625237719 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1559/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:43.625237719 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_602/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:13.845074579 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_602/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:13.849074775 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,14 +806,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_602/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:13.849074775 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:38.242075532 -0500\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:38.246075726 -0500\n@@ -804,21 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1476/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:38.246075726 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_479/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:22.779567824 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_479/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:22.783568025 -0500\n@@ -806,11 +806,9 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_910/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:39.362309308 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_910/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:39.362309308 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_910/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:39.366309510 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:58.797969888 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:58.797969888 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:58.801970081 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1577/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:58.805970274 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 378, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:54.683611697 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -375,7 +365,8 @@\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    StringBuilder builder = new StringBuilder();\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n@@ -1268,8 +1259,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:54.687611895 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:54.687611895 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1718/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:54.691612096 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:59.915389958 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:59.919390155 -0500\n@@ -805,13 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:59.923390355 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:34:59.923390355 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1026/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:21.743428778 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1026/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:21.747428982 -0500\n@@ -800,17 +800,14 @@\n       Preconditions.checkState(left.getChildCount() == 2);\n \n       Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1026/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:21.747428982 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:34.038104261 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:34.042104460 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,9 +806,9 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -813,9 +816,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:34.042104460 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:23.764278439 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:23.768278632 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n@@ -842,7 +838,7 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      return null;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:17.328252192 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:17.328252192 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1234/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:35:17.332252390 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_125/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:18:47.195613748 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_125/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:18:47.195613748 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        int start = 0;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -816,7 +816,7 @@\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         reportCodeChange();\n       }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1418/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:51.183791185 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1418/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:51.187791379 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1418/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:51.187791379 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_240/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:20:40.160897516 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_240/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:20:40.164897704 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:02.684538837 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:02.688539038 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1145/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:02.688539038 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1586/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:05.370286867 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1586/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:05.374287060 -0500\n@@ -804,21 +804,7 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1142, 
          "faulty": "return n;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_344/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:21.429631351 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_344/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:22:21.433631537 -0500\n@@ -1138,8 +1138,10 @@\n         return n;\n \n       default:\n-        // assert, this should cover all consts\n-        return n;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn n;\n+\t\t}\n     }\n \n     Node newNode = NodeUtil.booleanNode(result);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_377/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:50.999013214 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_377/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:22:50.999013214 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:34.611129244 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:34.611129244 -0500\n@@ -805,19 +805,16 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:34.615129444 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_347/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:23.449725761 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_312/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:49.864156040 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_312/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:21:49.868156226 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_312/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:21:49.868156226 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:16.906121879 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:16.910122074 -0500\n@@ -803,14 +803,10 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:16.914122270 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1448/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:16.497020942 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1448/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:16.501021136 -0500\n@@ -805,20 +805,8 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1448/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:16.505021330 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1448/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:16.505021330 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_530/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:08.649856522 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_530/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:25:08.653856721 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:53.413710131 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:53.413710131 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 409, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1306/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:20.191348003 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -406,8 +401,11 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE\n+\t\t\t\t\t: TernaryValue.FALSE;\n+\t\t}\n     }\n   }\n \n@@ -1268,8 +1266,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1306/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:20.195348199 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1306/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:20.199348394 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1306/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:36:20.199348394 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1472/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:36.205976853 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1472/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:36.209977048 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1472/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:36.209977048 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_783/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:48.660750210 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,17 +340,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -359,14 +348,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1249,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_783/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:48.664750412 -0500\n@@ -250,7 +250,10 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn;\n+\t\t}\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +808,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_783/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:48.668750613 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_795/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:59.861314015 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_795/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:59.865314215 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,14 +806,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_795/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:59.869314417 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_679/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:13.171974466 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_679/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:13.175974660 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_679/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:13.179974856 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_317/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:54.640379283 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_317/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:21:54.644379469 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_802/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:06.377641372 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_802/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:06.381641573 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -816,7 +815,8 @@\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n+        int index = -1;\n+\t\tn.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_802/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:06.385641774 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_802/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:29:06.385641774 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1334/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:41.648399357 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,7 +338,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n+    int start = 0;\n+\t// return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n     }\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1334/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:41.652399553 -0500\n@@ -803,14 +803,10 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1334/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:41.652399553 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1334/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:36:41.656399749 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1376/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:20.146279887 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1376/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:20.150280082 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1376/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:20.150280082 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1684/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:24.538105195 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1684/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:24.542105395 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_243/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:20:42.228994214 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_243/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:20:42.232994400 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:14.280913374 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:14.284913568 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int start = 0;\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1724/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:59.795866468 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,12 +338,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +358,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1259,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1724/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:59.799866669 -0500\n@@ -249,7 +249,10 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        {\n+\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\ttryConvertToNumber(n.getLastChild());\n+\t\t}\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -804,13 +807,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1724/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:59.803866867 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1724/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:59.803866867 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:58.724157759 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:58.728157953 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:58.732158147 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_459/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:04.606654471 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_459/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:04.606654471 -0500\n@@ -805,12 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n+        int start = 0;\n+\t\tvalueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1111/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:33.587077671 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1111/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:33.591077872 -0500\n@@ -809,13 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1111/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:33.591077872 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node paramList=paramList();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1042/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:35.784147049 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +354,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1042/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:35.788147254 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1042/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:35.788147254 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_692/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:24.476524458 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_692/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:24.480524652 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,16 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n+        int start = 0;\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_692/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:24.480524652 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1337/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:43.916510349 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1337/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:43.920510545 -0500\n@@ -805,19 +805,18 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n+        int start = 0;\n+\t\treportCodeChange();\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_642/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:43.438524088 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_642/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:43.442524285 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_642/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:43.442524285 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_597/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:09.308851819 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_597/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:09.312852015 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_597/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:09.312852015 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_564/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:38.495334293 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_564/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:38.499334492 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_974/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:36.089156543 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +354,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_974/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:36.093156743 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_974/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:36.097156943 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_921/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:48.614776067 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_921/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:48.618776269 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        ;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +803,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_921/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:48.622776470 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_836/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:36.559151696 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_836/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:36.563151897 -0500\n@@ -800,17 +800,15 @@\n       Preconditions.checkState(left.getChildCount() == 2);\n \n       Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n+      StringBuilder builder = new StringBuilder();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_836/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:36.563151897 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1159/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:13.793094482 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1159/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:13.797094682 -0500\n@@ -805,13 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1159/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:13.797094682 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1465/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:30.229687134 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1465/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:30.233687327 -0500\n@@ -188,12 +188,15 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              {\n+\t\t\t\tint c = 0;\n+\t\t\t\treturn \"GT\";\n+\t\t\t}\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1465/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:30.233687327 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_518/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:59.125383131 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_518/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:59.129383330 -0500\n@@ -806,11 +806,9 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_950/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:14.620082897 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_950/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:14.624083099 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_677/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:11.859910581 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_677/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:11.863910777 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:32.627600436 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:32.631600630 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:32.631600630 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:32.635600822 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_689/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:22.148411251 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_689/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:22.152411445 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_689/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:22.156411641 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1394/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:31.930854182 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1394/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:31.934854377 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1446/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:15.460970655 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1446/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:15.460970655 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1446/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:15.464970849 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1286/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:01.882448878 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1286/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:01.886449075 -0500\n@@ -804,18 +804,11 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n+        StringBuilder builder = new StringBuilder();\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1286/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:01.886449075 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 371, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_924/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:50.658879056 -0500\n@@ -359,16 +359,8 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_924/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:50.662879256 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_924/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:50.662879256 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "for (n=first, n2=node2.first; res == null && n != null; n=n.next, n2=n2.next) {\n  if (node2 == null) {\n    throw new IllegalStateException();\n  }\n  res=n.checkTreeEqualsImpl(n2);\n  if (res != null) {\n    return res;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_145/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:19:06.504517193 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        int start = 0;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -816,7 +815,7 @@\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         reportCodeChange();\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_145/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:19:06.508517381 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_675/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:10.835860714 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_675/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:10.839860907 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_675/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:10.843861102 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 127, 
          "faulty": "return \"parenthesized\";", 
          "type": "Delete", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1374/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:18.958221957 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1374/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:18.962222152 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1374/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:18.966222346 -0500\n@@ -124,7 +124,7 @@\n         case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n \n         case INCRDECR_PROP:      return \"incrdecr\";\n-        case PARENTHESIZED_PROP: return \"parenthesized\";\n+        case PARENTHESIZED_PROP: ;\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:56.232215556 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:56.236215757 -0500\n@@ -805,17 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1138/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:56.236215757 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_616/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:23.213534139 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_616/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:23.217534335 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_616/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:23.221534531 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:37.512196880 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:37.516197076 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:37.520197272 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:18.514920529 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:18.514920529 -0500\n@@ -804,21 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n@@ -842,7 +827,7 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      return null;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 371, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_684/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:17.324176567 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,16 +362,9 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      StringBuilder builder = new StringBuilder();\n+\treturn Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_684/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:17.328176763 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_515/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:57.153284998 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_515/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:57.157285197 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_515/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:24:57.161285396 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_167/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:19:26.317444080 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_167/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:19:26.317444080 -0500\n@@ -817,7 +817,7 @@\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n+        int start = 0;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_167/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:19:26.321444266 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 395, 
          "faulty": "switch (c) {\ncase '\\u000B':\n  return TernaryValue.UNKNOWN;\ncase ' ':\ncase '\\n':\ncase '\\r':\ncase '\\t':\ncase '\\u00A0':\ncase '\\u000C':\ncase '\\u2028':\ncase '\\u2029':\ncase '\\uFEFF':\nreturn TernaryValue.TRUE;\ndefault :\nreturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n}", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "NodeMismatch diff=checkTreeEqualsImpl(node2);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_350/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:25.629827648 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -392,7 +395,8 @@\n    * Copied from Rhino's ScriptRuntime\n    */\n   public static TernaryValue isStrWhiteSpaceChar(int c) {\n-    switch (c) {\n+    final String PARAM_NAME = \"jscomp_throw_param\";\n+\tswitch (c) {\n       case '\\u000B': // <VT>\n         return TernaryValue.UNKNOWN;  // IE says \"no\", ECMAScript says \"yes\"\n       case ' ': // <SP>\n@@ -1268,8 +1272,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_350/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:22:25.633827834 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        NodeMismatch diff = checkTreeEqualsImpl(node2);\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_649/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:47.682731470 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_649/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:47.682731470 -0500\n@@ -249,7 +249,7 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        ;\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -805,7 +805,7 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n+        int type = n.getType();\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_649/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:47.686731664 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 378, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1707/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:45.991178046 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -375,7 +365,8 @@\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    StringBuilder builder = new StringBuilder();\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n@@ -1268,8 +1259,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1707/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:45.995178247 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1707/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:45.999178445 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1555/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:41.261123588 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1555/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:41.265123779 -0500\n@@ -817,7 +817,6 @@\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1555/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:41.265123779 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1555/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:41.269123973 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1275/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:51.765951219 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1275/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:51.769951416 -0500\n@@ -811,8 +811,6 @@\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1275/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:35:51.769951416 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_310/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:48.836107988 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_310/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:21:48.840108174 -0500\n@@ -813,9 +813,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:08.337703810 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:08.341704005 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1361/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:08.341704005 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:47.123593708 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:47.127593902 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:47.127593902 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_457/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:03.446596029 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:53.882833119 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:53.886833315 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:53.886833315 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:53.890833507 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1330/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:38.548247606 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1330/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:38.552247802 -0500\n@@ -249,7 +249,7 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        ;\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1330/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:38.552247802 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_752/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:19.123256129 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_752/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:19.127256331 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_752/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:19.127256331 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_10/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:16:51.050175850 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1164/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:17.037256537 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -351,22 +355,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1256,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1164/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:17.041256737 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,12 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1164/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:17.041256737 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:22.923489251 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:22.927489458 -0500\n@@ -250,7 +250,7 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        ;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_446/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:55.210180597 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_446/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:55.214180799 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1201/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:49.738884982 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1201/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:49.742885181 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1201/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:49.742885181 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1201/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:34:49.746885380 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1461/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:27.997578895 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1461/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:28.001579089 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 127, 
          "faulty": "return \"parenthesized\";", 
          "type": "Delete", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:19.101359598 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,10 +338,7 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    int start = 0;\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:19.101359598 -0500\n@@ -809,13 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:19.105359797 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:34:19.105359797 -0500\n@@ -124,7 +124,7 @@\n         case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n \n         case INCRDECR_PROP:      return \"incrdecr\";\n-        case PARENTHESIZED_PROP: return \"parenthesized\";\n+        case PARENTHESIZED_PROP: ;\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_69/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:17:52.021031326 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_69/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:17:52.025031513 -0500\n@@ -806,11 +806,9 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_919/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:47.446717196 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_919/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:47.450717397 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_919/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:47.450717397 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:22.230381495 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:22.234381690 -0500\n@@ -805,19 +805,7 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n+        return null;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:22.234381690 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1634/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:41.028004945 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1634/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:41.032005139 -0500\n@@ -797,20 +797,17 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n+        int index = -1;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1634/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:41.032005139 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1634/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:41.036005332 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:59.689281491 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:59.693281686 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:59.693281686 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:36:59.693281686 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_595/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:08.276801115 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_595/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:08.280801313 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,12 +808,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_595/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:08.280801313 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:45.055493094 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:45.059493290 -0500\n@@ -805,17 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node paramList=paramList();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1045/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:37.832251599 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +354,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1045/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:37.836251804 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -800,22 +803,16 @@\n       Preconditions.checkState(left.getChildCount() == 2);\n \n       Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1045/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:37.836251804 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1255/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:34.433097071 -0500\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1255/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:34.437097268 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1006/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:05.370613980 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1006/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:05.374614179 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "for (n=first, n2=node2.first; res == null && n != null; n=n.next, n2=n2.next) {\n  if (node2 == null) {\n    throw new IllegalStateException();\n  }\n  res=n.checkTreeEqualsImpl(n2);\n  if (res != null) {\n    return res;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_269/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:08.462220692 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_269/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:21:08.466220880 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -816,7 +815,7 @@\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         reportCodeChange();\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_269/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:21:08.470221066 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1518/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:12.443731183 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1518/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:12.447731376 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1518/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:12.447731376 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "case SUB:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1060/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:51.524949153 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1060/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:51.528949355 -0500\n@@ -250,7 +250,7 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        ;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1060/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:51.532949559 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:09.686494981 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:09.690495174 -0500\n@@ -805,20 +805,8 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:09.694495368 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:09.694495368 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1486/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:47.266512741 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1486/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:47.270512934 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1486/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:47.270512934 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:28.534688738 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:28.538688933 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -804,10 +807,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:28.538688933 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1389/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:28.542689128 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:24.374613215 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +354,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:24.378613417 -0500\n@@ -803,19 +803,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:24.378613417 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1096/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:33:24.382613619 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1492/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:51.534719433 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1492/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:51.538719628 -0500\n@@ -804,21 +804,7 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:43.875435678 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +354,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:43.875435678 -0500\n@@ -805,17 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:43.879435872 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1407/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:43.879435872 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1055/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:47.452741953 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1055/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:47.456742156 -0500\n@@ -797,20 +797,15 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1055/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:47.460742360 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:55.753164069 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:55.757164271 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:55.757164271 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_448/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:56.242232700 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_448/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:56.246232901 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_448/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:23:56.250233103 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_506/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:49.368897246 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_506/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:49.372897444 -0500\n@@ -797,20 +797,16 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1474/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:37.222026098 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1474/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:37.226026291 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1474/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:37.230026485 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_475/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:19.127384591 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_475/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:19.131384792 -0500\n@@ -797,20 +797,16 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:55.613082319 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:55.617082515 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:55.621082710 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:36:55.621082710 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_893/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:24.921578799 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_893/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:24.925579002 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_893/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:24.929579205 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_639/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:41.450426905 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_639/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:41.454427100 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_639/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:41.454427100 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:45.397637618 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:45.401637815 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -804,10 +807,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1268/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:35:45.401637815 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1463/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:29.045629719 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1463/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:29.045629719 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1463/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:29.049629913 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1463/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:29.049629913 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_263/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:04.262024332 -0500\n@@ -335,7 +335,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n+    int index = -1;\n+\t// return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n     }\n@@ -1268,8 +1269,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_156/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:19:16.772997589 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_156/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:19:16.772997589 -0500\n@@ -804,7 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n+      int start = 0;\n+\tif (replacement == null) {\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_661/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:57.451208324 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_661/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:57.455208519 -0500\n@@ -250,7 +250,10 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn;\n+\t\t}\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +808,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_661/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:57.455208519 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1603/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:17.502871756 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1603/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:17.506871948 -0500\n@@ -804,16 +804,13 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n@@ -842,7 +839,7 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      return null;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1544/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:32.720711160 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1544/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:32.720711160 -0500\n@@ -804,21 +804,7 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1544/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:32.724711354 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1544/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:32.724711354 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:51.372875049 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:51.372875049 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1345/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:51.376875244 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "case PARAM_LIST:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1040/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:34.492081065 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1040/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:34.496081269 -0500\n@@ -803,19 +803,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1040/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:34.500081473 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_864/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:58.708254352 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_864/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:58.708254352 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_864/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:58.712254551 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_864/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:29:58.712254551 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1296/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:11.458919407 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1296/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:11.462919603 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              return \"SUB\";\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1296/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:36:11.466919799 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_612/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:21.133432159 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_612/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:21.133432159 -0500\n@@ -250,7 +250,10 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn;\n+\t\t}\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +808,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_612/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:21.137432355 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:56.171204258 -0500\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:56.171204258 -0500\n@@ -803,19 +803,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:34:56.175204458 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_822/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:24.802564498 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_822/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:24.806564698 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_33/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:17:15.263310085 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_33/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:17:15.267310270 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1063/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:53.709060196 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1063/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:53.709060196 -0500\n@@ -809,9 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1063/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:53.713060400 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node paramList=paramList();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_961/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:23.684536753 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_961/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:23.688536952 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,9 +806,9 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -813,9 +816,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_961/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:23.692537152 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_756/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:22.151409809 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_756/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:22.155410012 -0500\n@@ -809,13 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_756/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:22.159410215 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:03.170180769 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:03.174180962 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:03.174180962 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1583/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:03.178181155 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:25.310531629 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:25.314531823 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1385/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:25.314531823 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 378, 
          "faulty": "int start=0;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:23.066031437 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,12 +335,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +355,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -375,7 +363,8 @@\n   }\n \n   static String trimJsWhiteSpace(String s) {\n-    int start = 0;\n+    StringBuilder builder = new StringBuilder();\n+\tint start = 0;\n     int end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n@@ -1268,8 +1257,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:23.070031638 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:23.070031638 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1682/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:23.074031838 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1468/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:32.253785271 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1468/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:32.257785465 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1468/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:32.261785660 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 337, 
          "faulty": "String s=trimJsWhiteSpace(rawJsString);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1162/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:15.837196602 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -334,13 +337,15 @@\n       return null;\n     }\n \n-    String s = trimJsWhiteSpace(rawJsString);\n+    int start = 0;\n+\tString s = trimJsWhiteSpace(rawJsString);\n     // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +364,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1265,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1162/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:15.841196802 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1162/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:15.841196802 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_745/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:13.222956336 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,13 +359,7 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     try {\n       return Double.parseDouble(s);\n@@ -1268,8 +1262,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_745/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:13.226956540 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        ;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,14 +803,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_745/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:13.226956540 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1368/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:15.590057688 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1368/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:15.594057883 -0500\n@@ -797,20 +797,14 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1368/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:15.598058078 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_998/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:58.154255496 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_998/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:58.158255695 -0500\n@@ -805,13 +805,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_998/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:58.162255893 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_360/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:33.914214810 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_360/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:22:33.914214810 -0500\n@@ -813,9 +813,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_360/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:22:33.918214996 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             return null;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1579/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:59.806018512 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1579/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:59.810018705 -0500\n@@ -804,21 +804,7 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     return n;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "NodeMismatch res=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_942/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:08.275764743 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_942/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:08.279764944 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        ;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +803,16 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_942/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:08.283765146 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 820, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_841/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:40.171331840 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_841/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:40.175332038 -0500\n@@ -805,19 +805,16 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n-        reportCodeChange();\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_841/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:40.179332239 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_511/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:53.441100167 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_511/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:53.445100366 -0500\n@@ -808,17 +808,6 @@\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_511/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:24:53.449100565 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:08.049305177 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:08.053305369 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:08.053305369 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1666/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:08.057305562 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_762/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:27.619687022 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_762/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:27.623687225 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,14 +806,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_762/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:27.627687428 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_540/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:17.014271521 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_540/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:17.018271719 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_540/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:25:17.022271918 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1204/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:51.850989855 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1204/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:51.854990054 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:35.485148971 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:35.489149167 -0500\n@@ -805,18 +805,16 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n+        int start = 0;\n         reportCodeChange();\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:35:35.489149167 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:35:35.493149366 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_862/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:57.532195917 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_862/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:57.532195917 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_862/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:57.536196116 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1528/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:21.732180229 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1528/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:21.736180423 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1528/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:21.736180423 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1528/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:21.740180617 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:44.624178071 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:44.628178262 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n@@ -842,7 +838,7 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      return null;\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:44.632178456 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1638/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:44.632178456 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_824/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:25.970622901 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_824/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:25.974623101 -0500\n@@ -800,17 +800,13 @@\n       Preconditions.checkState(left.getChildCount() == 2);\n \n       Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_824/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:25.974623101 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1715/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:52.231489423 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1715/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:52.231489423 -0500\n@@ -249,7 +249,10 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        {\n+\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\ttryConvertToNumber(n.getLastChild());\n+\t\t}\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -804,10 +807,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1715/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:52.235489623 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 805, 
          "faulty": "Node valueToCombine=ll;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_699/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:30.000792955 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_699/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:30.116798591 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -802,8 +805,10 @@\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n-      Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      int start = 0;\n+\tNode valueToCombine = ll;\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_651/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:48.818786958 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_473/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:24:17.971326558 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_473/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:24:17.975326759 -0500\n@@ -805,20 +805,8 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_473/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:24:17.975326759 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1441/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:12.080806566 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1441/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:12.080806566 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1189/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:40.050403463 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,10 +338,7 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    int start = 0;\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1189/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:40.054403662 -0500\n@@ -809,13 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n@@ -842,7 +838,8 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      int index = -1;\n+\treturn tryFoldLeftChildOp(node, left, right);\n     }\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1189/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:40.058403861 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_716/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:45.201530879 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_716/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:45.205531073 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,7 +806,8 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_716/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:45.205531073 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_982/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:43.705536373 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_982/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:43.709536573 -0500\n@@ -803,14 +803,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_982/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:43.713536772 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1100/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:26.762733704 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1100/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:26.766733905 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1100/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:26.766733905 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_948/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:13.600031772 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_948/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:13.604031973 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_948/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:13.604031973 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1324/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:34.472048002 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1324/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:34.472048002 -0500\n@@ -803,14 +803,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1324/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:34.476048198 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1324/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:36:34.476048198 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:02.211236212 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:02.215236407 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:02.215236407 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:02.219236600 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_610/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:20.117382333 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_610/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:20.117382333 -0500\n@@ -249,7 +249,7 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        ;\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_610/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:20.121382529 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1195/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:44.278613699 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1195/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:44.282613897 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1195/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:44.286614096 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:31.514973284 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:31.518973487 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,15 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1108/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:31.522973687 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:58.719330648 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:58.723330848 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,13 +808,12 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:58.723330848 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_112/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:18:34.563022603 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_112/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:18:34.567022788 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_73/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:17:55.389189011 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_73/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:17:55.389189011 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:27.152442160 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:27.156442353 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -811,7 +811,8 @@\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1537/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:27.156442353 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_859/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:55.344087165 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_859/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:55.348087364 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,9 +806,9 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -813,9 +816,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_859/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:55.348087364 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_838/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:37.859216548 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_838/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:37.859216548 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,9 +806,9 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_838/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:37.863216746 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:27.786785352 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,7 +351,8 @@\n       }\n     }\n \n-    if (s.length() > 3\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n         && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:27.790785554 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1102/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:27.790785554 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:33.431997058 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:33.435997255 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:02.135500016 -0500\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:02.139500216 -0500\n@@ -803,9 +803,9 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -813,9 +813,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:35:02.139500216 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1219/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:35:02.143500414 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_543/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:19.166378188 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_543/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:25:19.166378188 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_358/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:32.878166391 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_358/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:22:32.882166579 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node paramList=paramList();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1142, 
          "faulty": "return n;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1012/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:10.882887519 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1012/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:10.886887718 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,19 +806,17 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n+        int start = 0;\n+\t\treplacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n@@ -1138,8 +1139,10 @@\n         return n;\n \n       default:\n-        // assert, this should cover all consts\n-        return n;\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn n;\n+\t\t}\n     }\n \n     Node newNode = NodeUtil.booleanNode(result);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1012/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:10.886887718 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "for (n=first, n2=node2.first; res == null && n != null; n=n.next, n2=n2.next) {\n  if (node2 == null) {\n    throw new IllegalStateException();\n  }\n  res=n.checkTreeEqualsImpl(n2);\n  if (res != null) {\n    return res;\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_210/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:20:09.947484719 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        int start = 0;\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,8 +805,8 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n+        int type = n.getType();\n+\t\treplacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_210/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:20:09.951484905 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1601/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:16.342815847 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,12 +338,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +358,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1259,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1601/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:16.346816038 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1601/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:16.346816038 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1601/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:16.350816232 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_713/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:43.153431528 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tStringBuilder builder = new StringBuilder();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_713/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:43.157431721 -0500\n@@ -249,7 +249,10 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getLastChild());\n+\t\t}\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -805,12 +808,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_713/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:43.161431915 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1279/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:55.278124064 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1279/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:55.282124261 -0500\n@@ -803,14 +803,10 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1279/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:35:55.286124457 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:55.307991708 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -351,22 +349,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1250,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:37:55.311991904 -0500\n@@ -804,18 +804,11 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:55.315992098 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:44.921300284 -0500\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -1268,8 +1269,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:44.921300284 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1561/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:44.925300477 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_622/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:27.841760932 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_622/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:27.845761128 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_622/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:27.849761324 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1166/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:18.049307074 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1166/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:18.053307274 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_666/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:02.203440084 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_666/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:02.207440279 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 819, 
          "faulty": "n.replaceChild(right,replacement);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1349/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:54.429024449 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1349/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:54.433024644 -0500\n@@ -805,18 +805,15 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n         replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1349/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:54.433024644 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1494/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:52.558769017 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1494/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:52.562769209 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1494/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:52.562769209 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_582/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:55.664180799 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_582/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:55.668180996 -0500\n@@ -797,8 +797,6 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n@@ -809,8 +807,6 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1400/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:37:36.423072944 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1400/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:37:36.427073140 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1400/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:37:36.427073140 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:49.297511504 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:49.301511698 -0500\n@@ -804,21 +804,7 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:49.301511698 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1566/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:49.305511890 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1540/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:29.308546330 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1540/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:29.312546524 -0500\n@@ -804,21 +804,7 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1540/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:29.312546524 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 811, 
          "faulty": "if (replacement != null) {\n  left.removeChild(valueToCombine);\n  n.replaceChild(left,left.removeFirstChild());\n  replacement.copyInformationFromForTree(right);\n  n.replaceChild(right,replacement);\n  reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:11.431682242 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +340,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +360,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1261,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:11.435682435 -0500\n@@ -804,21 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n-      if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n-        n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n-        n.replaceChild(right, replacement);\n-        reportCodeChange();\n-      }\n     }\n \n     return n;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:11.435682435 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:11.439682628 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1551/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:37.992965786 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1551/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:37.996965979 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1551/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:38.000966173 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:31.014429473 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:31.014429473 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:31.018429673 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:31.018429673 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1142, 
          "faulty": "return n;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_852/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:50.211831913 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_852/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:50.215832112 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n@@ -1138,8 +1136,10 @@\n         return n;\n \n       default:\n-        // assert, this should cover all consts\n-        return n;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn n;\n+\t\t}\n     }\n \n     Node newNode = NodeUtil.booleanNode(result);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_852/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:50.219832310 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_697/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:27:28.972743001 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_697/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:27:28.976743197 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_697/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:27:28.980743391 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_134/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:18:55.820017293 -0500\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_134/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:18:55.824017480 -0500\n@@ -249,7 +249,7 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        ;\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1668/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:09.097355580 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1668/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:41:09.101355773 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1668/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:09.101355773 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1668/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:09.105355965 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_750/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:28:18.099204131 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_750/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:28:18.103204334 -0500\n@@ -250,7 +250,7 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        ;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_750/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:28:18.103204334 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 354, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_889/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:21.709415962 -0500\n@@ -351,22 +351,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1252,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_889/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:21.713416165 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -803,7 +806,8 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      StringBuilder builder = new StringBuilder();\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n@@ -813,9 +817,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_889/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:21.713416165 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1712/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:41:50.207388459 -0500\n@@ -340,17 +340,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -1268,8 +1257,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1712/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:41:50.211388657 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1712/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:41:50.211388657 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_277/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:17.126625743 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_277/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:21:17.130625931 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_934/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:00.403369374 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_934/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:00.407369575 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_934/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:00.411369776 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_393/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:05.819705775 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,10 +338,7 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_393/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:05.819705775 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_393/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:23:05.823705964 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:11.894937714 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1268,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1014/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:11.898937911 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:32:54.737112444 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:32:54.737112444 -0500\n@@ -250,7 +250,7 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        ;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1065/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:32:54.741112648 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_915/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:43.606523538 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_915/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:43.610523740 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 253, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:39:24.800328506 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:39:24.804328699 -0500\n@@ -250,7 +250,7 @@\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n         tryConvertToNumber(n.getLastChild());\n-        return;\n+        ;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n           return;\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:39:24.808328893 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:39:24.808328893 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:55.020678429 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1652/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:55.024678623 -0500\n@@ -797,7 +797,7 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n+      int index = -1;\n \n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 845, 
          "faulty": "return tryFoldLeftChildOp(node,left,right);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1489/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:49.474619678 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1489/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:38:49.478619871 -0500\n@@ -804,10 +804,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n@@ -842,7 +838,7 @@\n       if (result != node) {\n         return result;\n       }\n-      return tryFoldLeftChildOp(node, left, right);\n+      return null;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_646/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:45.650632193 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_646/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:45.650632193 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_646/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:26:45.654632388 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1241/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:35:21.548460835 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1241/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:35:21.552461032 -0500\n@@ -804,13 +804,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1241/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:35:21.556461230 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_826/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:29:27.298689286 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_826/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:29:27.302689486 -0500\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_826/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:29:27.302689486 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_826/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:29:27.306689686 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 800, 
          "faulty": "Preconditions.checkState(left.getChildCount() == 2);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_614/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:26:22.185483741 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_614/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:26:22.189483937 -0500\n@@ -797,25 +797,18 @@\n     // other values are converted to numbers elsewhere.\n     Double rightValObj = NodeUtil.getNumberValue(right);\n     if (rightValObj != null && left.getType() == opType) {\n-      Preconditions.checkState(left.getChildCount() == 2);\n-\n       Node ll = left.getFirstChild();\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 1142, 
          "faulty": "return n;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_884/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:16.749164251 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_884/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:16.749164251 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +808,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n@@ -1138,8 +1140,10 @@\n         return n;\n \n       default:\n-        // assert, this should cover all consts\n-        return n;\n+        {\n+\t\t\tint index = -1;\n+\t\t\treturn n;\n+\t\t}\n     }\n \n     Node newNode = NodeUtil.booleanNode(result);\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_884/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:16.753164453 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:49.611883434 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:49.615883635 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:49.619883836 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:46.072247775 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:46.076247969 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1640/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:46.076247969 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_306/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:45.623957846 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -1268,8 +1271,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_306/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:21:45.627958032 -0500\n@@ -806,7 +806,6 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n         // Remove the child that has been combined\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "Replace", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1609/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:21.727075319 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1609/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:21.731075513 -0500\n@@ -248,7 +248,7 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1609/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:40:21.735075704 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1609/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:40:21.735075704 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1212/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:57.539272122 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1212/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:57.543272321 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 251, 
          "faulty": "tryConvertToNumber(n.getChildAtIndex(1));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:36:23.643517320 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:36:23.647517516 -0500\n@@ -248,7 +248,10 @@\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.HOOK:\n-        tryConvertToNumber(n.getChildAtIndex(1));\n+        {\n+\t\t\tint index = -1;\n+\t\t\ttryConvertToNumber(n.getChildAtIndex(1));\n+\t\t}\n         tryConvertToNumber(n.getLastChild());\n         return;\n       case Token.NAME:\n@@ -804,13 +807,8 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1310/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:36:23.647517516 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1206/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:34:52.907042278 -0500\n@@ -317,7 +317,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1206/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:34:52.911042477 -0500\n@@ -809,8 +809,7 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1206/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:34:52.915042677 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1206/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:34:52.915042677 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 807, 
          "faulty": "if (replacement == null) {\n  valueToCombine=lr;\n  replacement=performArithmeticOp(opType,valueToCombine,right);\n}", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1613/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:40:24.963231244 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,11 +338,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +357,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1258,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1613/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:40:24.967231435 -0500\n@@ -249,7 +249,10 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        {\n+\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\ttryConvertToNumber(n.getLastChild());\n+\t\t}\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -804,10 +807,6 @@\n \n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n-      if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n-      }\n       if (replacement != null) {\n         // Remove the child that has been combined\n         left.removeChild(valueToCombine);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_966/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:28.648784965 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_966/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:28.652785167 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_420/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:30.924950391 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_420/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:23:30.928950595 -0500\n@@ -806,11 +806,9 @@\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_420/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:23:30.928950595 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              ;\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 818, 
          "faulty": "replacement.copyInformationFromForTree(right);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_282/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:21:21.218817042 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_282/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:21:21.222817230 -0500\n@@ -813,9 +813,6 @@\n         left.removeChild(valueToCombine);\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n-        // New \"-Infinity\" node need location info explicitly\n-        // added.\n-        replacement.copyInformationFromForTree(right);\n         n.replaceChild(right, replacement);\n         reportCodeChange();\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 252, 
          "faulty": "tryConvertToNumber(n.getLastChild());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1098/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:25.738682045 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1098/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:25.742682247 -0500\n@@ -249,7 +249,7 @@\n         return;\n       case Token.HOOK:\n         tryConvertToNumber(n.getChildAtIndex(1));\n-        tryConvertToNumber(n.getLastChild());\n+        ;\n         return;\n       case Token.NAME:\n         if (!NodeUtil.isUndefined(n)) {\n@@ -805,12 +805,10 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1098/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:25.742682247 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_379/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:22:52.007060319 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -335,7 +338,8 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n+    int index = -1;\n+\t// return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n       return 0.0;\n     }\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_379/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:22:52.011060508 -0500\n@@ -188,7 +188,10 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              {\n+\t\t\t\tint c = 0;\n+\t\t\t\treturn \"GT\";\n+\t\t\t}\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:38:22.365305701 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:38:22.369305894 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1454/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:38:22.373306088 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 806, 
          "faulty": "Node replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_546/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:25:21.202479064 -0500\n@@ -335,11 +335,6 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -359,14 +354,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1255,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_546/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:25:21.206479263 -0500\n@@ -803,14 +803,13 @@\n       Node lr = ll.getNext();\n \n       Node valueToCombine = ll;\n-      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n+      int index = -1;\n+\tNode replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n         valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 815, 
          "faulty": "n.replaceChild(left,left.removeFirstChild());", 
          "type": "InsertBefore", 
          "seed": "final String PARAM_NAME=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_953/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:16.952199745 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_953/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:16.956199947 -0500\n@@ -809,9 +809,9 @@\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n-        // Replace the left op with the remaining child.\n+        int type = n.getType();\n+        final String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t// Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n         // added.\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_953/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:16.956199947 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "InsertBefore", 
          "seed": "StringBuilder sb=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_897/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:30:27.145691475 -0500\n@@ -359,14 +359,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1260,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_897/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:30:27.149691677 -0500\n@@ -805,7 +805,6 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_897/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:30:27.149691677 -0500\n@@ -188,7 +188,10 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              {\n+\t\t\t\tStringBuilder sb = new StringBuilder();\n+\t\t\t\treturn \"GT\";\n+\t\t\t}\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 339, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_422/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:23:31.933001619 -0500\n@@ -335,10 +335,7 @@\n     }\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n+    StringBuilder builder = new StringBuilder();\n \n     if (s.length() > 2\n         && s.charAt(0) == '0'\n@@ -359,14 +356,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1257,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 343, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 809, 
          "faulty": "replacement=performArithmeticOp(opType,valueToCombine,right);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:33:35.651181609 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -340,7 +343,8 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n+    StringBuilder builder = new StringBuilder();\n+\tif (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n       // Attempt to convert hex numbers.\n@@ -359,14 +363,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1264,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:33:35.655181811 -0500\n@@ -805,12 +805,9 @@\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n-        replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:33:35.655181811 -0500\n@@ -188,7 +188,7 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 803, 
          "faulty": "Node lr=ll.getNext();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return extractLineno(sourcePosition);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 808, 
          "faulty": "valueToCombine=lr;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 813, 
          "faulty": "left.removeChild(valueToCombine);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 1271, 
          "faulty": "return allResultsMatch(n.getFirstChild().getNext(),p) && allResultsMatch(n.getLastChild(),p);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 320, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 191, 
          "faulty": "return \"GT\";", 
          "type": "Replace", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:06:57.500909626 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_959/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-02 08:31:22.660485519 -0500\n@@ -317,7 +317,10 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        {\n+\t\t\tJSType type = n.getJSType();\n+\t\t\treturn getStringNumberValue(n.getString());\n+\t\t}\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -359,14 +362,6 @@\n       return null;\n     }\n \n-    // Firefox and IE treat the \"Infinity\" differently. Firefox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n@@ -1268,8 +1263,7 @@\n         return allResultsMatch(n.getFirstChild(), p)\n             && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return allResultsMatch(n.getFirstChild().getNext(), p)\n-            && allResultsMatch(n.getLastChild(), p);\n+        ;\n       default:\n         return p.apply(n);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:06:54.724909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_959/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-02 08:31:22.660485519 -0500\n@@ -800,17 +800,13 @@\n       Preconditions.checkState(left.getChildCount() == 2);\n \n       Node ll = left.getFirstChild();\n-      Node lr = ll.getNext();\n-\n       Node valueToCombine = ll;\n       Node replacement = performArithmeticOp(opType, valueToCombine, right);\n       if (replacement == null) {\n-        valueToCombine = lr;\n         replacement = performArithmeticOp(opType, valueToCombine, right);\n       }\n       if (replacement != null) {\n-        // Remove the child that has been combined\n-        left.removeChild(valueToCombine);\n+        int type = n.getType();\n         // Replace the left op with the remaining child.\n         n.replaceChild(left, left.removeFirstChild());\n         // New \"-Infinity\" node need location info explicitly\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:06:54.752909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_959/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Token.java\t2018-12-02 08:31:22.664485719 -0500\n@@ -188,12 +188,12 @@\n           case NE:              return \"NE\";\n           case LT:              return \"LT\";\n           case LE:              return \"LE\";\n-          case GT:              return \"GT\";\n+          case GT:              Node block = new Node(Token.SCRIPT);\n           case GE:              return \"GE\";\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:06:54.748909552 -0500\n+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_959/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java\t2018-12-02 08:31:22.664485719 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }
  ]
}