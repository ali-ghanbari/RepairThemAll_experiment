{
  "repair_end": "2018-12-01 16:55:12.419296", 
  "repair_begin": "2018-12-01 16:04:54.888280", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 974, 
          "faulty": "sb.append(value);", 
          "type": "Delete", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 946, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "sb.append(Token.name(type));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1340/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:13.893041158 -0500\n@@ -943,7 +943,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -971,7 +970,6 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1340/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:13.893041158 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 746, 
          "faulty": "assignedToUnknownValue=true;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1182/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:43:53.410470759 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n@@ -741,9 +736,7 @@\n             assignedToUnknownValue = value != null &&\n                 !NodeUtil.isLiteralValue(value, true);\n           } else {\n-            // This was initialized to a function arg or a catch param\n-            // or a for...in variable.\n-            assignedToUnknownValue = true;\n+            break;\n           }\n \n           boolean maybeEscaped = false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1626/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:58.624324844 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:04:31.952731295 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1626/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:53:58.628324881 -0500\n@@ -71,6 +71,6 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    return \"PARAM_LIST\";\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Delete", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1098/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:41:27.484946711 -0500\n@@ -953,7 +953,6 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n       }\n     }\n \n@@ -1408,11 +1407,12 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1098/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:41:27.488946755 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 868, 
          "faulty": "keys[count]=x.getType();", 
          "type": "Replace", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1295/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:47:06.552388168 -0500\n@@ -865,7 +865,7 @@\n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n       count--;\n-      keys[count] = x.getType();\n+      parent = null;\n     }\n \n     Arrays.sort(keys);\n@@ -937,14 +937,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1295/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:47:06.552388168 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 230, 
          "faulty": "return \"PARAM_LIST\";", 
          "type": "InsertBefore", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1374/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:48:56.589452431 -0500\n@@ -227,7 +227,213 @@\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n           case TRY:             return \"TRY\";\n-          case PARAM_LIST:      return \"PARAM_LIST\";\n+          case PARAM_LIST:      {\n+\t\t\t\tswitch (token) {\n+\t\t\t\tcase ERROR:\n+\t\t\t\t\treturn \"ERROR\";\n+\t\t\t\tcase RETURN:\n+\t\t\t\t\treturn \"RETURN\";\n+\t\t\t\tcase BITOR:\n+\t\t\t\t\treturn \"BITOR\";\n+\t\t\t\tcase BITXOR:\n+\t\t\t\t\treturn \"BITXOR\";\n+\t\t\t\tcase BITAND:\n+\t\t\t\t\treturn \"BITAND\";\n+\t\t\t\tcase EQ:\n+\t\t\t\t\treturn \"EQ\";\n+\t\t\t\tcase NE:\n+\t\t\t\t\treturn \"NE\";\n+\t\t\t\tcase LT:\n+\t\t\t\t\treturn \"LT\";\n+\t\t\t\tcase LE:\n+\t\t\t\t\treturn \"LE\";\n+\t\t\t\tcase GT:\n+\t\t\t\t\treturn \"GT\";\n+\t\t\t\tcase GE:\n+\t\t\t\t\treturn \"GE\";\n+\t\t\t\tcase LSH:\n+\t\t\t\t\treturn \"LSH\";\n+\t\t\t\tcase RSH:\n+\t\t\t\t\treturn \"RSH\";\n+\t\t\t\tcase URSH:\n+\t\t\t\t\treturn \"URSH\";\n+\t\t\t\tcase ADD:\n+\t\t\t\t\treturn \"ADD\";\n+\t\t\t\tcase SUB:\n+\t\t\t\t\treturn \"SUB\";\n+\t\t\t\tcase MUL:\n+\t\t\t\t\treturn \"MUL\";\n+\t\t\t\tcase DIV:\n+\t\t\t\t\treturn \"DIV\";\n+\t\t\t\tcase MOD:\n+\t\t\t\t\treturn \"MOD\";\n+\t\t\t\tcase NOT:\n+\t\t\t\t\treturn \"NOT\";\n+\t\t\t\tcase BITNOT:\n+\t\t\t\t\treturn \"BITNOT\";\n+\t\t\t\tcase POS:\n+\t\t\t\t\treturn \"POS\";\n+\t\t\t\tcase NEG:\n+\t\t\t\t\treturn \"NEG\";\n+\t\t\t\tcase NEW:\n+\t\t\t\t\treturn \"NEW\";\n+\t\t\t\tcase DELPROP:\n+\t\t\t\t\treturn \"DELPROP\";\n+\t\t\t\tcase TYPEOF:\n+\t\t\t\t\treturn \"TYPEOF\";\n+\t\t\t\tcase GETPROP:\n+\t\t\t\t\treturn \"GETPROP\";\n+\t\t\t\tcase GETELEM:\n+\t\t\t\t\treturn \"GETELEM\";\n+\t\t\t\tcase CALL:\n+\t\t\t\t\treturn \"CALL\";\n+\t\t\t\tcase NAME:\n+\t\t\t\t\treturn \"NAME\";\n+\t\t\t\tcase LABEL_NAME:\n+\t\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\t\tcase NUMBER:\n+\t\t\t\t\treturn \"NUMBER\";\n+\t\t\t\tcase STRING:\n+\t\t\t\t\treturn \"STRING\";\n+\t\t\t\tcase STRING_KEY:\n+\t\t\t\t\treturn \"STRING_KEY\";\n+\t\t\t\tcase NULL:\n+\t\t\t\t\treturn \"NULL\";\n+\t\t\t\tcase THIS:\n+\t\t\t\t\treturn \"THIS\";\n+\t\t\t\tcase FALSE:\n+\t\t\t\t\treturn \"FALSE\";\n+\t\t\t\tcase TRUE:\n+\t\t\t\t\treturn \"TRUE\";\n+\t\t\t\tcase SHEQ:\n+\t\t\t\t\treturn \"SHEQ\";\n+\t\t\t\tcase SHNE:\n+\t\t\t\t\treturn \"SHNE\";\n+\t\t\t\tcase REGEXP:\n+\t\t\t\t\treturn \"REGEXP\";\n+\t\t\t\tcase THROW:\n+\t\t\t\t\treturn \"THROW\";\n+\t\t\t\tcase IN:\n+\t\t\t\t\treturn \"IN\";\n+\t\t\t\tcase INSTANCEOF:\n+\t\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\t\tcase ARRAYLIT:\n+\t\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\t\tcase OBJECTLIT:\n+\t\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\t\tcase TRY:\n+\t\t\t\t\treturn \"TRY\";\n+\t\t\t\tcase PARAM_LIST:\n+\t\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\t\tcase COMMA:\n+\t\t\t\t\treturn \"COMMA\";\n+\t\t\t\tcase ASSIGN:\n+\t\t\t\t\treturn \"ASSIGN\";\n+\t\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\t\tcase ASSIGN_LSH:\n+\t\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\t\tcase ASSIGN_RSH:\n+\t\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\t\tcase ASSIGN_URSH:\n+\t\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\t\tcase ASSIGN_ADD:\n+\t\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\t\tcase ASSIGN_SUB:\n+\t\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\t\tcase ASSIGN_MUL:\n+\t\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\t\tcase ASSIGN_DIV:\n+\t\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\t\tcase ASSIGN_MOD:\n+\t\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\t\tcase HOOK:\n+\t\t\t\t\treturn \"HOOK\";\n+\t\t\t\tcase OR:\n+\t\t\t\t\treturn \"OR\";\n+\t\t\t\tcase AND:\n+\t\t\t\t\treturn \"AND\";\n+\t\t\t\tcase INC:\n+\t\t\t\t\treturn \"INC\";\n+\t\t\t\tcase DEC:\n+\t\t\t\t\treturn \"DEC\";\n+\t\t\t\tcase FUNCTION:\n+\t\t\t\t\treturn \"FUNCTION\";\n+\t\t\t\tcase IF:\n+\t\t\t\t\treturn \"IF\";\n+\t\t\t\tcase SWITCH:\n+\t\t\t\t\treturn \"SWITCH\";\n+\t\t\t\tcase CASE:\n+\t\t\t\t\treturn \"CASE\";\n+\t\t\t\tcase DEFAULT_CASE:\n+\t\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\t\tcase WHILE:\n+\t\t\t\t\treturn \"WHILE\";\n+\t\t\t\tcase DO:\n+\t\t\t\t\treturn \"DO\";\n+\t\t\t\tcase FOR:\n+\t\t\t\t\treturn \"FOR\";\n+\t\t\t\tcase BREAK:\n+\t\t\t\t\treturn \"BREAK\";\n+\t\t\t\tcase CONTINUE:\n+\t\t\t\t\treturn \"CONTINUE\";\n+\t\t\t\tcase VAR:\n+\t\t\t\t\treturn \"VAR\";\n+\t\t\t\tcase WITH:\n+\t\t\t\t\treturn \"WITH\";\n+\t\t\t\tcase CATCH:\n+\t\t\t\t\treturn \"CATCH\";\n+\t\t\t\tcase EMPTY:\n+\t\t\t\t\treturn \"EMPTY\";\n+\t\t\t\tcase BLOCK:\n+\t\t\t\t\treturn \"BLOCK\";\n+\t\t\t\tcase LABEL:\n+\t\t\t\t\treturn \"LABEL\";\n+\t\t\t\tcase EXPR_RESULT:\n+\t\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\t\tcase SCRIPT:\n+\t\t\t\t\treturn \"SCRIPT\";\n+\t\t\t\tcase GETTER_DEF:\n+\t\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\t\tcase SETTER_DEF:\n+\t\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\t\tcase CONST:\n+\t\t\t\t\treturn \"CONST\";\n+\t\t\t\tcase DEBUGGER:\n+\t\t\t\t\treturn \"DEBUGGER\";\n+\t\t\t\tcase CAST:\n+\t\t\t\t\treturn \"CAST\";\n+\t\t\t\tcase ANNOTATION:\n+\t\t\t\t\treturn \"ANNOTATION\";\n+\t\t\t\tcase PIPE:\n+\t\t\t\t\treturn \"PIPE\";\n+\t\t\t\tcase STAR:\n+\t\t\t\t\treturn \"STAR\";\n+\t\t\t\tcase EOC:\n+\t\t\t\t\treturn \"EOC\";\n+\t\t\t\tcase QMARK:\n+\t\t\t\t\treturn \"QMARK\";\n+\t\t\t\tcase ELLIPSIS:\n+\t\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\t\tcase BANG:\n+\t\t\t\t\treturn \"BANG\";\n+\t\t\t\tcase VOID:\n+\t\t\t\t\treturn \"VOID\";\n+\t\t\t\tcase EQUALS:\n+\t\t\t\t\treturn \"EQUALS\";\n+\t\t\t\tcase LB:\n+\t\t\t\t\treturn \"LB\";\n+\t\t\t\tcase LC:\n+\t\t\t\t\treturn \"LC\";\n+\t\t\t\tcase COLON:\n+\t\t\t\t\treturn \"COLON\";\n+\t\t\t\t}\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\t}\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1374/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:56.589452431 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 965, 
          "faulty": "sb.append(\" [\");", 
          "type": "Delete", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_927/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:35:50.697521847 -0500\n@@ -962,7 +962,6 @@\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n-        sb.append(\" [\");\n         sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_927/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:35:50.697521847 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 967, 
          "faulty": "sb.append(\": \");", 
          "type": "Replace", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1253/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:45:51.963657005 -0500\n@@ -964,7 +964,7 @@\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n-        sb.append(\": \");\n+        toString(sb, printSource, printAnnotations, printType);\n         String value;\n         switch (type) {\n           default:\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1253/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:45:51.967657044 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 963, 
          "faulty": "int type=keys[i];", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1665/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:54:49.572805543 -0500\n@@ -960,7 +960,9 @@\n     if (printAnnotations) {\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n-        int type = keys[i];\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\t\tint type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1665/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:54:49.572805543 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1607/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:37.500125322 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"BLOCK\";\n   }\n \n   private static class NumberNode extends Node {\n@@ -936,7 +909,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1607/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:37.504125361 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 965, 
          "faulty": "sb.append(\" [\");", 
          "type": "Delete", 
          "seed": "for (int i=0; i < keys.length; i++) {\n  int type=keys[i];\n  PropListItem x=lookupProperty(type);\n  sb.append(\" [\");\n  sb.append(propToString(type));\n  sb.append(\": \");\n  String value;\nswitch (type) {\ndefault :\n    value=x.toString();\n  break;\n}\nsb.append(value);\nsb.append(']');\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1372/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:55.109438206 -0500\n@@ -962,7 +962,6 @@\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n-        sb.append(\" [\");\n         sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1372/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:55.113438244 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Delete", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1464/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:41.266453898 -0500\n@@ -953,7 +953,6 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1464/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:41.266453898 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 868, 
          "faulty": "keys[count]=x.getType();", 
          "type": "Replace", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1205/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:44:36.330904348 -0500\n@@ -865,7 +865,7 @@\n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n       count--;\n-      keys[count] = x.getType();\n+      parent = null;\n     }\n \n     Arrays.sort(keys);\n@@ -1408,11 +1408,12 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1205/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:44:36.330904348 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/SourceFile.java", 
          "line": 303, 
          "faulty": "return fileName;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:04:31.928731294 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1273/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:46:29.888029943 -0500\n@@ -300,7 +300,7 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    return null;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1273/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:46:29.892029983 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 311, 
          "faulty": "return objectValue == null ? \"null\" : objectValue.toString();", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1488/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:07.978708223 -0500\n@@ -308,7 +308,7 @@\n \n     @Override\n     public String toString() {\n-      return objectValue == null ? \"null\" : objectValue.toString();\n+      return \"RETURN\";\n     }\n \n     @Override\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1488/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:07.982708261 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1425/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:00.670066504 -0500\n@@ -952,7 +952,9 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\t\tsb.append(' ');\n         sb.append(lineno);\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1425/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:00.674066542 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1010/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:38:20.591003452 -0500\n@@ -937,14 +937,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1408,11 +1402,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1010/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:38:20.591003452 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "Delete", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1124/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:42:13.181433901 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"BLOCK\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -963,7 +963,6 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n         switch (type) {\n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1124/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:42:13.181433901 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1115/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:42:03.445330971 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"ADD\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1115/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:42:03.445330971 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1381/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:49:03.489518725 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"SCRIPT\";\n   }\n \n   private static class NumberNode extends Node {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1381/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:49:03.493518764 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Delete", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1168/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:43:30.930241419 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"BLOCK\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -953,7 +953,6 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n       }\n     }\n \n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1168/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:43:30.934241460 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 963, 
          "faulty": "int type=keys[i];", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(keys);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1589/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:17.871939804 -0500\n@@ -960,7 +960,8 @@\n     if (printAnnotations) {\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n-        int type = keys[i];\n+        Arrays.sort(keys);\n+\t\tint type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1589/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:17.871939804 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Replace", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1336/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:09.572999436 -0500\n@@ -953,7 +953,7 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n+        this.sourcePosition = sourcePosition;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1336/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:09.576999475 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "Delete", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1275/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:46:31.284043623 -0500\n@@ -963,7 +963,6 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n         switch (type) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1275/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:46:31.288043662 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 969, 
          "faulty": "switch (type) {\ndefault :\n  value=x.toString();\nbreak;\n}", 
          "type": "InsertBefore", 
          "seed": "if (jsType != null) {\n  String jsTypeString=jsType.toString();\n  if (jsTypeString != null) {\n    sb.append(\" : \");\n    sb.append(jsTypeString);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1326/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:47:57.068878553 -0500\n@@ -966,7 +966,14 @@\n         sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n-        switch (type) {\n+        if (jsType != null) {\n+\t\t\tString jsTypeString = jsType.toString();\n+\t\t\tif (jsTypeString != null) {\n+\t\t\t\tsb.append(\" : \");\n+\t\t\t\tsb.append(jsTypeString);\n+\t\t\t}\n+\t\t}\n+\t\tswitch (type) {\n           default:\n             value = x.toString();\n             break;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1326/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:47:57.072878592 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Replace", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1044/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:39:47.059899523 -0500\n@@ -953,7 +953,20 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n+        if (this instanceof StringNode) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getString());\n+\t\t} else if (type == Token.FUNCTION) {\n+\t\t\tsb.append(' ');\n+\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t} else {\n+\t\t\t\tsb.append(first.getString());\n+\t\t\t}\n+\t\t} else if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     }\n \n@@ -1408,11 +1421,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1044/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:39:47.063899563 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 867, 
          "faulty": "count--;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1235/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:45:17.179312464 -0500\n@@ -864,7 +864,8 @@\n \n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n-      count--;\n+      this.sourcePosition = sourcePosition;\n+\tcount--;\n       keys[count] = x.getType();\n     }\n \n@@ -1408,11 +1409,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1235/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:45:17.183312504 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "sb.append(Token.name(type));"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1421/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:49:56.526026893 -0500\n@@ -937,14 +937,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append(Token.name(type));\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1421/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:49:56.526026893 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1494/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:18.230805721 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"EMPTY\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1494/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:18.234805759 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_339/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:04.447886766 -0500\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_339/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:19:04.451886800 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1376/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:57.965465655 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:04:31.952731295 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1376/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:48:57.965465655 -0500\n@@ -71,6 +71,6 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    return \"EMPTY\";\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1313/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:47:33.716652284 -0500\n@@ -936,7 +936,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      toString(sb, printSource, printAnnotations, printType);\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1313/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:47:33.716652284 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 967, 
          "faulty": "sb.append(\": \");", 
          "type": "Replace", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_537/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:24:30.282970906 -0500\n@@ -964,7 +964,17 @@\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n-        sb.append(\": \");\n+        if (type == Token.FUNCTION) {\n+\t\t\tsb.append(' ');\n+\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t} else {\n+\t\t\t\tsb.append(first.getString());\n+\t\t\t}\n+\t\t} else if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n         String value;\n         switch (type) {\n           default:\n@@ -1408,11 +1418,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_537/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:24:30.286970943 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 964, 
          "faulty": "PropListItem x=lookupProperty(type);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_849/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:33:19.500086839 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"SCRIPT\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -961,7 +961,8 @@\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n-        PropListItem x = lookupProperty(type);\n+        parent = null;\n+\t\tPropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n         sb.append(\": \");\n@@ -1408,11 +1409,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_849/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:33:19.504086878 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 969, 
          "faulty": "switch (type) {\ndefault :\n  value=x.toString();\nbreak;\n}", 
          "type": "InsertBefore", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1461/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:38.366426262 -0500\n@@ -966,7 +966,8 @@\n         sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n-        switch (type) {\n+        toString(sb, printSource, printAnnotations, printType);\n+\t\tswitch (type) {\n           default:\n             value = x.toString();\n             break;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1461/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:38.370426300 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 868, 
          "faulty": "keys[count]=x.getType();", 
          "type": "Replace", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1466/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:42.666467238 -0500\n@@ -865,7 +865,7 @@\n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n       count--;\n-      keys[count] = x.getType();\n+      parent = null;\n     }\n \n     Arrays.sort(keys);\n@@ -936,7 +936,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1466/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:42.666467238 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 974, 
          "faulty": "sb.append(value);", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1567/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:46.423642287 -0500\n@@ -971,7 +971,7 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n+        sb.append('\\n');\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1567/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:46.427642324 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1366/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:49.525384514 -0500\n@@ -963,7 +963,9 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\t\tsb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n         switch (type) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1366/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:49.529384553 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 868, 
          "faulty": "keys[count]=x.getType();", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_403/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:40.768809953 -0500\n@@ -865,7 +865,7 @@\n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n       count--;\n-      keys[count] = x.getType();\n+      sourcePosition = -1;\n     }\n \n     Arrays.sort(keys);\n@@ -952,7 +952,6 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n         sb.append(lineno);\n       }\n     }\n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_403/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:20:40.772809992 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1193/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:44:07.102609661 -0500\n@@ -936,7 +936,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1193/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:44:07.102609661 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 975, 
          "faulty": "sb.append(']');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1257/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:45:56.119698005 -0500\n@@ -972,7 +972,6 @@\n             break;\n         }\n         sb.append(value);\n-        sb.append(']');\n       }\n     }\n \n@@ -1408,11 +1407,12 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1257/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:45:56.123698043 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 975, 
          "faulty": "sb.append(']');", 
          "type": "Delete", 
          "seed": "sb.append(Token.name(type));"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1086/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:41:02.728678073 -0500\n@@ -972,7 +972,6 @@\n             break;\n         }\n         sb.append(value);\n-        sb.append(']');\n       }\n     }\n \n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1086/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:41:02.728678073 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1383/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:49:04.893532209 -0500\n@@ -937,14 +937,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1383/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:49:04.897532247 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_794/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:31:44.143158291 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/SourceFile.java", 
          "line": 303, 
          "faulty": "return fileName;", 
          "type": "InsertBefore", 
          "seed": "if (code.length() == 0) {\n  return null;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:04:31.928731294 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1505/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:51:31.018927257 -0500\n@@ -300,7 +300,10 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    if (code.length() == 0) {\n+\t\treturn null;\n+\t}\n+\treturn fileName;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1505/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:31.018927257 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"BLOCK\";\n   }\n \n   private static class NumberNode extends Node {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1505/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:31.018927257 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_636/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:27:02.676360997 -0500\n@@ -936,7 +936,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n@@ -1408,11 +1407,12 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_636/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:27:02.676360997 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1353/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:29.345190221 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"ADD\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1353/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:29.345190221 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:04:31.952731295 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1353/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:48:29.345190221 -0500\n@@ -71,6 +71,6 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    return \"BLOCK\";\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 746, 
          "faulty": "assignedToUnknownValue=true;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1661/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:54:45.436766544 -0500\n@@ -952,7 +952,6 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n         sb.append(lineno);\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1661/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:54:45.436766544 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n@@ -741,9 +736,7 @@\n             assignedToUnknownValue = value != null &&\n                 !NodeUtil.isLiteralValue(value, true);\n           } else {\n-            // This was initialized to a function arg or a catch param\n-            // or a for...in variable.\n-            assignedToUnknownValue = true;\n+            break;\n           }\n \n           boolean maybeEscaped = false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 975, 
          "faulty": "sb.append(']');", 
          "type": "Replace", 
          "seed": "sb.append(Token.name(type));"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 971, 
          "faulty": "value=x.toString();", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1560/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:39.067572641 -0500\n@@ -968,11 +968,24 @@\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (type == Token.FUNCTION) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsb.append(first.getString());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (type == Token.NUMBER) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tsb.append(getDouble());\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n         sb.append(value);\n-        sb.append(']');\n+        sb.append(Token.name(type));\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1560/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:39.067572641 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 974, 
          "faulty": "sb.append(value);", 
          "type": "Delete", 
          "seed": "sb.append('\\n');"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1502/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:28.214900615 -0500\n@@ -971,7 +971,6 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1502/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:28.214900615 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "InsertBefore", 
          "seed": "if (printSource) {\n  int lineno=getLineno();\n  if (lineno != -1) {\n    sb.append(' ');\n    sb.append(lineno);\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1390/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:49:13.365613535 -0500\n@@ -963,7 +963,14 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n+        if (printSource) {\n+\t\t\tint lineno = getLineno();\n+\t\t\tif (lineno != -1) {\n+\t\t\t\tsb.append(' ');\n+\t\t\t\tsb.append(lineno);\n+\t\t\t}\n+\t\t}\n+\t\tsb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n         switch (type) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1390/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:49:13.365613535 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 946, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "sb.append(Token.name(type));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_586/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:25:45.563660476 -0500\n@@ -943,7 +943,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_586/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:25:45.563660476 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_683/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:28:15.453018096 -0500\n@@ -1408,11 +1408,12 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_683/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:28:15.457018132 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 971, 
          "faulty": "value=x.toString();", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 974, 
          "faulty": "sb.append(value);", 
          "type": "Delete", 
          "seed": "sb.append('\\n');"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1433/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:09.074146795 -0500\n@@ -968,10 +968,22 @@\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (type == Token.FUNCTION) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsb.append(first.getString());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (type == Token.NUMBER) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tsb.append(getDouble());\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1433/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:09.074146795 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 398, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1154/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:43:00.137924450 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 311, 
          "faulty": "return objectValue == null ? \"null\" : objectValue.toString();", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1654/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:54:33.664655522 -0500\n@@ -308,7 +308,7 @@\n \n     @Override\n     public String toString() {\n-      return objectValue == null ? \"null\" : objectValue.toString();\n+      return \"RETURN\";\n     }\n \n     @Override\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1654/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:54:33.664655522 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:04:31.952731295 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1654/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:54:33.668655561 -0500\n@@ -71,6 +71,6 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    return \"EMPTY\";\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 398, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_870/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:34:04.640519206 -0500\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_870/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:34:04.644519244 -0500\n@@ -394,8 +394,7 @@\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+          break;\n         } else {\n           break;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 868, 
          "faulty": "keys[count]=x.getType();", 
          "type": "Replace", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1281/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:46:41.776146329 -0500\n@@ -865,7 +865,7 @@\n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n       count--;\n-      keys[count] = x.getType();\n+      parent = null;\n     }\n \n     Arrays.sort(keys);\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1281/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:46:41.776146329 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1397/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:49:20.521682178 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"ADD\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1397/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:49:20.521682178 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 398, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 969, 
          "faulty": "switch (type) {\ndefault :\n  value=x.toString();\nbreak;\n}", 
          "type": "InsertBefore", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_983/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:37:36.638534408 -0500\n@@ -966,7 +966,8 @@\n         sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n-        switch (type) {\n+        toString(sb, printSource, printAnnotations, printType);\n+\t\tswitch (type) {\n           default:\n             value = x.toString();\n             break;\n@@ -1408,11 +1409,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_983/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:37:36.638534408 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "sb.append(Token.name(type));"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1579/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:05.023818297 -0500\n@@ -937,7 +937,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      sb.append(Token.name(type));\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1579/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:05.023818297 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 311, 
          "faulty": "return objectValue == null ? \"null\" : objectValue.toString();", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 746, 
          "faulty": "assignedToUnknownValue=true;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1215/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:44:51.999061374 -0500\n@@ -308,7 +308,7 @@\n \n     @Override\n     public String toString() {\n-      return objectValue == null ? \"null\" : objectValue.toString();\n+      return \"BLOCK\";\n     }\n \n     @Override\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1215/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:44:51.999061374 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n@@ -741,9 +736,7 @@\n             assignedToUnknownValue = value != null &&\n                 !NodeUtil.isLiteralValue(value, true);\n           } else {\n-            // This was initialized to a function arg or a catch param\n-            // or a for...in variable.\n-            assignedToUnknownValue = true;\n+            break;\n           }\n \n           boolean maybeEscaped = false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 343, 
          "faulty": "return String.valueOf(intValue);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1292/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:47:03.748360845 -0500\n@@ -340,7 +340,7 @@\n \n     @Override\n     public String toString() {\n-      return String.valueOf(intValue);\n+      return null;\n     }\n \n     @Override\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1292/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:47:03.748360845 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_939/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:36:10.433706797 -0500\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_939/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:36:10.433706797 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1427, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1548/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:26.411452764 -0500\n@@ -1424,7 +1424,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1548/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:26.411452764 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "Replace", 
          "seed": "if (printSource) {\n  int lineno=getLineno();\n  if (lineno != -1) {\n    sb.append(' ');\n    sb.append(lineno);\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1364/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:48.117370972 -0500\n@@ -963,7 +963,13 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n+        if (printSource) {\n+\t\t\tint lineno = getLineno();\n+\t\t\tif (lineno != -1) {\n+\t\t\t\tsb.append(' ');\n+\t\t\t\tsb.append(lineno);\n+\t\t\t}\n+\t\t}\n         sb.append(\": \");\n         String value;\n         switch (type) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1364/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:48.121371010 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 975, 
          "faulty": "sb.append(']');", 
          "type": "Delete", 
          "seed": "sb.append(Token.name(type));"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1490/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:09.378721541 -0500\n@@ -972,7 +972,6 @@\n             break;\n         }\n         sb.append(value);\n-        sb.append(']');\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1490/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:09.378721541 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 975, 
          "faulty": "sb.append(']');", 
          "type": "Delete", 
          "seed": "if (printAnnotations) {\n  int[] keys=getSortedPropTypes();\n  for (int i=0; i < keys.length; i++) {\n    int type=keys[i];\n    PropListItem x=lookupProperty(type);\n    sb.append(\" [\");\n    sb.append(propToString(type));\n    sb.append(\": \");\n    String value;\nswitch (type) {\ndefault :\n      value=x.toString();\n    break;\n}\nsb.append(value);\nsb.append(']');\n}\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1369/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:52.337411556 -0500\n@@ -972,7 +972,6 @@\n             break;\n         }\n         sb.append(value);\n-        sb.append(']');\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1369/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:52.337411556 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 867, 
          "faulty": "count--;", 
          "type": "InsertBefore", 
          "seed": "x=x.getNext();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1226/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:45:05.911200287 -0500\n@@ -864,7 +864,8 @@\n \n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n-      count--;\n+      x = x.getNext();\n+\tcount--;\n       keys[count] = x.getType();\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1226/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:45:05.911200287 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 967, 
          "faulty": "sb.append(\": \");", 
          "type": "Replace", 
          "seed": "x=x.getNext();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1555/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:33.499519909 -0500\n@@ -964,7 +964,7 @@\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n-        sb.append(\": \");\n+        x = x.getNext();\n         String value;\n         switch (type) {\n           default:\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1555/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:33.499519909 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Replace", 
          "seed": "if (printType) {\n  if (jsType != null) {\n    String jsTypeString=jsType.toString();\n    if (jsTypeString != null) {\n      sb.append(\" : \");\n      sb.append(jsTypeString);\n    }\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 343, 
          "faulty": "return String.valueOf(intValue);", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1577/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:03.619805016 -0500\n@@ -340,7 +340,7 @@\n \n     @Override\n     public String toString() {\n-      return String.valueOf(intValue);\n+      return \"SCRIPT\";\n     }\n \n     @Override\n@@ -953,7 +953,15 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n+        if (printType) {\n+\t\t\tif (jsType != null) {\n+\t\t\t\tString jsTypeString = jsType.toString();\n+\t\t\t\tif (jsTypeString != null) {\n+\t\t\t\t\tsb.append(\" : \");\n+\t\t\t\t\tsb.append(jsTypeString);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1577/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:03.619805016 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 964, 
          "faulty": "PropListItem x=lookupProperty(type);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(keys);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1469/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:45.586495059 -0500\n@@ -961,7 +961,8 @@\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n-        PropListItem x = lookupProperty(type);\n+        Arrays.sort(keys);\n+\t\tPropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n         sb.append(\": \");\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1469/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:45.590495097 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_829/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:32:43.951743353 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"BLOCK\";\n   }\n \n   private static class NumberNode extends Node {\n@@ -1408,11 +1381,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_829/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:32:43.955743391 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 975, 
          "faulty": "sb.append(']');", 
          "type": "Replace", 
          "seed": "sb.append(Token.name(type));"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 867, 
          "faulty": "count--;", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1479/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:58.318616300 -0500\n@@ -864,7 +864,9 @@\n \n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n-      count--;\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\tcount--;\n       keys[count] = x.getType();\n     }\n \n@@ -972,7 +974,7 @@\n             break;\n         }\n         sb.append(value);\n-        sb.append(']');\n+        sb.append(Token.name(type));\n       }\n     }\n \n@@ -1437,7 +1439,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1479/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:58.322616338 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 971, 
          "faulty": "value=x.toString();", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1647/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:54:25.228575940 -0500\n@@ -937,14 +937,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -968,7 +962,20 @@\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (type == Token.FUNCTION) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsb.append(first.getString());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (type == Token.NUMBER) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tsb.append(getDouble());\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n         sb.append(value);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1647/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:54:25.228575940 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 965, 
          "faulty": "sb.append(\" [\");", 
          "type": "Replace", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1324/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:47:55.672865046 -0500\n@@ -962,7 +962,7 @@\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n-        sb.append(\" [\");\n+        toString(sb, printSource, printAnnotations, printType);\n         sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1324/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:47:55.672865046 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1122/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:42:11.777419085 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1400/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:49:23.349709294 -0500\n@@ -952,7 +952,6 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n         sb.append(lineno);\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1400/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:49:23.353709332 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_995/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:37:51.818697601 -0500\n@@ -953,7 +953,10 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     }\n \n@@ -1408,11 +1411,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_995/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:37:51.818697601 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 867, 
          "faulty": "count--;", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1602/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:33.252085182 -0500\n@@ -864,7 +864,9 @@\n \n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n-      count--;\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\tcount--;\n       keys[count] = x.getType();\n     }\n \n@@ -1408,11 +1410,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1602/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:33.252085182 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Delete", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_887/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:34:40.004855378 -0500\n@@ -953,7 +953,6 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n       }\n     }\n \n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_887/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:34:40.004855378 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1395/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:49:19.121668752 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"PARAM_LIST\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1395/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:49:19.121668752 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "if (diff != null) {\n  return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1158/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:43:09.070016753 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"BLOCK\";\n   }\n \n   private static class NumberNode extends Node {\n@@ -937,14 +910,17 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      if (type == Token.FUNCTION) {\n+\t\tsb.append(' ');\n+\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\tsb.append(\"<invalid>\");\n+\t\t} else {\n+\t\t\tsb.append(first.getString());\n+\t\t}\n+\t} else if (type == Token.NUMBER) {\n+\t\tsb.append(' ');\n+\t\tsb.append(getDouble());\n+\t}\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1408,11 +1384,12 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        if (diff != null) {\n+\t\t\treturn \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree()\n+\t\t\t\t\t+ \"\\n\\nTree2:\\n\" + node2.toStringTree() + \"\\n\\nSubtree1: \"\n+\t\t\t\t\t+ diff.nodeA.toStringTree() + \"\\n\\nSubtree2: \"\n+\t\t\t\t\t+ diff.nodeB.toStringTree();\n+\t\t}\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1158/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:43:09.074016794 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 343, 
          "faulty": "return String.valueOf(intValue);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1671/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:54:56.604871838 -0500\n@@ -340,7 +340,7 @@\n \n     @Override\n     public String toString() {\n-      return String.valueOf(intValue);\n+      return null;\n     }\n \n     @Override\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1671/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:54:56.608871877 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 974, 
          "faulty": "sb.append(value);", 
          "type": "Delete", 
          "seed": "sb.append('\\n');"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1563/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:41.951599949 -0500\n@@ -952,7 +952,6 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n         sb.append(lineno);\n       }\n     }\n@@ -971,7 +970,6 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1563/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:41.951599949 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "Replace", 
          "seed": "if (printSource) {\n  int lineno=getLineno();\n  if (lineno != -1) {\n    sb.append(' ');\n    sb.append(lineno);\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1012/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:38:21.991018226 -0500\n@@ -937,14 +937,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -963,7 +957,13 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n+        if (printSource) {\n+\t\t\tint lineno = getLineno();\n+\t\t\tif (lineno != -1) {\n+\t\t\t\tsb.append(' ');\n+\t\t\t\tsb.append(lineno);\n+\t\t\t}\n+\t\t}\n         sb.append(\": \");\n         String value;\n         switch (type) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1012/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:38:21.991018226 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 971, 
          "faulty": "value=x.toString();", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1482/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:01.074642531 -0500\n@@ -968,7 +968,20 @@\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (type == Token.FUNCTION) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsb.append(first.getString());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (type == Token.NUMBER) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tsb.append(getDouble());\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n         sb.append(value);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1482/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:01.074642531 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 946, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "sb.append(Token.name(type));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1246/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:45:45.055588780 -0500\n@@ -943,7 +943,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1246/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:45:45.055588780 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 964, 
          "faulty": "PropListItem x=lookupProperty(type);", 
          "type": "InsertBefore", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_976/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:37:23.510392180 -0500\n@@ -961,7 +961,8 @@\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n-        PropListItem x = lookupProperty(type);\n+        toString(sb, printSource, printAnnotations, printType);\n+\t\tPropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n         sb.append(\": \");\n@@ -1408,11 +1409,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_976/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:37:23.514392223 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 971, 
          "faulty": "value=x.toString();", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_919/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:35:40.913429994 -0500\n@@ -936,7 +936,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n@@ -968,7 +967,20 @@\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (type == Token.FUNCTION) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsb.append(first.getString());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (type == Token.NUMBER) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tsb.append(getDouble());\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n         sb.append(value);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_919/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:35:40.913429994 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (this instanceof StringNode) {\n  sb.append(' ');\n  sb.append(getString());\n}\n else if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 967, 
          "faulty": "sb.append(\": \");", 
          "type": "Replace", 
          "seed": "x=x.getNext();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1605/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:36.084111943 -0500\n@@ -936,7 +936,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n@@ -964,7 +963,7 @@\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n-        sb.append(\": \");\n+        x = x.getNext();\n         String value;\n         switch (type) {\n           default:\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1605/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:36.084111943 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 868, 
          "faulty": "keys[count]=x.getType();", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 946, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1439/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:15.966212603 -0500\n@@ -865,7 +865,7 @@\n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n       count--;\n-      keys[count] = x.getType();\n+      sourcePosition = -1;\n     }\n \n     Arrays.sort(keys);\n@@ -943,7 +943,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1439/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:15.970212641 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1270/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:46:26.920000849 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return null;\n   }\n \n   private static class NumberNode extends Node {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1270/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:46:26.920000849 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1657/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:54:41.144726070 -0500\n@@ -963,7 +963,8 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n         sb.append(\": \");\n         String value;\n         switch (type) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1657/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:54:41.144726070 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 939, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_852/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:33:22.244113237 -0500\n@@ -936,7 +936,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      parent = null;\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n@@ -1437,7 +1433,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_852/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:33:22.248113276 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 398, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 311, 
          "faulty": "return objectValue == null ? \"null\" : objectValue.toString();", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1553/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:32.099506648 -0500\n@@ -308,7 +308,7 @@\n \n     @Override\n     public String toString() {\n-      return objectValue == null ? \"null\" : objectValue.toString();\n+      return \"RETURN\";\n     }\n \n     @Override\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1553/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:32.103506687 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1428/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:03.510093642 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"PARAM_LIST\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1428/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:03.510093642 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_727/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:29:38.793892891 -0500\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_727/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:29:38.797892932 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1251/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:45:50.555643106 -0500\n@@ -1437,7 +1437,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1251/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:45:50.559643145 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1675/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:55:00.728910713 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"BLOCK\";\n   }\n \n   private static class NumberNode extends Node {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1675/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:55:00.728910713 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1427, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1519/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:46.475074035 -0500\n@@ -1424,7 +1424,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1437,7 +1438,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1519/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:46.479074073 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "InsertBefore", 
          "seed": "if (printSource) {\n  int lineno=getLineno();\n  if (lineno != -1) {\n    sb.append(' ');\n    sb.append(lineno);\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 971, 
          "faulty": "value=x.toString();", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_796/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:31:45.583172495 -0500\n@@ -963,12 +963,32 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n+        if (printSource) {\n+\t\t\tint lineno = getLineno();\n+\t\t\tif (lineno != -1) {\n+\t\t\t\tsb.append(' ');\n+\t\t\t\tsb.append(lineno);\n+\t\t\t}\n+\t\t}\n+\t\tsb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (type == Token.FUNCTION) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsb.append(first.getString());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (type == Token.NUMBER) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tsb.append(getDouble());\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n         sb.append(value);\n@@ -1408,11 +1428,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n@@ -1437,7 +1453,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_796/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:31:45.583172495 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 974, 
          "faulty": "sb.append(value);", 
          "type": "Delete", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "case SYNTHETIC_BLOCK_PROP:", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1523/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:50.715114280 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"BLOCK\";\n   }\n \n   private static class NumberNode extends Node {\n@@ -971,7 +944,6 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1523/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:50.715114280 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1620/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:51.548258024 -0500\n@@ -952,7 +952,8 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n         sb.append(lineno);\n       }\n     }\n@@ -1437,7 +1438,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1620/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:51.548258024 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 967, 
          "faulty": "sb.append(\": \");", 
          "type": "InsertBefore", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1545/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:23.607426195 -0500\n@@ -964,7 +964,8 @@\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n-        sb.append(\": \");\n+        toString(sb, printSource, printAnnotations, printType);\n+\t\tsb.append(\": \");\n         String value;\n         switch (type) {\n           default:\n@@ -1408,11 +1409,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1545/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:23.611426233 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/SourceFile.java", 
          "line": 303, 
          "faulty": "return fileName;", 
          "type": "InsertBefore", 
          "seed": "if (code.length() == 0) {\n  return null;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:04:31.928731294 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1458/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:50:35.570399611 -0500\n@@ -300,7 +300,10 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    if (code.length() == 0) {\n+\t\treturn null;\n+\t}\n+\treturn fileName;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1458/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:35.574399649 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 963, 
          "faulty": "int type=keys[i];", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_880/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:34:31.576775446 -0500\n@@ -960,7 +960,9 @@\n     if (printAnnotations) {\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n-        int type = keys[i];\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\t\tint type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n@@ -1408,11 +1410,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_880/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:34:31.580775484 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 974, 
          "faulty": "sb.append(value);", 
          "type": "Delete", 
          "seed": "sb.append('\\n');"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_208/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:42.718226698 -0500\n@@ -971,7 +971,6 @@\n             value = x.toString();\n             break;\n         }\n-        sb.append(value);\n         sb.append(']');\n       }\n     }\n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_208/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:15:42.774227145 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 967, 
          "faulty": "sb.append(\": \");", 
          "type": "Replace", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1509/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:35.198966964 -0500\n@@ -964,7 +964,7 @@\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n-        sb.append(\": \");\n+        toString(sb, printSource, printAnnotations, printType);\n         String value;\n         switch (type) {\n           default:\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1509/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:35.198966964 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 746, 
          "faulty": "assignedToUnknownValue=true;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 343, 
          "faulty": "return String.valueOf(intValue);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1317/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:47:42.644738873 -0500\n@@ -340,7 +340,7 @@\n \n     @Override\n     public String toString() {\n-      return String.valueOf(intValue);\n+      return null;\n     }\n \n     @Override\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1317/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:47:42.648738912 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n@@ -741,9 +736,7 @@\n             assignedToUnknownValue = value != null &&\n                 !NodeUtil.isLiteralValue(value, true);\n           } else {\n-            // This was initialized to a function arg or a catch param\n-            // or a for...in variable.\n-            assignedToUnknownValue = true;\n+            break;\n           }\n \n           boolean maybeEscaped = false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Replace", 
          "seed": "if (printType) {\n  if (jsType != null) {\n    String jsTypeString=jsType.toString();\n    if (jsTypeString != null) {\n      sb.append(\" : \");\n      sb.append(jsTypeString);\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1298/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:47:09.360415519 -0500\n@@ -953,7 +953,15 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n+        if (printType) {\n+\t\t\tif (jsType != null) {\n+\t\t\t\tString jsTypeString = jsType.toString();\n+\t\t\t\tif (jsTypeString != null) {\n+\t\t\t\t\tsb.append(\" : \");\n+\t\t\t\t\tsb.append(jsTypeString);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1298/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:47:09.364415557 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 964, 
          "faulty": "PropListItem x=lookupProperty(type);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1542/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:52:16.043354509 -0500\n@@ -961,7 +961,8 @@\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n-        PropListItem x = lookupProperty(type);\n+        parent = null;\n+\t\tPropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n         sb.append(\": \");\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1542/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:52:16.043354509 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/SourceFile.java", 
          "line": 303, 
          "faulty": "return fileName;", 
          "type": "InsertBefore", 
          "seed": "if (code.length() == 0) {\n  return null;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 398, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:04:31.928731294 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1455/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:50:32.746372688 -0500\n@@ -300,7 +300,10 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    if (code.length() == 0) {\n+\t\treturn null;\n+\t}\n+\treturn fileName;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1455/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:32.746372688 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1452/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:29.990346408 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:04:31.952731295 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1452/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/InputId.java\t2018-12-01 10:50:29.994346446 -0500\n@@ -71,6 +71,6 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    return \"ADD\";\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 966, 
          "faulty": "sb.append(propToString(type));", 
          "type": "InsertBefore", 
          "seed": "if (printSource) {\n  int lineno=getLineno();\n  if (lineno != -1) {\n    sb.append(' ');\n    sb.append(lineno);\n  }\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Replace", 
          "seed": "if (printType) {\n  if (jsType != null) {\n    String jsTypeString=jsType.toString();\n    if (jsTypeString != null) {\n      sb.append(\" : \");\n      sb.append(jsTypeString);\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1129/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:42:18.717492231 -0500\n@@ -953,7 +953,15 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n+        if (printType) {\n+\t\t\tif (jsType != null) {\n+\t\t\t\tString jsTypeString = jsType.toString();\n+\t\t\t\tif (jsTypeString != null) {\n+\t\t\t\t\tsb.append(\" : \");\n+\t\t\t\t\tsb.append(jsTypeString);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n       }\n     }\n \n@@ -963,7 +971,14 @@\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n-        sb.append(propToString(type));\n+        if (printSource) {\n+\t\t\tint lineno = getLineno();\n+\t\t\tif (lineno != -1) {\n+\t\t\t\tsb.append(' ');\n+\t\t\t\tsb.append(lineno);\n+\t\t\t}\n+\t\t}\n+\t\tsb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n         switch (type) {\n@@ -1408,11 +1423,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1129/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:42:18.717492231 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_791/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:31:41.407131281 -0500\n@@ -952,7 +952,6 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n         sb.append(lineno);\n       }\n     }\n@@ -1408,11 +1407,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_791/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:31:41.407131281 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 397, 
          "faulty": "argList.removeChild(lastArg);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1427, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1445/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:22.962279369 -0500\n@@ -1424,7 +1424,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1445/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:22.966279407 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 964, 
          "faulty": "PropListItem x=lookupProperty(type);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(keys);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1599/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:30.472058911 -0500\n@@ -961,7 +961,8 @@\n       int[] keys = getSortedPropTypes();\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n-        PropListItem x = lookupProperty(type);\n+        Arrays.sort(keys);\n+\t\tPropListItem x = lookupProperty(type);\n         sb.append(\" [\");\n         sb.append(propToString(type));\n         sb.append(\": \");\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1599/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:30.472058911 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 943, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 867, 
          "faulty": "count--;", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1344/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:48:18.145082203 -0500\n@@ -864,7 +864,9 @@\n \n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n-      count--;\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n+\tcount--;\n       keys[count] = x.getType();\n     }\n \n@@ -937,14 +939,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1344/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:48:18.149082241 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/SourceFile.java", 
          "line": 303, 
          "faulty": "return fileName;", 
          "type": "InsertBefore", 
          "seed": "if (code.length() == 0) {\n  return null;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:04:31.928731294 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1285/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:46:46.032187940 -0500\n@@ -300,7 +300,10 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    if (code.length() == 0) {\n+\t\treturn null;\n+\t}\n+\treturn fileName;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1285/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:46:46.032187940 -0500\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1285/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:46:46.036187980 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1448/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:50:25.714305624 -0500\n@@ -952,7 +952,7 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n+        parent = null;\n         sb.append(lineno);\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1448/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:50:25.714305624 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 133, 
          "faulty": "return \"input_id\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1213/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:44:50.599047368 -0500\n@@ -130,7 +130,7 @@\n         case DIRECT_EVAL:        return \"direct_eval\";\n         case FREE_CALL:          return \"free_call\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n+        case INPUT_ID:  return \"PARAM_LIST\";\n         case LENGTH:    return \"length\";\n         case SLASH_V:   return \"slash_v\";\n         case INFERRED_FUNCTION:   return \"inferred\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1213/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:44:50.599047368 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 971, 
          "faulty": "value=x.toString();", 
          "type": "InsertBefore", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/SourceFile.java", 
          "line": 303, 
          "faulty": "return fileName;", 
          "type": "InsertBefore", 
          "seed": "if (code.length() == 0) {\n  return null;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:04:31.928731294 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1611/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:53:41.640164437 -0500\n@@ -300,7 +300,10 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    if (code.length() == 0) {\n+\t\treturn null;\n+\t}\n+\treturn fileName;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1611/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:41.640164437 -0500\n@@ -968,7 +968,20 @@\n         String value;\n         switch (type) {\n           default:\n-            value = x.toString();\n+            {\n+\t\t\t\tif (type == Token.FUNCTION) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tif (first == null || first.getType() != Token.NAME) {\n+\t\t\t\t\t\tsb.append(\"<invalid>\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsb.append(first.getString());\n+\t\t\t\t\t}\n+\t\t\t\t} else if (type == Token.NUMBER) {\n+\t\t\t\t\tsb.append(' ');\n+\t\t\t\t\tsb.append(getDouble());\n+\t\t\t\t}\n+\t\t\t\tvalue = x.toString();\n+\t\t\t}\n             break;\n         }\n         sb.append(value);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1611/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:41.644164474 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 965, 
          "faulty": "sb.append(\" [\");", 
          "type": "Replace", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 398, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1618/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:53:50.036243745 -0500\n@@ -962,7 +962,7 @@\n       for (int i = 0; i < keys.length; i++) {\n         int type = keys[i];\n         PropListItem x = lookupProperty(type);\n-        sb.append(\" [\");\n+        toString(sb, printSource, printAnnotations, printType);\n         sb.append(propToString(type));\n         sb.append(\": \");\n         String value;\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n@@ -1437,7 +1433,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1618/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:53:50.036243745 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 112, 
          "faulty": "switch (propType) {\ncase VAR_ARGS_NAME:\n  return \"var_args_name\";\ncase JSDOC_INFO_PROP:\nreturn \"jsdoc_info\";\ncase INCRDECR_PROP:\nreturn \"incrdecr\";\ncase QUOTED_PROP:\nreturn \"quoted\";\ncase OPT_ARG_NAME:\nreturn \"opt_arg\";\ncase SYNTHETIC_BLOCK_PROP:\nreturn \"synthetic\";\ncase EMPTY_BLOCK:\nreturn \"empty_block\";\ncase ORIGINALNAME_PROP:\nreturn \"originalname\";\ncase SIDE_EFFECT_FLAGS:\nreturn \"side_effect_flags\";\ncase IS_CONSTANT_NAME:\nreturn \"is_constant_name\";\ncase IS_NAMESPACE:\nreturn \"is_namespace\";\ncase IS_DISPATCHER:\nreturn \"is_dispatcher\";\ncase DIRECTIVES:\nreturn \"directives\";\ncase DIRECT_EVAL:\nreturn \"direct_eval\";\ncase FREE_CALL:\nreturn \"free_call\";\ncase STATIC_SOURCE_FILE:\nreturn \"source_file\";\ncase INPUT_ID:\nreturn \"input_id\";\ncase LENGTH:\nreturn \"length\";\ncase SLASH_V:\nreturn \"slash_v\";\ncase INFERRED_FUNCTION:\nreturn \"inferred\";\ndefault :\nthrow new IllegalStateException(\"unexpect prop id \" + propType);\n}", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 133, 
          "faulty": "case INPUT_ID:", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1513/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:51:39.343006321 -0500\n@@ -109,34 +109,7 @@\n       POST_FLAG = 0x2;\n \n   private static final String propToString(int propType) {\n-      switch (propType) {\n-        case VAR_ARGS_NAME:      return \"var_args_name\";\n-\n-        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n-\n-        case INCRDECR_PROP:      return \"incrdecr\";\n-        case QUOTED_PROP:        return \"quoted\";\n-        case OPT_ARG_NAME:       return \"opt_arg\";\n-\n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK:        return \"empty_block\";\n-        case ORIGINALNAME_PROP:  return \"originalname\";\n-        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n-\n-        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n-        case IS_NAMESPACE:       return \"is_namespace\";\n-        case IS_DISPATCHER:      return \"is_dispatcher\";\n-        case DIRECTIVES:         return \"directives\";\n-        case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n-        case STATIC_SOURCE_FILE:    return \"source_file\";\n-        case INPUT_ID:  return \"input_id\";\n-        case LENGTH:    return \"length\";\n-        case SLASH_V:   return \"slash_v\";\n-        case INFERRED_FUNCTION:   return \"inferred\";\n-        default:\n-          throw new IllegalStateException(\"unexpect prop id \" + propType);\n-      }\n+      return \"SCRIPT\";\n   }\n \n   private static class NumberNode extends Node {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1513/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:51:39.347006359 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/SourceFile.java", 
          "line": 303, 
          "faulty": "return fileName;", 
          "type": "InsertBefore", 
          "seed": "if (code.length() == 0) {\n  return null;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 956, 
          "faulty": "sb.append(lineno);", 
          "type": "Replace", 
          "seed": "if (printType) {\n  if (jsType != null) {\n    String jsTypeString=jsType.toString();\n    if (jsTypeString != null) {\n      sb.append(\" : \");\n      sb.append(jsTypeString);\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:04:31.928731294 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_729/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/SourceFile.java\t2018-12-01 10:29:40.213907601 -0500\n@@ -300,7 +300,10 @@\n \n   @Override\n   public String toString() {\n-    return fileName;\n+    if (code.length() == 0) {\n+\t\treturn null;\n+\t}\n+\treturn fileName;\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_729/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:29:40.213907601 -0500\n@@ -953,7 +953,15 @@\n       int lineno = getLineno();\n       if (lineno != -1) {\n         sb.append(' ');\n-        sb.append(lineno);\n+        if (printType) {\n+\t\t\tif (jsType != null) {\n+\t\t\t\tString jsTypeString = jsType.toString();\n+\t\t\t\tif (jsTypeString != null) {\n+\t\t\t\t\tsb.append(\" : \");\n+\t\t\t\t\tsb.append(jsTypeString);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_729/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:29:40.213907601 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 121, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1630/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:54:02.780364083 -0500\n@@ -118,7 +118,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return \"BLOCK\";\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1630/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:54:02.784364120 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 868, 
          "faulty": "keys[count]=x.getType();", 
          "type": "Replace", 
          "seed": "parent=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1278/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:46:38.840117607 -0500\n@@ -865,7 +865,7 @@\n     int[] keys = new int[count];\n     for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n       count--;\n-      keys[count] = x.getType();\n+      parent = null;\n     }\n \n     Arrays.sort(keys);\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1278/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:46:38.840117607 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 955, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 398, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java", 
          "line": 396, 
          "faulty": "if (!referenced.contains(var)) {\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}\n else {\n  break;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:32.176731300 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1132/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:42:21.669523278 -0500\n@@ -952,7 +952,8 @@\n     if (printSource) {\n       int lineno = getLineno();\n       if (lineno != -1) {\n-        sb.append(' ');\n+        Preconditions.checkState(this.propListHead == null,\n+\t\t\t\t\"Node has existing properties.\");\n         sb.append(lineno);\n       }\n     }\n@@ -1408,11 +1409,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"PARAM_LIST\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:04:35.192731368 -0500\n+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_1132/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java\t2018-12-01 10:42:21.669523278 -0500\n@@ -393,12 +393,7 @@\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+        break;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n\n\n"
    }
  ]
}