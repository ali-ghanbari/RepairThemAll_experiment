{
  "repair_end": "2018-12-01 16:32:37.240769", 
  "repair_begin": "2018-12-01 16:05:01.400756", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1509/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:44.646542992 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1509/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:44.650543036 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_671/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:39.992183235 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_671/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:39.996183273 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_235/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:13:23.893207892 -0500\n@@ -226,7 +226,213 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tswitch (token) {\n+\t\t\t\tcase ERROR:\n+\t\t\t\t\treturn \"ERROR\";\n+\t\t\t\tcase RETURN:\n+\t\t\t\t\treturn \"RETURN\";\n+\t\t\t\tcase BITOR:\n+\t\t\t\t\treturn \"BITOR\";\n+\t\t\t\tcase BITXOR:\n+\t\t\t\t\treturn \"BITXOR\";\n+\t\t\t\tcase BITAND:\n+\t\t\t\t\treturn \"BITAND\";\n+\t\t\t\tcase EQ:\n+\t\t\t\t\treturn \"EQ\";\n+\t\t\t\tcase NE:\n+\t\t\t\t\treturn \"NE\";\n+\t\t\t\tcase LT:\n+\t\t\t\t\treturn \"LT\";\n+\t\t\t\tcase LE:\n+\t\t\t\t\treturn \"LE\";\n+\t\t\t\tcase GT:\n+\t\t\t\t\treturn \"GT\";\n+\t\t\t\tcase GE:\n+\t\t\t\t\treturn \"GE\";\n+\t\t\t\tcase LSH:\n+\t\t\t\t\treturn \"LSH\";\n+\t\t\t\tcase RSH:\n+\t\t\t\t\treturn \"RSH\";\n+\t\t\t\tcase URSH:\n+\t\t\t\t\treturn \"URSH\";\n+\t\t\t\tcase ADD:\n+\t\t\t\t\treturn \"ADD\";\n+\t\t\t\tcase SUB:\n+\t\t\t\t\treturn \"SUB\";\n+\t\t\t\tcase MUL:\n+\t\t\t\t\treturn \"MUL\";\n+\t\t\t\tcase DIV:\n+\t\t\t\t\treturn \"DIV\";\n+\t\t\t\tcase MOD:\n+\t\t\t\t\treturn \"MOD\";\n+\t\t\t\tcase NOT:\n+\t\t\t\t\treturn \"NOT\";\n+\t\t\t\tcase BITNOT:\n+\t\t\t\t\treturn \"BITNOT\";\n+\t\t\t\tcase POS:\n+\t\t\t\t\treturn \"POS\";\n+\t\t\t\tcase NEG:\n+\t\t\t\t\treturn \"NEG\";\n+\t\t\t\tcase NEW:\n+\t\t\t\t\treturn \"NEW\";\n+\t\t\t\tcase DELPROP:\n+\t\t\t\t\treturn \"DELPROP\";\n+\t\t\t\tcase TYPEOF:\n+\t\t\t\t\treturn \"TYPEOF\";\n+\t\t\t\tcase GETPROP:\n+\t\t\t\t\treturn \"GETPROP\";\n+\t\t\t\tcase GETELEM:\n+\t\t\t\t\treturn \"GETELEM\";\n+\t\t\t\tcase CALL:\n+\t\t\t\t\treturn \"CALL\";\n+\t\t\t\tcase NAME:\n+\t\t\t\t\treturn \"NAME\";\n+\t\t\t\tcase LABEL_NAME:\n+\t\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\t\tcase NUMBER:\n+\t\t\t\t\treturn \"NUMBER\";\n+\t\t\t\tcase STRING:\n+\t\t\t\t\treturn \"STRING\";\n+\t\t\t\tcase STRING_KEY:\n+\t\t\t\t\treturn \"STRING_KEY\";\n+\t\t\t\tcase NULL:\n+\t\t\t\t\treturn \"NULL\";\n+\t\t\t\tcase THIS:\n+\t\t\t\t\treturn \"THIS\";\n+\t\t\t\tcase FALSE:\n+\t\t\t\t\treturn \"FALSE\";\n+\t\t\t\tcase TRUE:\n+\t\t\t\t\treturn \"TRUE\";\n+\t\t\t\tcase SHEQ:\n+\t\t\t\t\treturn \"SHEQ\";\n+\t\t\t\tcase SHNE:\n+\t\t\t\t\treturn \"SHNE\";\n+\t\t\t\tcase REGEXP:\n+\t\t\t\t\treturn \"REGEXP\";\n+\t\t\t\tcase THROW:\n+\t\t\t\t\treturn \"THROW\";\n+\t\t\t\tcase IN:\n+\t\t\t\t\treturn \"IN\";\n+\t\t\t\tcase INSTANCEOF:\n+\t\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\t\tcase ARRAYLIT:\n+\t\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\t\tcase OBJECTLIT:\n+\t\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\t\tcase TRY:\n+\t\t\t\t\treturn \"TRY\";\n+\t\t\t\tcase PARAM_LIST:\n+\t\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\t\tcase COMMA:\n+\t\t\t\t\treturn \"COMMA\";\n+\t\t\t\tcase ASSIGN:\n+\t\t\t\t\treturn \"ASSIGN\";\n+\t\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\t\tcase ASSIGN_LSH:\n+\t\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\t\tcase ASSIGN_RSH:\n+\t\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\t\tcase ASSIGN_URSH:\n+\t\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\t\tcase ASSIGN_ADD:\n+\t\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\t\tcase ASSIGN_SUB:\n+\t\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\t\tcase ASSIGN_MUL:\n+\t\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\t\tcase ASSIGN_DIV:\n+\t\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\t\tcase ASSIGN_MOD:\n+\t\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\t\tcase HOOK:\n+\t\t\t\t\treturn \"HOOK\";\n+\t\t\t\tcase OR:\n+\t\t\t\t\treturn \"OR\";\n+\t\t\t\tcase AND:\n+\t\t\t\t\treturn \"AND\";\n+\t\t\t\tcase INC:\n+\t\t\t\t\treturn \"INC\";\n+\t\t\t\tcase DEC:\n+\t\t\t\t\treturn \"DEC\";\n+\t\t\t\tcase FUNCTION:\n+\t\t\t\t\treturn \"FUNCTION\";\n+\t\t\t\tcase IF:\n+\t\t\t\t\treturn \"IF\";\n+\t\t\t\tcase SWITCH:\n+\t\t\t\t\treturn \"SWITCH\";\n+\t\t\t\tcase CASE:\n+\t\t\t\t\treturn \"CASE\";\n+\t\t\t\tcase DEFAULT_CASE:\n+\t\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\t\tcase WHILE:\n+\t\t\t\t\treturn \"WHILE\";\n+\t\t\t\tcase DO:\n+\t\t\t\t\treturn \"DO\";\n+\t\t\t\tcase FOR:\n+\t\t\t\t\treturn \"FOR\";\n+\t\t\t\tcase BREAK:\n+\t\t\t\t\treturn \"BREAK\";\n+\t\t\t\tcase CONTINUE:\n+\t\t\t\t\treturn \"CONTINUE\";\n+\t\t\t\tcase VAR:\n+\t\t\t\t\treturn \"VAR\";\n+\t\t\t\tcase WITH:\n+\t\t\t\t\treturn \"WITH\";\n+\t\t\t\tcase CATCH:\n+\t\t\t\t\treturn \"CATCH\";\n+\t\t\t\tcase EMPTY:\n+\t\t\t\t\treturn \"EMPTY\";\n+\t\t\t\tcase BLOCK:\n+\t\t\t\t\treturn \"BLOCK\";\n+\t\t\t\tcase LABEL:\n+\t\t\t\t\treturn \"LABEL\";\n+\t\t\t\tcase EXPR_RESULT:\n+\t\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\t\tcase SCRIPT:\n+\t\t\t\t\treturn \"SCRIPT\";\n+\t\t\t\tcase GETTER_DEF:\n+\t\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\t\tcase SETTER_DEF:\n+\t\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\t\tcase CONST:\n+\t\t\t\t\treturn \"CONST\";\n+\t\t\t\tcase DEBUGGER:\n+\t\t\t\t\treturn \"DEBUGGER\";\n+\t\t\t\tcase CAST:\n+\t\t\t\t\treturn \"CAST\";\n+\t\t\t\tcase ANNOTATION:\n+\t\t\t\t\treturn \"ANNOTATION\";\n+\t\t\t\tcase PIPE:\n+\t\t\t\t\treturn \"PIPE\";\n+\t\t\t\tcase STAR:\n+\t\t\t\t\treturn \"STAR\";\n+\t\t\t\tcase EOC:\n+\t\t\t\t\treturn \"EOC\";\n+\t\t\t\tcase QMARK:\n+\t\t\t\t\treturn \"QMARK\";\n+\t\t\t\tcase ELLIPSIS:\n+\t\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\t\tcase BANG:\n+\t\t\t\t\treturn \"BANG\";\n+\t\t\t\tcase VOID:\n+\t\t\t\t\treturn \"VOID\";\n+\t\t\t\tcase EQUALS:\n+\t\t\t\t\treturn \"EQUALS\";\n+\t\t\t\tcase LB:\n+\t\t\t\t\treturn \"LB\";\n+\t\t\t\tcase LC:\n+\t\t\t\t\treturn \"LC\";\n+\t\t\t\tcase COLON:\n+\t\t\t\t\treturn \"COLON\";\n+\t\t\t\t}\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_235/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:23.893207892 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_474/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:14.274764411 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_474/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:14.278764449 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_456/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:03.926666277 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_456/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:03.926666277 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_718/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:19:13.292515057 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_718/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:13.292515057 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1491/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:30.746393830 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1491/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:30.746393830 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_590/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:40.687598477 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_590/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:40.687598477 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1180/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:41.895911212 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1723/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:17.124172021 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_369/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:03.174099386 -0500\n@@ -163,7 +163,6 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -402,9 +401,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1322/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:31.405106638 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1322/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:31.405106638 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1072/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:23:26.955096299 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1072/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:26.955096299 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1072/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:26.955096299 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1592/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:39.683132376 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1821/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:29.060937188 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1821/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:32:29.060937188 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "case SUB:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_345/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:14:45.773939859 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_345/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:45.773939859 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1297/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:11.416889651 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1297/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:26:11.416889651 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        break;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_198/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:59.584999331 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_198/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:59.588999365 -0500\n@@ -221,9 +221,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_647/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:22.236007267 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1147/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:18.999658897 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_86/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:35.180177563 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_86/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:35.184177603 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_86/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:35.184177603 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_153/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:26.428701214 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_153/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:12:26.432701255 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        break;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_302/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:14.165652426 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1691/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:52.935914331 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1691/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:30:52.939914373 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_321/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:29.117787695 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 131, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_711/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:08.964471803 -0500\n@@ -128,7 +128,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"BITOR\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_711/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:08.968471844 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_946/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:01.570219363 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_675/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:18:42.580208940 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_675/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:42.584208981 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_339/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:41.337899187 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_339/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:41.337899187 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_891/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:18.557780201 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_891/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:18.557780201 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1172/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:35.731843377 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1172/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:35.735843421 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1656/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:24.991616328 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_802/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:14.141126665 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_802/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:20:14.145126706 -0500\n@@ -160,7 +160,6 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_802/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:14.145126706 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_654/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:18:27.624060589 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_654/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:27.628060628 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_388/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:17.158228367 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_388/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:17.158228367 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_304/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:15.033660243 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_304/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:14:15.033660243 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        return false;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_614/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:57.635764700 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_205/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:03.849035587 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_205/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:03.853035620 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_186/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:51.548931400 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_186/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:51.548931400 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_857/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:54.569536193 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_857/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:54.573536234 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_492/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:27.514890569 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_971/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:18.286390548 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_121/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:01.232443176 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_121/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:01.232443176 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_360/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:56.198035410 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_690/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:53.292315492 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_386/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:16.294220371 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_386/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:16.294220371 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1542/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:05.006761244 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1449/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:59.550058549 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_449/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:59.326622790 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_449/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:59.326622790 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1365/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:59.537411275 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1149/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:19.851668303 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1060/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:19.911023733 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1645/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:17.971541410 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1645/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:30:17.971541410 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_635/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:18:13.231918312 -0500\n@@ -226,7 +226,210 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase CAST:\n+\t\t\t\treturn \"CAST\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\tcase LB:\n+\t\t\t\treturn \"LB\";\n+\t\t\tcase LC:\n+\t\t\t\treturn \"LC\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_635/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:13.235918353 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_661/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:31.976103705 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_661/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:18:31.976103705 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        return false;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1246/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:31.992460192 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1246/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:25:31.992460192 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_535/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:58.747190637 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_535/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:58.751190676 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_163/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:34.304782089 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_163/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:34.308782130 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1010/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:22:47.222687476 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           ;\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1010/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:47.226687517 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1093/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:39.459225198 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1093/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:39.459225198 -0500\n@@ -203,27 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n-    }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1706/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:04.148033807 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1706/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:31:04.152033851 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -202,9 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1210/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:05.400169276 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1210/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:25:05.400169276 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_398/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:24.054292321 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_398/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:24.058292359 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_431/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:46.866505435 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          break;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1077/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:29.663124206 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1077/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:29.663124206 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -206,11 +205,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_440/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:53.002563146 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          break;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_959/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:22:09.518300724 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_959/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:09.522300764 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1638/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:13.695495765 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1638/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:30:13.695495765 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -202,9 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_271/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:13:49.333430766 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_271/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:49.333430766 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_512/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:42.943038378 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_512/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:42.955038493 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1099/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:23:42.903260720 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1099/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:42.903260720 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1547/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:08.494798608 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1547/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:29:08.498798651 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        break;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1547/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:08.498798651 -0500\n@@ -221,9 +221,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_834/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:37.077358725 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_834/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:20:37.077358725 -0500\n@@ -160,7 +160,6 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1411, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_73/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:25.440078596 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_73/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:25.444078636 -0500\n@@ -1408,11 +1408,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_89/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:36.908195141 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_89/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:36.908195141 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_753/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:39.000772688 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_757/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:40.784790610 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1022/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:54.422761470 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1022/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:54.422761470 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_957/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:08.634291671 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_957/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:08.634291671 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1008/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:46.370678723 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1008/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:46.374678764 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -202,9 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1388/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:16.253591903 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1388/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:27:16.257591946 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1632/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:10.167458098 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1081/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:31.463142757 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1081/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:31.463142757 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1518/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:50.742608368 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_461/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:06.494690591 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_924/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:44.670046575 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_924/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:44.674046615 -0500\n@@ -122,7 +122,7 @@\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_514/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:43.839046988 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_514/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:43.843047026 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n@@ -221,9 +220,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1243/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:25:30.248441144 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1243/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:30.252441188 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1243/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:25:30.252441188 -0500\n@@ -221,9 +221,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_103/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:47.600304032 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = null;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1384/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:13.697564301 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_554/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:12.739326114 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_554/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:12.743326153 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_724/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:17.020552342 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_724/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:17.020552342 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1636/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:12.815486371 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1636/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:30:12.815486371 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_521/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:48.167088614 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_521/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:48.167088614 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1269/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:25:49.448650601 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1269/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:49.448650601 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1526/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:55.018654211 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1526/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:55.018654211 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_605/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:50.439694029 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_605/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:50.439694029 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1319/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:29.673087854 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1319/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:29.673087854 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_59/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:11:14.023962846 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_59/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:14.023962846 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1012/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:48.078696271 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1056/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:17.134995145 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1056/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:17.138995186 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_734/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:24.956631799 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_632/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:18:11.499901224 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_632/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:11.499901224 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_919/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:21:41.114010255 -0500\n@@ -226,7 +226,210 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase CAST:\n+\t\t\t\treturn \"CAST\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\tcase LB:\n+\t\t\t\treturn \"LB\";\n+\t\t\tcase LC:\n+\t\t\t\treturn \"LC\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_919/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:41.118010296 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_919/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:41.118010296 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -205,26 +204,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1482/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:23.766318875 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1580/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:29:30.979039284 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1580/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:30.979039284 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1580/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:30.983039326 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_138/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:12:15.020584249 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_138/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:15.024584290 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1625/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:04.819400989 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1693/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:53.819923753 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,12 +417,9 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1079/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:30.519133028 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1410/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:30.957750569 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1068/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:24.255068480 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1068/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:24.259068521 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -221,9 +220,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_27/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:47.195691951 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_27/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:47.195691951 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1604/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:48.367225214 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_165/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:35.184791131 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_165/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:35.184791131 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -205,26 +204,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1222/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:25:15.128275824 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1222/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:15.128275824 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1222/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:25:15.132275869 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_600/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:46.847658804 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_996/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:36.730579727 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_996/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:36.730579727 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1560/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:17.118890958 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1560/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:17.118890958 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -221,9 +220,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_832/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:36.197349808 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_832/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:36.201349849 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1622/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:03.123382875 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_771/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:52.036903772 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_771/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:52.036903772 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1382/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:12.757554148 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1782/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:31:59.692625007 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return null;\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1782/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:59.696625049 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1782/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:31:59.696625049 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1504/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:41.126505231 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1504/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:41.130505274 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_619/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:01.171799474 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_351/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:49.301972281 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_351/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:49.301972281 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1832/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:34.392993840 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1832/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:32:34.392993840 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1734/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:24.956255412 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_218/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:12.865112715 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_218/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:13:12.865112715 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        return false;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_218/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:12.869112750 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_77/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:28.272107352 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_77/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:28.276107392 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -206,11 +205,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_229/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:20.389177554 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_229/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:20.389177554 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1427, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_879/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:10.629699479 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_879/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:10.629699479 -0500\n@@ -1424,7 +1424,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1084/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:33.375162467 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1084/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:33.375162467 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_391/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:18.890244409 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_391/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:18.894244446 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1416/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:34.465788393 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_325/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:14:31.725811421 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_325/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:31.729811457 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_325/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:31.729811457 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_447/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:58.466614670 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_447/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:58.466614670 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_196/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:58.560990646 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_381/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:15:12.794188013 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_381/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:12.794188013 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1341/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:26:44.733251071 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1341/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:44.733251071 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1341/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:44.733251071 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_780/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:57.296956742 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_780/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:57.296956742 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1104/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:23:45.527288208 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1104/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:45.531288252 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_269/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:48.401422523 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_237/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:24.829216012 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_237/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:24.829216012 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1193/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:51.924021428 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1193/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:51.924021428 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_716/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:19:12.440506539 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_716/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:12.440506539 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1074/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:27.843105450 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          break;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_985/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:22:29.878509411 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_985/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:29.882509452 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1830/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:33.468984023 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1830/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:32:33.468984023 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1472/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:17.570252309 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          break;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1472/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:28:17.570252309 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        return false;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_406/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:29.318341291 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1095/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:40.323234109 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1095/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:40.327234150 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1750/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:31:36.888382416 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1750/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:36.892382458 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1750/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:31:36.892382458 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_816/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:25.589242399 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_898/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:23.833833960 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_898/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:23.833833960 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_418/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:37.966422013 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_418/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:37.970422050 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_889/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:17.697771441 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_889/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:17.697771441 -0500\n@@ -202,29 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1029/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:58.798806462 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1029/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:58.798806462 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_912/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:35.889956924 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_912/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:35.889956924 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1138/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:24:11.947580986 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1138/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:24:11.951581030 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1138/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:11.951581030 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1138/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:11.951581030 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_200/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:00.441006598 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1419/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:36.253807668 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1101/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:43.759269550 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1101/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:43.759269550 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1653/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:23.227597504 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1653/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:30:23.227597504 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_993/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:35.022562196 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_993/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:35.022562196 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1564/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:19.718918790 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1564/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:19.718918790 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1540/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:04.154752117 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1540/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:04.154752117 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_875/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:08.041673144 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_875/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:08.041673144 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n@@ -221,9 +216,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1225/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:16.868294867 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1225/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:25:16.868294867 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1167/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:32.055802891 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1404/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:27.537713683 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1404/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:27:27.541713726 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1601/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:46.623206572 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_595/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:17:44.135632232 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_595/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:44.135632232 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_595/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:44.135632232 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1475/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:19.338271307 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1475/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:19.338271307 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1423/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:38.873835906 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1423/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:27:38.873835906 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1452/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:28:01.262076968 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"SUB\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1452/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:01.262076968 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1089/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:36.883198634 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1089/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:36.883198634 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_524/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:49.915105445 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_988/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:31.606527140 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_988/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:31.606527140 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1577/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:29:29.271021011 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1577/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:29.271021011 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1577/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:29.271021011 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_433/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:15:47.758513815 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_433/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:47.762513852 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_433/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:47.762513852 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_494/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:28.370898747 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_328/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:14:33.457827197 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_328/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:33.457827197 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_328/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:33.457827197 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1359/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:55.209364463 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,12 +416,8 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1359/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:55.209364463 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_790/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:04.341027749 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_790/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:20:04.341027749 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        break;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1806/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:17.836817907 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1806/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:32:17.836817907 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_828/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:33.561323103 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1825/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:30.764955294 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,13 +416,11 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1197/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:24:54.624051075 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1197/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:54.624051075 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1197/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:54.624051075 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_865/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:00.053591914 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,12 +416,8 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_477/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:15.982780648 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_477/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:15.982780648 -0500\n@@ -198,13 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_459/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:16:05.638682484 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return null;\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_459/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:05.642682521 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1265/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:46.784621568 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_472/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:13.418756277 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_472/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:13.418756277 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1036/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:23:03.118850893 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1036/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:03.122850934 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1036/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:03.122850934 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -198,10 +197,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n@@ -221,9 +216,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_509/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:41.211021742 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1191/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:51.028011587 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1191/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:51.028011587 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1227/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:25:17.804305108 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"SUB\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1227/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:17.808305153 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1119/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:56.791413209 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1231/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:20.456334119 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_818/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:26.453251142 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_818/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:26.453251142 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_428/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:45.154489361 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_428/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:45.154489361 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1755/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:40.288418596 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1755/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:31:40.288418596 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1568/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:22.350946962 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1568/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:22.354947005 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1292/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:26:07.780850127 -0500\n@@ -226,7 +226,213 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tswitch (token) {\n+\t\t\t\tcase ERROR:\n+\t\t\t\t\treturn \"ERROR\";\n+\t\t\t\tcase RETURN:\n+\t\t\t\t\treturn \"RETURN\";\n+\t\t\t\tcase BITOR:\n+\t\t\t\t\treturn \"BITOR\";\n+\t\t\t\tcase BITXOR:\n+\t\t\t\t\treturn \"BITXOR\";\n+\t\t\t\tcase BITAND:\n+\t\t\t\t\treturn \"BITAND\";\n+\t\t\t\tcase EQ:\n+\t\t\t\t\treturn \"EQ\";\n+\t\t\t\tcase NE:\n+\t\t\t\t\treturn \"NE\";\n+\t\t\t\tcase LT:\n+\t\t\t\t\treturn \"LT\";\n+\t\t\t\tcase LE:\n+\t\t\t\t\treturn \"LE\";\n+\t\t\t\tcase GT:\n+\t\t\t\t\treturn \"GT\";\n+\t\t\t\tcase GE:\n+\t\t\t\t\treturn \"GE\";\n+\t\t\t\tcase LSH:\n+\t\t\t\t\treturn \"LSH\";\n+\t\t\t\tcase RSH:\n+\t\t\t\t\treturn \"RSH\";\n+\t\t\t\tcase URSH:\n+\t\t\t\t\treturn \"URSH\";\n+\t\t\t\tcase ADD:\n+\t\t\t\t\treturn \"ADD\";\n+\t\t\t\tcase SUB:\n+\t\t\t\t\treturn \"SUB\";\n+\t\t\t\tcase MUL:\n+\t\t\t\t\treturn \"MUL\";\n+\t\t\t\tcase DIV:\n+\t\t\t\t\treturn \"DIV\";\n+\t\t\t\tcase MOD:\n+\t\t\t\t\treturn \"MOD\";\n+\t\t\t\tcase NOT:\n+\t\t\t\t\treturn \"NOT\";\n+\t\t\t\tcase BITNOT:\n+\t\t\t\t\treturn \"BITNOT\";\n+\t\t\t\tcase POS:\n+\t\t\t\t\treturn \"POS\";\n+\t\t\t\tcase NEG:\n+\t\t\t\t\treturn \"NEG\";\n+\t\t\t\tcase NEW:\n+\t\t\t\t\treturn \"NEW\";\n+\t\t\t\tcase DELPROP:\n+\t\t\t\t\treturn \"DELPROP\";\n+\t\t\t\tcase TYPEOF:\n+\t\t\t\t\treturn \"TYPEOF\";\n+\t\t\t\tcase GETPROP:\n+\t\t\t\t\treturn \"GETPROP\";\n+\t\t\t\tcase GETELEM:\n+\t\t\t\t\treturn \"GETELEM\";\n+\t\t\t\tcase CALL:\n+\t\t\t\t\treturn \"CALL\";\n+\t\t\t\tcase NAME:\n+\t\t\t\t\treturn \"NAME\";\n+\t\t\t\tcase LABEL_NAME:\n+\t\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\t\tcase NUMBER:\n+\t\t\t\t\treturn \"NUMBER\";\n+\t\t\t\tcase STRING:\n+\t\t\t\t\treturn \"STRING\";\n+\t\t\t\tcase STRING_KEY:\n+\t\t\t\t\treturn \"STRING_KEY\";\n+\t\t\t\tcase NULL:\n+\t\t\t\t\treturn \"NULL\";\n+\t\t\t\tcase THIS:\n+\t\t\t\t\treturn \"THIS\";\n+\t\t\t\tcase FALSE:\n+\t\t\t\t\treturn \"FALSE\";\n+\t\t\t\tcase TRUE:\n+\t\t\t\t\treturn \"TRUE\";\n+\t\t\t\tcase SHEQ:\n+\t\t\t\t\treturn \"SHEQ\";\n+\t\t\t\tcase SHNE:\n+\t\t\t\t\treturn \"SHNE\";\n+\t\t\t\tcase REGEXP:\n+\t\t\t\t\treturn \"REGEXP\";\n+\t\t\t\tcase THROW:\n+\t\t\t\t\treturn \"THROW\";\n+\t\t\t\tcase IN:\n+\t\t\t\t\treturn \"IN\";\n+\t\t\t\tcase INSTANCEOF:\n+\t\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\t\tcase ARRAYLIT:\n+\t\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\t\tcase OBJECTLIT:\n+\t\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\t\tcase TRY:\n+\t\t\t\t\treturn \"TRY\";\n+\t\t\t\tcase PARAM_LIST:\n+\t\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\t\tcase COMMA:\n+\t\t\t\t\treturn \"COMMA\";\n+\t\t\t\tcase ASSIGN:\n+\t\t\t\t\treturn \"ASSIGN\";\n+\t\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\t\tcase ASSIGN_LSH:\n+\t\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\t\tcase ASSIGN_RSH:\n+\t\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\t\tcase ASSIGN_URSH:\n+\t\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\t\tcase ASSIGN_ADD:\n+\t\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\t\tcase ASSIGN_SUB:\n+\t\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\t\tcase ASSIGN_MUL:\n+\t\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\t\tcase ASSIGN_DIV:\n+\t\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\t\tcase ASSIGN_MOD:\n+\t\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\t\tcase HOOK:\n+\t\t\t\t\treturn \"HOOK\";\n+\t\t\t\tcase OR:\n+\t\t\t\t\treturn \"OR\";\n+\t\t\t\tcase AND:\n+\t\t\t\t\treturn \"AND\";\n+\t\t\t\tcase INC:\n+\t\t\t\t\treturn \"INC\";\n+\t\t\t\tcase DEC:\n+\t\t\t\t\treturn \"DEC\";\n+\t\t\t\tcase FUNCTION:\n+\t\t\t\t\treturn \"FUNCTION\";\n+\t\t\t\tcase IF:\n+\t\t\t\t\treturn \"IF\";\n+\t\t\t\tcase SWITCH:\n+\t\t\t\t\treturn \"SWITCH\";\n+\t\t\t\tcase CASE:\n+\t\t\t\t\treturn \"CASE\";\n+\t\t\t\tcase DEFAULT_CASE:\n+\t\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\t\tcase WHILE:\n+\t\t\t\t\treturn \"WHILE\";\n+\t\t\t\tcase DO:\n+\t\t\t\t\treturn \"DO\";\n+\t\t\t\tcase FOR:\n+\t\t\t\t\treturn \"FOR\";\n+\t\t\t\tcase BREAK:\n+\t\t\t\t\treturn \"BREAK\";\n+\t\t\t\tcase CONTINUE:\n+\t\t\t\t\treturn \"CONTINUE\";\n+\t\t\t\tcase VAR:\n+\t\t\t\t\treturn \"VAR\";\n+\t\t\t\tcase WITH:\n+\t\t\t\t\treturn \"WITH\";\n+\t\t\t\tcase CATCH:\n+\t\t\t\t\treturn \"CATCH\";\n+\t\t\t\tcase EMPTY:\n+\t\t\t\t\treturn \"EMPTY\";\n+\t\t\t\tcase BLOCK:\n+\t\t\t\t\treturn \"BLOCK\";\n+\t\t\t\tcase LABEL:\n+\t\t\t\t\treturn \"LABEL\";\n+\t\t\t\tcase EXPR_RESULT:\n+\t\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\t\tcase SCRIPT:\n+\t\t\t\t\treturn \"SCRIPT\";\n+\t\t\t\tcase GETTER_DEF:\n+\t\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\t\tcase SETTER_DEF:\n+\t\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\t\tcase CONST:\n+\t\t\t\t\treturn \"CONST\";\n+\t\t\t\tcase DEBUGGER:\n+\t\t\t\t\treturn \"DEBUGGER\";\n+\t\t\t\tcase CAST:\n+\t\t\t\t\treturn \"CAST\";\n+\t\t\t\tcase ANNOTATION:\n+\t\t\t\t\treturn \"ANNOTATION\";\n+\t\t\t\tcase PIPE:\n+\t\t\t\t\treturn \"PIPE\";\n+\t\t\t\tcase STAR:\n+\t\t\t\t\treturn \"STAR\";\n+\t\t\t\tcase EOC:\n+\t\t\t\t\treturn \"EOC\";\n+\t\t\t\tcase QMARK:\n+\t\t\t\t\treturn \"QMARK\";\n+\t\t\t\tcase ELLIPSIS:\n+\t\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\t\tcase BANG:\n+\t\t\t\t\treturn \"BANG\";\n+\t\t\t\tcase VOID:\n+\t\t\t\t\treturn \"VOID\";\n+\t\t\t\tcase EQUALS:\n+\t\t\t\t\treturn \"EQUALS\";\n+\t\t\t\tcase LB:\n+\t\t\t\t\treturn \"LB\";\n+\t\t\t\tcase LC:\n+\t\t\t\t\treturn \"LC\";\n+\t\t\t\tcase COLON:\n+\t\t\t\t\treturn \"COLON\";\n+\t\t\t\t}\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1292/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:07.780850127 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1367/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:00.397420575 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1367/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:27:00.401420618 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_487/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:24.098857956 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_487/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:24.098857956 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_586/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:38.031572497 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_586/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:38.035572536 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1135/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:24:10.115560731 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1135/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:10.115560731 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,12 +417,9 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1135/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:24:10.115560731 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        return false;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1135/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:10.119560775 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_231/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:21.277185234 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_231/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:21.281185269 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -221,9 +220,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_333/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:36.965859204 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_519/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:47.259079876 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,12 +417,9 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_400/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:15:24.958300722 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_400/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:24.962300758 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_400/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:15:24.962300758 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        return false;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_400/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:24.962300758 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1346/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:47.293278791 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_680/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:46.204244960 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_680/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:46.204244960 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_244/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:29.257254509 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1042/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:06.678887518 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_699/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:59.420376554 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_699/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:59.424376594 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_659/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:18:31.116095182 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_659/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:31.116095182 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_740/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:19:29.276675100 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_740/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:29.280675140 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_740/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:29.280675140 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_215/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:13:11.121097747 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_215/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:11.121097747 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_215/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:11.125097780 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_10/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:32.403543312 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1789/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:04.984681279 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1789/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:32:04.984681279 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_820/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:20:27.509261828 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_820/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:27.509261828 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1477/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:28:20.194280503 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1477/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:20.194280503 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1818/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:27.356919081 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1026/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:57.058788570 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1026/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:57.058788570 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1159/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:26.859745623 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1159/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:26.859745623 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1775/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:54.352568215 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1014/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:48.934705066 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1014/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:22:48.934705066 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        return false;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1014/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:48.938705107 -0500\n@@ -221,9 +221,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_952/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:06.002264724 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_961/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:10.398309735 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1523/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:53.310635901 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1523/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:53.314635944 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_298/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:11.597629326 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_298/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:11.597629326 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1552/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:11.922835322 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1552/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:11.922835322 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_933/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:51.574117127 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_933/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:51.574117127 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n@@ -221,9 +218,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_98/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:44.016267507 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_98/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:44.020267548 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_451/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:00.178630838 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1431/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:44.925901113 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1431/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:27:44.929901156 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1034/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:02.246841923 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_420/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:38.826430059 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_420/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:38.830430097 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_843/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:43.073419513 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_843/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:43.073419513 -0500\n@@ -202,15 +202,7 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1252/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:25:36.268506873 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1252/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:25:36.272506917 -0500\n@@ -203,27 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n-    }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1352/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:26:50.801316765 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1352/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:50.801316765 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_466/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:09.962723467 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_466/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:09.962723467 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_466/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:09.966723506 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_940/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:56.898171566 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_940/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:56.902171607 -0500\n@@ -198,33 +198,9 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1665/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:30:31.851689517 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1665/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:31.855689559 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_119/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:00.372434388 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_119/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:00.372434388 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1427, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_220/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:13.845121136 -0500\n@@ -1424,7 +1424,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_220/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:13.845121136 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_777/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:55.556939215 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_777/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:55.556939215 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1741/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:30.076309914 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1741/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:31:30.076309914 -0500\n@@ -203,14 +203,8 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1440, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1642/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:30:16.267523221 -0500\n@@ -1437,7 +1437,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.sourcePosition = sourcePosition;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1642/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:16.271523264 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1642/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:30:16.271523264 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_188/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:52.412938678 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_188/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:52.416938712 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -203,7 +202,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1157/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:24:25.995736096 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1157/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:25.999736140 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1157/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:24:25.999736140 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1773/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:31:53.496559109 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1773/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:53.500559153 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1773/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:31:53.500559153 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_409/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:31.022357169 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_409/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:31.026357206 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1062/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:20.771032591 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1062/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:20.775032632 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1407/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:29.241732063 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1052/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:14.554968581 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,9 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_222/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:14.777129151 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1770/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:51.776540814 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1283/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:00.864774904 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1283/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:00.864774904 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1066/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:23.331058961 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1066/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:23.335059002 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1038/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:04.002859986 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1038/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:23:04.006860027 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1708/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:05.008042969 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_954/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:06.858273487 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_644/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:20.499990102 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_644/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:20.499990102 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_540/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:02.267224662 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_540/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:02.271224700 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_177/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:12:44.376871223 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_177/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:44.380871257 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_253/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:36.245315546 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_550/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:10.143300932 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1529/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:56.882674190 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1529/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:56.886674233 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_722/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:16.076542898 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_755/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:39.856781288 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_755/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:39.856781288 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1334/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:39.393193226 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1334/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:39.393193226 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1801/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:14.440781809 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1399/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:24.137677001 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_863/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:59.173582970 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_863/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:59.173582970 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_786/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:01.653000643 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_786/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:01.653000643 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_598/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:17:45.991650415 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_598/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:45.991650415 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1344/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:46.437269523 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_840/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:41.349402030 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_840/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:41.353402070 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_470/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:12.562748147 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_470/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:12.562748147 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1730/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:22.312227261 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1537/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:02.158730731 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_279/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:55.533485744 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1397/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:23.269667635 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1397/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:27:23.269667635 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1017/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:50.818724426 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1017/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:50.818724426 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n@@ -221,9 +217,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 224, 
          "faulty": "return \"THROW\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_255/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:13:37.105323081 -0500\n@@ -221,7 +221,7 @@\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n-          case THROW:           return \"THROW\";\n+          case THROW:           ;\n           case IN:              return \"IN\";\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_255/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:37.109323116 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_255/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:37.109323116 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1823/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:29.916946284 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1823/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:32:29.916946284 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_240/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:26.537230844 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_240/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:26.537230844 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java", 
          "line": 163, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1520/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:51.602617589 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:04:38.780213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1520/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\t2018-12-01 10:28:51.602617589 -0500\n@@ -160,7 +160,7 @@\n     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n+        break;\n       }\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_693/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:55.020332702 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_775/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:54.604929627 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1534/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:00.366711529 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1534/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:00.366711529 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1324/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:32.261115920 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1324/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:32.261115920 -0500\n@@ -221,9 +221,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_143/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:18.680621751 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_143/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:18.680621751 -0500\n@@ -119,10 +119,8 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_881/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:11.489708231 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_881/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:11.493708273 -0500\n@@ -221,9 +221,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_50/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:07.191893707 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_50/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:07.191893707 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1827/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:32:31.684965069 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n         }\n       }\n     }\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1827/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:32:31.684965069 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_347/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:46.633947756 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1355/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:52.545335638 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1355/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:52.545335638 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_208/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:05.825052437 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_562/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:17:18.899385949 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_562/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:18.899385949 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_562/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:18.903385988 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1329/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:35.733153561 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1329/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:35.737153605 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_751/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:38.132763970 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1165/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:24:31.183793284 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"EMPTY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1165/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:24:31.183793284 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1427, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 427, 
          "faulty": "defParent.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:04:39.136213851 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1117/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:23:55.931403675 -0500\n@@ -1424,7 +1424,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1117/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:23:55.931403675 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -424,7 +422,6 @@\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n-        defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n         Node rhs = def.getLastChild();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1350/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:26:49.921307240 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1350/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:26:49.921307240 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:04:39.108213850 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1512/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:28:46.362561398 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1512/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:28:46.366561441 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1512/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:28:46.366561441 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -198,10 +197,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 421, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_575/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:29.323487459 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -418,7 +416,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1758/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:31:42.016436983 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1758/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:31:42.016436983 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 424, 
          "faulty": "while (defParent.getParent().isLabel()) {\n  defParent=defParent.getParent();\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1651/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:22.371588370 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -421,9 +419,6 @@\n         rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n-        while (defParent.getParent().isLabel()) {\n-          defParent = defParent.getParent();\n-        }\n         defParent.detachFromParent();\n         useParent.replaceChild(use, rhs);\n       } else if (defParent.isVar()) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1412/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:27:31.813759800 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1412/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:27:31.813759800 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1555/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:13.634853655 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_688/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:52.432306929 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_688/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:52.432306929 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_174/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:42.556856022 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_174/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:42.560856055 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 423, 
          "faulty": "Preconditions.checkState(defParent.isExprResult());", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1582/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:29:31.835048441 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -419,8 +417,6 @@\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n         rhs.detachFromParent();\n-        // Oh yes! I have grandparent to remove this.\n-        Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n           defParent = defParent.getParent();\n         }\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1582/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:29:31.835048441 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -202,9 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 405, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:42.028213916 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1677/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:30:41.363790964 -0500\n@@ -402,9 +402,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:04:38.760213842 -0500\n+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1677/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:30:41.367791007 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n"
    }
  ]
}