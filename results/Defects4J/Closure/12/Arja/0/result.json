{
  "repair_end": "2018-12-01 16:22:56.062646", 
  "repair_begin": "2018-12-01 15:59:07.754384", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_636/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:54.815399144 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_636/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:54.815399144 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_962/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:20.650770673 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_962/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:20.654770738 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_609/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:11:39.175166783 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BITOR\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_609/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:39.179166843 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1694/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:47.225607257 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1694/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:22:47.229607339 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1694/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:22:47.229607339 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_697/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:32.899984279 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_697/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:32.899984279 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_294/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:11.004066198 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_294/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:08:11.008066252 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_921/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:54.014339332 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_921/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:54.018339397 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_389/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:09:19.537039616 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           ;\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_389/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:19.565040054 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_389/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:19.569040117 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Delete", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1395/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:19:50.510900989 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"BITOR\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1395/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:50.514901049 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1059/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:23.691770012 -0500\n@@ -163,7 +163,6 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -397,9 +396,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1059/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:23.695770075 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1059/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:23.695770075 -0500\n@@ -1446,7 +1446,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      sourcePosition = -1;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1449, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1547/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:18.728193120 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1547/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:21:18.732193179 -0500\n@@ -428,7 +428,6 @@\n \n   boolean dependsOnOuterScopeVars(Definition def) {\n     if (def.unknownDependencies) {\n-      return true;\n     }\n \n     for (Var s : def.depends) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1547/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:18.732193179 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1547/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:18.732193179 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 431, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1624/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:22:05.168866826 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"ADD\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1624/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:05.172866884 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1240/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:19.905551138 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1240/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:19.905551138 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1199/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:52.269133434 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1199/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:52.273133495 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1576/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:36.620453141 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1576/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:36.620453141 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1487/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:42.067658335 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_277/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:07:59.303907196 -0500\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_277/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:59.303907196 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case RETURN:"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_408/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:09:31.653228698 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"BLOCK\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_408/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:31.657228760 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "case PARAM_LIST:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1170/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:35.568879415 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1170/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:35.572879476 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -198,10 +197,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n@@ -216,14 +211,8 @@\n       if (ignoreEdge(e)) {\n         continue;\n       }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_684/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:24.927848573 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_684/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:24.931848641 -0500\n@@ -1459,7 +1459,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1555/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:23.112256889 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1555/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:23.112256889 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1526/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:05.776004501 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1526/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:05.780004560 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1378/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:41.090761858 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1378/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:41.094761917 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1632/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:22:08.668917449 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1632/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:08.668917449 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1632/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:22:08.668917449 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_460/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:09.229809016 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_460/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:09.229809016 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1445/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:18.463312422 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1445/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:18.467312482 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1000/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:44.147146453 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1000/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:44.151146517 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_227/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:20.987386725 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_227/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:20.991386780 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\t;\n     }\n     u.setAnnotation(BLACK);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_539/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:55.662514869 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_539/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:55.666514929 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_539/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:55.666514929 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"SCRIPT\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_513/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:10:41.070294265 -0500\n@@ -258,7 +258,204 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\t}\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_513/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:41.070294265 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase COLON:\nreturn \"COLON\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_401/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:25.601134377 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_401/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:25.609134502 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_955/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:16.446702984 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          break;\n         }\n       }\n     }\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1038/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:10.671565855 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1038/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:10.675565917 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1118/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:01.180352122 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_550/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:02.262614306 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_843/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:05.921544163 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1453/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:22.083365560 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1453/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:22.087365619 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_415/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:36.829309170 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_415/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:36.829309170 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1551/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:21:20.924225067 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1551/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:20.928225125 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_79/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:05:31.737905271 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_79/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:05:31.741905326 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_998/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:43.447135317 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_998/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:43.447135317 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"ADD\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1187/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:46.309042923 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1187/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:46.309042923 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1609/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:56.692744147 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1609/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:56.692744147 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_32/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:04:56.257425168 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1418/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:04.019100073 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1418/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:04.019100073 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_316/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:24.168245134 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_316/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:08:24.176245243 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1384/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:44.622814054 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1035/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:16:09.103541195 -0500\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"BLOCK\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1035/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:09.103541195 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1035/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:09.103541195 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\tbreak;\n     }\n     u.setAnnotation(BLACK);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_598/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:31.295049337 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_598/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:11:31.295049337 -0500\n@@ -340,7 +340,7 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n+        break;\n       }\n     }\n \n@@ -428,7 +428,6 @@\n \n   boolean dependsOnOuterScopeVars(Definition def) {\n     if (def.unknownDependencies) {\n-      return true;\n     }\n \n     for (Var s : def.depends) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 431, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1573/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:35.104431133 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1573/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:35.104431133 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_795/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:35.797033775 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1328/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:10.138302854 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1328/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:10.138302854 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1691/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:45.737576366 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1691/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:22:45.737576366 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1691/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:22:45.737576366 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_376/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:07.472850317 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_376/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:07.476850379 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1427/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:09.579181877 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1427/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:09.579181877 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_651/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:04.383540826 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_651/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:04.383540826 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_154/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:32.546729340 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_154/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:32.562729557 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_634/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:54.115388765 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_208/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:09.923236511 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_208/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:09.923236511 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_776/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:25.056854840 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_776/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:13:25.056854840 -0500\n@@ -340,7 +340,7 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n+        break;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_725/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:51.160292360 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_725/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:12:51.160292360 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_725/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:51.160292360 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_671/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:18.255745642 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_671/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:18.255745642 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1402/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:54.910965892 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1402/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:54.910965892 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_322/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:30.072325399 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1455/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:20:22.827376477 -0500\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"BLOCK\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1455/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:22.831376536 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1455/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:22.831376536 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1318/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:04.938225445 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1318/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:04.942225505 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1429/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:10.275192112 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1429/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:10.275192112 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1270/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:38.377828630 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_192/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:59.679097462 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_192/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:06:59.679097462 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"SUB\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_888/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:34.246015187 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_888/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:34.250015252 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1386/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:45.334824571 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1386/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:45.334824571 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_619/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:45.387259190 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_619/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:45.387259190 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1626/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:05.868876953 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1626/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:05.868876953 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_417/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:37.829324696 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_417/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:37.833324758 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1308/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:59.850149617 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1308/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:18:59.850149617 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1308/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:59.854149677 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_391/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:09:20.405053196 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_391/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:20.409053258 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_631/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:11:52.695367704 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_631/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:52.695367704 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_631/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:52.699367763 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_640/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:56.903430092 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1263/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:34.785774771 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_808/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:44.461181629 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_530/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:10:50.642439096 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_530/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:50.646439156 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_530/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:50.646439156 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\t;\n     }\n     u.setAnnotation(BLACK);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_498/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:32.310161308 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_498/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:32.314161369 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_773/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:23.580830584 -0500\n@@ -163,7 +163,6 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -397,9 +396,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_422/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:41.129375888 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_422/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:09:41.129375888 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_422/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:41.129375888 -0500\n@@ -198,12 +198,7 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1447/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:19.263324169 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1447/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:19.263324169 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1538/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:13.652119238 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_659/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:09.675619043 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_659/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:09.679619102 -0500\n@@ -211,8 +211,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_510/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:39.566271465 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_510/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:39.566271465 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1584/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:40.332507012 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1584/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:21:40.332507012 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1584/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:21:40.332507012 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_625/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:49.075313979 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_625/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:49.075313979 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_625/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:49.079314038 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "parent=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1272/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:39.129839899 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1272/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:39.129839899 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1415/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:02.591079050 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1415/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:02.591079050 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1322/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:07.154258444 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1322/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:07.158258503 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_56/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:05:15.457684903 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1579/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:38.104474681 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1579/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:38.104474681 -0500\n@@ -119,9 +119,7 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1226/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:10.577410504 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1226/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:18:10.581410565 -0500\n@@ -428,7 +428,7 @@\n \n   boolean dependsOnOuterScopeVars(Definition def) {\n     if (def.unknownDependencies) {\n-      return true;\n+      return false;\n     }\n \n     for (Var s : def.depends) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 431, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_524/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:47.650393874 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_524/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:47.654393935 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_333/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:37.964432703 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_333/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:08:37.972432811 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_702/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:35.808033596 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_702/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:35.808033596 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\t;\n     }\n     u.setAnnotation(BLACK);\n   }\n@@ -216,10 +215,6 @@\n       if (ignoreEdge(e)) {\n         continue;\n       }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n         return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1465/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:29.311471563 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1465/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:29.315471621 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_787/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:31.592962018 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_787/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:31.596962084 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1470/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:31.771507612 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1470/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:31.771507612 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\tbreak;\n     }\n     u.setAnnotation(BLACK);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_488/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:26.682075673 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_488/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:26.682075673 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1494/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:46.579724310 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_741/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:01.348462661 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_708/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:39.384094108 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_708/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:12:39.388094175 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_708/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:39.388094175 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1133/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:12.252522550 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1133/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:12.252522550 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1596/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:48.176620768 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1596/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:48.180620826 -0500\n@@ -221,9 +221,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1596/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:21:48.180620826 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1176/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:39.576940495 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1176/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:39.584940617 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_412/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:09:34.889279030 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             return \"PARAM_LIST\";\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_412/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:34.925279590 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_369/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:09:01.512756401 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_369/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:01.524756590 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_369/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:01.524756590 -0500\n@@ -211,8 +211,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "case SUB:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1450/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:20.659344661 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1450/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:20.659344661 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_296/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:08:11.712075821 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_296/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:11.716075875 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1431/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:10.991202640 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1431/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:20:10.995202698 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1431/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:20:10.995202698 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1431/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:10.995202698 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1194/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:49.949098220 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1194/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:49.949098220 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1342/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:19:18.890432941 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1342/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:18.894433001 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1342/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:18.894433001 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_483/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:23.802031786 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_483/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:23.802031786 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_218/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:15.939318185 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_218/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:15.939318185 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_903/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:43.066160256 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_903/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:43.070160322 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1315/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:03.406202623 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1315/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:03.406202623 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1654/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:22:21.421101727 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1654/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:21.421101727 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1654/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:22:21.421101727 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1654/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:21.421101727 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "case SUB:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_917/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:51.918305131 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_917/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:51.918305131 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -202,9 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1111/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:57.608297000 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_546/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:00.062581184 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_546/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:00.062581184 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1368/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:34.558665233 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1368/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:34.562665292 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -221,9 +220,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1412/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:01.191058434 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1412/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:01.195058493 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1281/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:44.121914658 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1281/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:44.125914718 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_90/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:05:40.674026280 -0500\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_90/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:05:40.686026442 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_90/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:05:40.686026442 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case RETURN:"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_241/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:31.235525892 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_241/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:31.263526273 -0500\n@@ -122,7 +122,7 @@\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_136/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:15.170493718 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_136/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:06:15.222494421 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_136/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:15.222494421 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_533/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:52.078460784 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_533/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:52.082460845 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1498/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:47.979744772 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1498/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:47.983744831 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_161/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:36.206778985 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_161/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:36.226779255 -0500\n@@ -122,7 +122,7 @@\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_330/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:36.420411709 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_330/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:08:36.424411763 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1571/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:21:34.328419866 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"ADD\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1571/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:34.328419866 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_854/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:13.321668011 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_854/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:13.321668011 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_804/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:42.329145329 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_804/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:13:42.329145329 -0500\n@@ -428,7 +428,6 @@\n \n   boolean dependsOnOuterScopeVars(Definition def) {\n     if (def.unknownDependencies) {\n-      return true;\n     }\n \n     for (Var s : def.depends) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 431, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1365/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:33.006642255 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1365/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:33.006642255 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_518/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:44.046339344 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_518/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:10:44.050339404 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_518/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:44.050339404 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -221,9 +220,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      break;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_866/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:20.461786972 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_866/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:20.461786972 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1347/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:21.946478309 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1347/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:19:21.946478309 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1347/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:19:21.950478368 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"SUB\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_561/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:09.490722970 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_561/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:09.490722970 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_561/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:11:09.490722970 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_561/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:09.494723029 -0500\n@@ -1446,7 +1446,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      sourcePosition = -1;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1449, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1203/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:54.589168624 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1203/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:54.589168624 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_364/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:58.228708280 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -518,9 +516,7 @@\n     for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {\n       for (Node cur = p.getParent().getFirstChild(); cur != p;\n           cur = cur.getNext()) {\n-        if (predicate.apply(cur)) {\n-          return true;\n-        }\n+        return false;\n       }\n     }\n     return false;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 521, 
          "faulty": "if (predicate.apply(cur)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1541/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:15.068139854 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1541/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:15.072139912 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1614/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:59.500784803 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1614/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:21:59.500784803 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n@@ -213,9 +209,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_566/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:12.398766620 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_566/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:11:12.398766620 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_566/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:12.398766620 -0500\n@@ -122,7 +122,7 @@\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1085/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:40.372030025 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -518,9 +516,6 @@\n     for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {\n       for (Node cur = p.getParent().getFirstChild(); cur != p;\n           cur = cur.getNext()) {\n-        if (predicate.apply(cur)) {\n-          return true;\n-        }\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1085/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:40.372030025 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -202,9 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 521, 
          "faulty": "if (predicate.apply(cur)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_426/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:43.345410223 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_426/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:43.345410223 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_300/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:13.824104527 -0500\n@@ -163,7 +163,8 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = null;\n+\t\tinlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -397,9 +398,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_300/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:08:13.824104527 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "InsertBefore", 
          "seed": "this.cfg=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1581/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:38.836485304 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1581/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:21:38.836485304 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_580/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:19.590874409 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_580/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:19.590874409 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_818/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:49.489267032 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_818/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:49.493267101 -0500\n@@ -198,12 +198,7 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1519/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:21:01.539942739 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1519/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:21:01.543942797 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_444/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:57.933635484 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_444/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:57.949635730 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n@@ -221,9 +220,6 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_471/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:16.485920093 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_471/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:10:16.489920154 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_150/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:28.426673463 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_150/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:28.430673517 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_778/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:25.784866795 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_778/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:25.788866860 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1152/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:25.468725156 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1152/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:25.468725156 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1245/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:23.249601469 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1245/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:18:23.249601469 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1115/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:59.712329477 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1115/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:59.712329477 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\tbreak;\n     }\n     u.setAnnotation(BLACK);\n   }\n@@ -216,10 +215,6 @@\n       if (ignoreEdge(e)) {\n         continue;\n       }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n         return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1324/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:07.958270413 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1324/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:07.958270413 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1185/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:45.513030822 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -518,9 +516,6 @@\n     for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {\n       for (Node cur = p.getParent().getFirstChild(); cur != p;\n           cur = cur.getNext()) {\n-        if (predicate.apply(cur)) {\n-          return true;\n-        }\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1185/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:45.513030822 -0500\n@@ -216,10 +216,6 @@\n       if (ignoreEdge(e)) {\n         continue;\n       }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n         return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 521, 
          "faulty": "if (predicate.apply(cur)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1434/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:12.411223514 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1434/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:12.411223514 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_347/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:47.856567217 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_347/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:08:47.856567217 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1502/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:50.115775983 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1502/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:50.119776041 -0500\n@@ -119,9 +119,7 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -145,9 +143,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\t;\n     }\n     u.setAnnotation(BLACK);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1279/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:43.421904180 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1279/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:43.421904180 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_349/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:48.592577226 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_349/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:08:48.596577281 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"RETURN\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1040/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:11.379576984 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1040/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:11.379576984 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_976/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:30.178923566 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_976/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:30.178923566 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\t;\n     }\n     u.setAnnotation(BLACK);\n   }\n@@ -221,9 +220,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_573/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:11:16.002820664 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_573/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:16.002820664 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_573/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:16.002820664 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_73/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:05:27.513848083 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1196/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:50.721109940 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1196/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:50.725110001 -0500\n@@ -202,17 +202,12 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_396/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:22.713089279 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_396/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:09:22.713089279 -0500\n@@ -221,9 +221,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_249/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:38.583625695 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_249/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:07:38.587625749 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_249/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:38.587625749 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1168/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:34.864868679 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1168/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:34.864868679 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1496/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:47.279734542 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1496/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:47.283734601 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1191/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:48.501076230 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1191/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:48.505076290 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1621/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:03.780846745 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1621/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:03.784846803 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_569/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:13.886788940 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_569/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:13.886788940 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_569/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:11:13.890789001 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_399/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:09:24.401115646 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_399/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:24.417115896 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_158/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:34.726758909 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_158/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:34.730758964 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_309/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:19.592182929 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_309/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:08:19.604183092 -0500\n@@ -1446,7 +1446,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      sourcePosition = -1;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1449, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1473/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:33.395531402 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1473/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:33.399531460 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_197/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:07:03.003142577 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           ;\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_197/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:03.003142577 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Delete", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_190/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:58.723084487 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_190/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:58.727084542 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1645/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:15.633018117 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1645/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:15.637018175 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -202,9 +201,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1267/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:18:36.889806324 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return null;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1267/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:36.889806324 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1267/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:36.893806384 -0500\n@@ -221,9 +221,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1355/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:26.454545177 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1355/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:26.454545177 -0500\n@@ -203,27 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n-    }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n     }\n     return false;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1355/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:19:26.454545177 -0500\n@@ -572,7 +572,6 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n       }\n     }\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_763/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:17.940737711 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          break;\n         }\n       }\n     }\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_763/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:17.940737711 -0500\n@@ -145,9 +145,8 @@\n       DiGraphNode<N, E> v = e.getDestination();\n       if (v.getAnnotation() == WHITE) {\n         discoverBackEdges(v);\n-      } else if (v.getAnnotation() == GRAY) {\n-        e.setAnnotation(BACK_EDGE);\n-      }\n+      } else\n+\t\t;\n     }\n     u.setAnnotation(BLACK);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 148, 
          "faulty": "if (v.getAnnotation() == GRAY) {\n  e.setAnnotation(BACK_EDGE);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_480/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:22.230007811 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_480/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:22.234007873 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_480/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:22.234007873 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_755/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:12.588649291 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_755/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:12.592649358 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_617/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:44.687248785 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_617/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:44.687248785 -0500\n@@ -202,29 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1436/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:13.183234861 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1436/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:13.183234861 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_126/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:07.578390803 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_126/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:07.578390803 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_126/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:06:07.578390803 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_244/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:34.427569245 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_244/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:34.431569300 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_274/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:57.887887955 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_274/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:57.891888009 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n@@ -213,9 +212,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_261/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:48.475760073 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1099/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:49.092165301 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1099/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:49.096165364 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1485/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:41.367648095 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1485/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:41.371648154 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n@@ -206,11 +205,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1485/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:41.371648154 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_222/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:18.219349141 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_222/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:18.219349141 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1669/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:31.305274055 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_451/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:03.525721484 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_451/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:03.533721607 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_120/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:03.886340762 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_120/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:03.890340817 -0500\n@@ -203,7 +203,6 @@\n       return true;\n     }\n     if (a == b) {\n-      return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 206, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1043/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:12.859600239 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1043/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:12.859600239 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_140/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:18.650540899 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_140/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:18.670541170 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_258/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:46.891738554 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_258/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:07:46.895738608 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return new NodeMismatch(this,node2);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1630/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:07.956907153 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1630/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:07.960907211 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1643/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:14.937008059 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1643/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:14.937008059 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_180/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:50.814977171 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_180/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:06:50.814977171 -0500\n@@ -216,10 +216,6 @@\n       if (ignoreEdge(e)) {\n         continue;\n       }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n       DiGraphNode<N, E> next = e.getDestination();\n       if (checkSomePathsWithoutBackEdges(next, b)) {\n         return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 219, 
          "faulty": "if (e.getAnnotation() == BACK_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_352/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:08:49.988596212 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -518,9 +516,6 @@\n     for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {\n       for (Node cur = p.getParent().getFirstChild(); cur != p;\n           cur = cur.getNext()) {\n-        if (predicate.apply(cur)) {\n-          return true;\n-        }\n       }\n     }\n     return false;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 521, 
          "faulty": "if (predicate.apply(cur)) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_394/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:22.005078215 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_394/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:09:22.009078278 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_394/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:09:22.009078278 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"SUB\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_677/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:12:21.375791614 -0500\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"BLOCK\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_677/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:21.379791672 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1087/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:41.072040900 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1087/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:41.072040900 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_864/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:19.757775266 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_864/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:14:19.761775331 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_864/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:19.761775331 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_455/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:10:06.377765275 -0500\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_455/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:06.381765335 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_455/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:10:06.381765335 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"ADD\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case PARAM_LIST:"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_993/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:40.575089592 -0500\n@@ -163,7 +163,8 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = null;\n+\t\tinlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -397,9 +398,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "InsertBefore", 
          "seed": "this.cfg=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_693/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:30.767948059 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_500/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:10:33.022172129 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_500/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:33.022172129 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_500/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:33.022172129 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_924/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:14:55.450362739 -0500\n@@ -225,7 +225,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_924/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:55.454362804 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_924/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:14:55.454362804 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_924/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:55.454362804 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 228, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_875/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:26.221882564 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_875/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:26.221882564 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1165/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:33.460847259 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1165/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:33.460847259 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_932/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:00.554445796 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1439/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:14.723257490 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1439/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:14.723257490 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1439/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:20:14.723257490 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return res;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1292/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:49.813999790 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1292/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:49.813999790 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n@@ -221,9 +218,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      break;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1353/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:25.678533671 -0500\n@@ -163,7 +163,7 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = null;\n         }\n       }\n     }\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1064/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:26.651816276 -0500\n@@ -163,7 +163,8 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = null;\n+\t\tinlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -397,9 +398,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1064/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:26.655816339 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "InsertBefore", 
          "seed": "this.cfg=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_893/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:37.322065863 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_896/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:38.818090477 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_896/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:38.818090477 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1389/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:46.854847020 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1389/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:46.854847020 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_234/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:25.871453046 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_234/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:25.899453426 -0500\n@@ -221,9 +221,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      return false;\n     }\n     return false;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_234/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:07:25.899453426 -0500\n@@ -1459,7 +1459,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_674/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:19.667766451 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_674/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:12:19.671766511 -0500\n@@ -428,7 +428,7 @@\n \n   boolean dependsOnOuterScopeVars(Definition def) {\n     if (def.unknownDependencies) {\n-      return true;\n+      return false;\n     }\n \n     for (Var s : def.depends) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 431, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_86/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:05:37.177978934 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_86/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:05:37.181978988 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_828/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:13:55.885375258 -0500\n@@ -228,7 +228,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_828/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:55.885375258 -0500\n@@ -163,7 +163,8 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = null;\n+\t\tinlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -397,9 +398,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 231, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case RETURN:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "InsertBefore", 
          "seed": "this.cfg=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_528/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:49.830426828 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_528/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:49.834426888 -0500\n@@ -198,13 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_577/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:18.166853085 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_577/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:11:18.166853085 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1299/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:54.166064803 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1299/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:54.170064863 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_815/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:48.065242875 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_815/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:48.065242875 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_593/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:11:28.395006047 -0500\n@@ -193,7 +193,7 @@\n           case LSH:             return \"LSH\";\n           case RSH:             return \"RSH\";\n           case URSH:            return \"URSH\";\n-          case ADD:             return \"ADD\";\n+          case ADD:             ;\n           case SUB:             return \"SUB\";\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           ;\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_593/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:11:28.395006047 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_593/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:11:28.395006047 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 196, 
          "faulty": "return \"ADD\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_270/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:07:55.687858061 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           ;\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_270/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:55.691858115 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_270/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:55.691858115 -0500\n@@ -206,11 +206,6 @@\n       return false;\n     }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n       e.setAnnotation(VISITED_EDGE);\n \n       if (ignoreEdge(e)) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Delete", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 211, 
          "faulty": "if (e.getAnnotation() == VISITED_EDGE) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_985/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:35.643010928 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_985/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:15:35.643010928 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"PARAM_LIST\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1081/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:38.275997443 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1081/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:16:38.279997505 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"BLOCK\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1468/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:20:30.831493838 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1468/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:20:30.831493838 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_435/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:09:51.269532747 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_200/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:04.735166086 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_200/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:04.747166249 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1337/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:16.038390577 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1337/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:16.038390577 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_914/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:50.518282265 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_680/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:12:22.803812741 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_680/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:12:22.803812741 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_680/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:12:22.807812800 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"ADD\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1284/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:45.565936266 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1284/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:18:45.565936266 -0500\n@@ -428,7 +428,6 @@\n \n   boolean dependsOnOuterScopeVars(Definition def) {\n     if (def.unknownDependencies) {\n-      return true;\n     }\n \n     for (Var s : def.depends) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1284/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:45.565936266 -0500\n@@ -122,7 +122,7 @@\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n-    return result;\n+    return false;\n   }\n \n   private void setUp() {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 431, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 125, 
          "faulty": "return result;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_739/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:00.636450794 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_739/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:00.640450861 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_813/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:47.361230923 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_813/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:47.361230923 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_813/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:13:47.361230923 -0500\n@@ -140,7 +140,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"ADD\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 143, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1157/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:17:28.460770905 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1157/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:17:28.464770965 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_174/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:06:46.558919422 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -518,9 +516,7 @@\n     for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {\n       for (Node cur = p.getParent().getFirstChild(); cur != p;\n           cur = cur.getNext()) {\n-        if (predicate.apply(cur)) {\n-          return true;\n-        }\n+        break;\n       }\n     }\n     return false;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_174/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/ControlFlowGraph.java\t2018-12-01 10:06:46.558919422 -0500\n@@ -198,7 +198,7 @@\n       case Token.CASE:\n       case Token.CATCH:\n       case Token.WITH:\n-        return n != parent.getFirstChild();\n+        return false;\n       default:\n         return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowGraph.java", 
          "line": 201, 
          "faulty": "return n != parent.getFirstChild();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 521, 
          "faulty": "if (predicate.apply(cur)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_885/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:14:32.821991696 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_885/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:14:32.825991762 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_885/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:14:32.825991762 -0500\n@@ -1459,7 +1459,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return new NodeMismatch(this,node2);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_789/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:32.308973998 -0500\n@@ -163,7 +163,8 @@\n         // We keep track of when the variable dependency graph changed\n         // so that we can back off appropriately.\n         if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n+          this.cfg = cfg;\n+\t\tinlinedNewDependencies.add(t.getScope().getVar(c.varName));\n         }\n       }\n     }\n@@ -397,9 +398,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 09:58:46.392123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_789/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\t2018-12-01 10:13:32.308973998 -0500\n@@ -340,7 +340,6 @@\n         continue;\n       }\n       if (otherDef.depends.contains(var)) {\n-        def.reachingDef.put(other, null);\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 166, 
          "faulty": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));", 
          "type": "InsertBefore", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java", 
          "line": 343, 
          "faulty": "def.reachingDef.put(other,null);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_50/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:05:11.449630669 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_50/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:05:11.449630669 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_238/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:28.963495036 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_238/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:29.179497975 -0500\n@@ -213,9 +213,6 @@\n       }\n       e.setAnnotation(VISITED_EDGE);\n \n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n       if (e.getAnnotation() == BACK_EDGE) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 216, 
          "faulty": "if (ignoreEdge(e)) {\n  continue;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_983/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:15:34.846998215 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_983/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:15:34.846998215 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1681/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:39.333442832 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n@@ -413,7 +411,6 @@\n       Node useParent = use.getParent();\n       if (def.isAssign()) {\n         Node rhs = def.getLastChild();\n-        rhs.detachFromParent();\n         // Oh yes! I have grandparent to remove this.\n         Preconditions.checkState(defParent.isExprResult());\n         while (defParent.getParent().isLabel()) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 416, 
          "faulty": "rhs.detachFromParent();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1257/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:31.185720744 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 09:58:46.384123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1257/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/DataFlowAnalysis.java\t2018-12-01 10:18:31.189720803 -0500\n@@ -572,7 +572,7 @@\n       Var var = i.next();\n       if (var.getParentNode().isCatch() ||\n           compiler.getCodingConvention().isExported(var.getName())) {\n-        escaped.add(var);\n+        break;\n       }\n     }\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1257/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:31.189720803 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java", 
          "line": 575, 
          "faulty": "escaped.add(var);", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_770/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:13:22.188807691 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_770/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:13:22.188807691 -0500\n@@ -119,7 +119,6 @@\n    *     predicate\n    */\n   public boolean somePathsSatisfyPredicate() {\n-    setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n     tearDown();\n     return result;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 122, 
          "faulty": "setUp();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1641/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Token.java\t2018-12-01 10:22:14.236997943 -0500\n@@ -258,7 +258,7 @@\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n-          case CATCH:           return \"CATCH\";\n+          case CATCH:           return \"PARAM_LIST\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1641/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:22:14.240998001 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1641/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:22:14.240998001 -0500\n@@ -221,9 +221,7 @@\n       }\n \n       DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n+      break;\n     }\n     return false;\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 261, 
          "faulty": "return \"CATCH\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 224, 
          "faulty": "if (checkSomePathsWithoutBackEdges(next,b)) {\n  return true;\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_213/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:07:12.923277238 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_213/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:07:12.923277238 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:58:46.416123332 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_213/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java\t2018-12-01 10:07:12.923277238 -0500\n@@ -1459,7 +1459,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1462, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_493/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:10:29.506118664 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_493/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:10:29.506118664 -0500\n@@ -121,7 +121,6 @@\n   public boolean somePathsSatisfyPredicate() {\n     setUp();\n     boolean result = checkSomePathsWithoutBackEdges(start, end);\n-    tearDown();\n     return result;\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 124, 
          "faulty": "tearDown();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1289/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:18:48.413978861 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1289/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:18:48.417978921 -0500\n@@ -205,26 +205,6 @@\n     if (a == b) {\n       return false;\n     }\n-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n-      // Once we visited that edge once, we no longer need to\n-      // re-visit it again.\n-      if (e.getAnnotation() == VISITED_EDGE) {\n-        continue;\n-      }\n-      e.setAnnotation(VISITED_EDGE);\n-\n-      if (ignoreEdge(e)) {\n-        continue;\n-      }\n-      if (e.getAnnotation() == BACK_EDGE) {\n-        continue;\n-      }\n-\n-      DiGraphNode<N, E> next = e.getDestination();\n-      if (checkSomePathsWithoutBackEdges(next, b)) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 208, 
          "faulty": "for (DiGraphEdge<N,E> e : a.getOutEdges()) {\n  if (e.getAnnotation() == VISITED_EDGE) {\n    continue;\n  }\n  e.setAnnotation(VISITED_EDGE);\n  if (ignoreEdge(e)) {\n    continue;\n  }\n  if (e.getAnnotation() == BACK_EDGE) {\n    continue;\n  }\n  DiGraphNode<N,E> next=e.getDestination();\n  if (checkSomePathsWithoutBackEdges(next,b)) {\n    return true;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1067/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:16:28.319842324 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1067/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:16:28.319842324 -0500\n@@ -198,10 +198,6 @@\n    */\n   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,\n       DiGraphNode<N, E> b) {\n-    if (nodePredicate.apply(a.getValue()) &&\n-        (inclusive || (a != start && a != end))) {\n-      return true;\n-    }\n     if (a == b) {\n       return false;\n     }\n@@ -211,8 +207,6 @@\n       if (e.getAnnotation() == VISITED_EDGE) {\n         continue;\n       }\n-      e.setAnnotation(VISITED_EDGE);\n-\n       if (ignoreEdge(e)) {\n         continue;\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 201, 
          "faulty": "if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) {\n  return true;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 214, 
          "faulty": "e.setAnnotation(VISITED_EDGE);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 09:58:46.388123331 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1311/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2018-12-01 10:19:01.274170848 -0500\n@@ -397,9 +397,7 @@\n                  Predicates.\n                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                  false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 09:58:46.044123323 -0500\n+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1311/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\t2018-12-01 10:19:01.278170908 -0500\n@@ -202,9 +202,6 @@\n         (inclusive || (a != start && a != end))) {\n       return true;\n     }\n-    if (a == b) {\n-      return false;\n-    }\n     for (DiGraphEdge<N, E> e : a.getOutEdges()) {\n       // Once we visited that edge once, we no longer need to\n       // re-visit it again.\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java", 
          "line": 205, 
          "faulty": "if (a == b) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java", 
          "line": 400, 
          "faulty": "if (pathCheck.somePathsSatisfyPredicate()) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ]
    }
  ]
}